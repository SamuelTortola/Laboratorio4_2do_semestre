
Esclavo 2_botones.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000964  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000798  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000452  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  000018d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000414  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000249  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001fe9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  88:	0c 94 23 01 	jmp	0x246	; 0x246 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Config_SLAVE>:


uint8_t esclavo, dato, aux;

void I2C_Config_SLAVE(uint8_t address){
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
  90:	97 b1       	in	r25, 0x07	; 7
  92:	9f 7c       	andi	r25, 0xCF	; 207
  94:	97 b9       	out	0x07, r25	; 7
	
	address <<= 1;  //Ubica la dirección y
  96:	88 0f       	add	r24, r24
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
  98:	81 60       	ori	r24, 0x01	; 1
	TWAR = address;
  9a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
  9e:	85 e4       	ldi	r24, 0x45	; 69
  a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a4:	08 95       	ret

000000a6 <setup>:
int contador = 0, dato;


void setup(void);
void setup(void){
	DDRB = 0b00000000;   //PB0, PB1 como entrada de pulsadores
  a6:	14 b8       	out	0x04, r1	; 4
	DDRD = 0b00001111;  //Salida hacia LEDs del contador de 4 bits
  a8:	8f e0       	ldi	r24, 0x0F	; 15
  aa:	8a b9       	out	0x0a, r24	; 10

	PORTB = 0b00000011;		//pull up encendido en PB0 y PB1 
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b00000000;   //Iniciamos los leds apagados
  b0:	1b b8       	out	0x0b, r1	; 11
	
	UCSR0B = 0;  //Usar los pines TX y RX como digitales
  b2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	PCMSK0 |= (1 << 0)|(1 << 1); //PCINT0, PCINT1
  b6:	eb e6       	ldi	r30, 0x6B	; 107
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	80 83       	st	Z, r24
	PCICR |= (1 << 0); //Mascara de interrupción
  c0:	e8 e6       	ldi	r30, 0x68	; 104
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 83       	st	Z, r24
	
	
	I2C_Config_SLAVE(0x03);   //Iniciar el I2C como esclavo, enviarle su dirección
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Config_SLAVE>
	
	sei(); //Activar interrupciones
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <main>:
}

int main(void)
{
    setup();
  d4:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e3       	ldi	r24, 0x3F	; 63
  da:	9c e9       	ldi	r25, 0x9C	; 156
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x8>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0xe>
  e2:	00 00       	nop
  e4:	f9 cf       	rjmp	.-14     	; 0xd8 <main+0x4>

000000e6 <__vector_3>:
		
    }
}


ISR(PCINT0_vect){
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
	
	
	if(((PINB) & (1<<0)) == 0){   //Condicional que compara si se presionó el pulsador 1
  f6:	18 99       	sbic	0x03, 0	; 3
  f8:	26 c0       	rjmp	.+76     	; 0x146 <__vector_3+0x60>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	80 e7       	ldi	r24, 0x70	; 112
  fe:	92 e0       	ldi	r25, 0x02	; 2
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <__vector_3+0x1a>
 108:	00 c0       	rjmp	.+0      	; 0x10a <__vector_3+0x24>
 10a:	00 00       	nop
		_delay_ms(50);  //antirrebote
		contador ++;
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 110:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if (contador >= 15)
 11e:	0f 97       	sbiw	r24, 0x0f	; 15
 120:	34 f0       	brlt	.+12     	; 0x12e <__vector_3+0x48>
		{
			contador = 15;
 122:	8f e0       	ldi	r24, 0x0F	; 15
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		PORTD = contador;
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	8b b9       	out	0x0b, r24	; 11
		
		  
		while ((PINB & (1 << PINB0)) == 0)   //While para evitar sumas indebidas
 134:	06 c0       	rjmp	.+12     	; 0x142 <__vector_3+0x5c>
 136:	8f e3       	ldi	r24, 0x3F	; 63
 138:	9c e9       	ldi	r25, 0x9C	; 156
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <__vector_3+0x54>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <__vector_3+0x5a>
 140:	00 00       	nop
 142:	18 9b       	sbis	0x03, 0	; 3
 144:	f8 cf       	rjmp	.-16     	; 0x136 <__vector_3+0x50>
			_delay_ms(10);
		}
		
	}
	
	if(((PINB) & (1<<1)) == 0){   //Condicional que compara si se presionó el pulsador  de start
 146:	19 99       	sbic	0x03, 1	; 3
 148:	25 c0       	rjmp	.+74     	; 0x194 <__vector_3+0xae>
 14a:	9f ef       	ldi	r25, 0xFF	; 255
 14c:	20 e7       	ldi	r18, 0x70	; 112
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	91 50       	subi	r25, 0x01	; 1
 152:	20 40       	sbci	r18, 0x00	; 0
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <__vector_3+0x6a>
 158:	00 c0       	rjmp	.+0      	; 0x15a <__vector_3+0x74>
 15a:	00 00       	nop
		_delay_ms(50);  //antirrebote
		
		contador --;
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 160:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
			if (contador <= 0)
 16e:	18 16       	cp	r1, r24
 170:	19 06       	cpc	r1, r25
 172:	24 f0       	brlt	.+8      	; 0x17c <__vector_3+0x96>
			{
				contador = 0;
 174:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 178:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			PORTD = contador;
 17c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 180:	8b b9       	out	0x0b, r24	; 11
		
		while ((PINB & (1 << PINB1)) == 0)   //While para evitar sumas indebidas
 182:	06 c0       	rjmp	.+12     	; 0x190 <__vector_3+0xaa>
 184:	8f e3       	ldi	r24, 0x3F	; 63
 186:	9c e9       	ldi	r25, 0x9C	; 156
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <__vector_3+0xa2>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <__vector_3+0xa8>
 18e:	00 00       	nop
 190:	19 9b       	sbis	0x03, 1	; 3
 192:	f8 cf       	rjmp	.-16     	; 0x184 <__vector_3+0x9e>
			_delay_ms(10);
		}
		
	}
	
}
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <__vector_24>:

ISR(TWI_vect){           //Vector de interrupción de I2C
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
	uint8_t estado;
	
	estado = TWSR & 0xFC;  //Lee el estado de la interfaz
 1b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1ba:	8c 7f       	andi	r24, 0xFC	; 252
	
	switch(estado){
 1bc:	80 39       	cpi	r24, 0x90	; 144
 1be:	c9 f0       	breq	.+50     	; 0x1f2 <__vector_24+0x4e>
 1c0:	38 f4       	brcc	.+14     	; 0x1d0 <__vector_24+0x2c>
 1c2:	80 37       	cpi	r24, 0x70	; 112
 1c4:	81 f0       	breq	.+32     	; 0x1e6 <__vector_24+0x42>
 1c6:	80 38       	cpi	r24, 0x80	; 128
 1c8:	a1 f0       	breq	.+40     	; 0x1f2 <__vector_24+0x4e>
 1ca:	80 36       	cpi	r24, 0x60	; 96
 1cc:	71 f5       	brne	.+92     	; 0x22a <__vector_24+0x86>
 1ce:	0b c0       	rjmp	.+22     	; 0x1e6 <__vector_24+0x42>
 1d0:	88 3b       	cpi	r24, 0xB8	; 184
 1d2:	e1 f0       	breq	.+56     	; 0x20c <__vector_24+0x68>
 1d4:	18 f4       	brcc	.+6      	; 0x1dc <__vector_24+0x38>
 1d6:	88 3a       	cpi	r24, 0xA8	; 168
 1d8:	c9 f0       	breq	.+50     	; 0x20c <__vector_24+0x68>
 1da:	27 c0       	rjmp	.+78     	; 0x22a <__vector_24+0x86>
 1dc:	80 3c       	cpi	r24, 0xC0	; 192
 1de:	f9 f0       	breq	.+62     	; 0x21e <__vector_24+0x7a>
 1e0:	88 3c       	cpi	r24, 0xC8	; 200
 1e2:	e9 f0       	breq	.+58     	; 0x21e <__vector_24+0x7a>
 1e4:	22 c0       	rjmp	.+68     	; 0x22a <__vector_24+0x86>
		case 0x60:
		case 0x70:              //Direccionado con su direccion de esclavo
			TWCR |= (1 << TWINT); //
 1e6:	ec eb       	ldi	r30, 0xBC	; 188
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	80 68       	ori	r24, 0x80	; 128
 1ee:	80 83       	st	Z, r24
			break;
 1f0:	21 c0       	rjmp	.+66     	; 0x234 <__vector_24+0x90>
			
		case 0x80:
		case 0x90:
			dato = TWDR;  //Recibió el dato, llamada general 
 1f2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <dato+0x1>
 1fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dato>
			TWCR |= 1 << TWINT; //Borra la bandera TWINT
 200:	ec eb       	ldi	r30, 0xBC	; 188
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	80 68       	ori	r24, 0x80	; 128
 208:	80 83       	st	Z, r24
			break;
 20a:	14 c0       	rjmp	.+40     	; 0x234 <__vector_24+0x90>
			
		case 0xA8: // SLA+R recibido, maestro solicita lectura
		case 0xB8: // Dato transmitido y ACK recibido
			TWDR = contador; // Cargar el dato en el registro de datos*****************
 20c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 210:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWIE)| (1 << TWEA); // Listo para la próxima operación
 214:	ec eb       	ldi	r30, 0xBC	; 188
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	85 6c       	ori	r24, 0xC5	; 197
 21c:	80 83       	st	Z, r24
		
		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Último dato transmitido y ACK recibido
			TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Listo para la próxima operación
 21e:	ec eb       	ldi	r30, 0xBC	; 188
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	84 6c       	ori	r24, 0xC4	; 196
 226:	80 83       	st	Z, r24
		break;
 228:	05 c0       	rjmp	.+10     	; 0x234 <__vector_24+0x90>
		
		default:    //Libera el BUS de cualquier errror
			TWCR |= (1 << TWINT) | (1 << TWSTO);
 22a:	ec eb       	ldi	r30, 0xBC	; 188
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 69       	ori	r24, 0x90	; 144
 232:	80 83       	st	Z, r24
			
	}
	
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <_exit>:
 246:	f8 94       	cli

00000248 <__stop_program>:
 248:	ff cf       	rjmp	.-2      	; 0x248 <__stop_program>
