
Esclavo 1_pot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000256  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000917  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007de  00000000  00000000  00000c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a8  00000000  00000000  00001435  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  000018e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000425  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011c  00000000  00000000  00001dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001ef5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  88:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
#include "ADC.h"

void initADC(){
	
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	DIDR0 |= (1 <<ADC0D);	//desabilitar el A0 como digital
  96:	ae e7       	ldi	r26, 0x7E	; 126
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	8c 91       	ld	r24, X
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8c 93       	st	X, r24
	DIDR0 |= (1<<ADC1D);     //desabilitar el A1 como digital


  a0:	80 81       	ld	r24, Z
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	80 83       	st	Z, r24
	//JUSTIFICACION IZQUIERDA
	ADMUX |= (1<<ADLAR);
  a6:	80 81       	ld	r24, Z
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	80 83       	st	Z, r24
	//REFERENCIA INTERNA
  ac:	80 81       	ld	r24, Z
  ae:	8f 77       	andi	r24, 0x7F	; 127
  b0:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);
	ADMUX &= ~(1 << REFS1);
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	80 83       	st	Z, r24
	// HABILITAR INTERRUPCION
	ADCSRA |= (1<<ADIE);
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
	//PRESCALER 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);  //Habilitando prescaler de 16M/128 frecuencia = 125Khz
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <I2C_Config_SLAVE>:


uint8_t esclavo, dato, aux;

void I2C_Config_SLAVE(uint8_t address){
	DDRC &= ~((1<<DDC4) | (1<<DDC5));
  ca:	97 b1       	in	r25, 0x07	; 7
  cc:	9f 7c       	andi	r25, 0xCF	; 207
  ce:	97 b9       	out	0x07, r25	; 7
	
	address <<= 1;  //Ubica la dirección y
  d0:	88 0f       	add	r24, r24
	address |= 0x01; //habilita para reconocer las llamadas generales de I2C
  d2:	81 60       	ori	r24, 0x01	; 1
	TWAR = address;
  d4:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
  d8:	85 e4       	ldi	r24, 0x45	; 69
  da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  de:	08 95       	ret

000000e0 <setup>:
/////////////////////////////////////////////

void setup(void);
void setup(void){
	
	cli();  //Apagar interrupciones
  e0:	f8 94       	cli
	DDRC =0;  //Puerto C como entrada
  e2:	17 b8       	out	0x07, r1	; 7
	initADC(); //Iniciar ADC
  e4:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	
	I2C_Config_SLAVE(0x02);
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 65 00 	call	0xca	; 0xca <I2C_Config_SLAVE>
	sei(); //Activar interrupciones
  ee:	78 94       	sei
  f0:	08 95       	ret

000000f2 <main>:
/////////////////////////////////////////////
//Codigo Principal
/////////////////////////////////////////////
int main(void)
{
    setup();
  f2:	0e 94 70 00 	call	0xe0	; 0xe0 <setup>
	
    while (1) 
    {
		ADCSRA |=(1<<ADSC);  //Leer ADC
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	89 ef       	ldi	r24, 0xF9	; 249
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x14>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x1e>
 110:	00 00       	nop
 112:	f1 cf       	rjmp	.-30     	; 0xf6 <main+0x4>

00000114 <__vector_21>:
}

/////////////////////////////////////////////
//Vectores de interrupciones
/////////////////////////////////////////////
ISR(ADC_vect){
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
	datoADC = ADCH;   //Lectura de potenciómetro
 124:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	ADCSRA |= (1<<ADIF); //Se borra la bandera de interrupción
 12c:	ea e7       	ldi	r30, 0x7A	; 122
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 61       	ori	r24, 0x10	; 16
 134:	80 83       	st	Z, r24
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <__vector_24>:

ISR(TWI_vect){           //Vector de interrupci?n de I2C
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	uint8_t estado;
	
	estado = TWSR & 0xFC;  //Lee el estado de la interfaz
 156:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 15a:	8c 7f       	andi	r24, 0xFC	; 252
	
	switch(estado){
 15c:	80 39       	cpi	r24, 0x90	; 144
 15e:	c9 f0       	breq	.+50     	; 0x192 <__vector_24+0x4c>
 160:	38 f4       	brcc	.+14     	; 0x170 <__vector_24+0x2a>
 162:	80 37       	cpi	r24, 0x70	; 112
 164:	81 f0       	breq	.+32     	; 0x186 <__vector_24+0x40>
 166:	80 38       	cpi	r24, 0x80	; 128
 168:	a1 f0       	breq	.+40     	; 0x192 <__vector_24+0x4c>
 16a:	80 36       	cpi	r24, 0x60	; 96
 16c:	59 f5       	brne	.+86     	; 0x1c4 <__vector_24+0x7e>
 16e:	0b c0       	rjmp	.+22     	; 0x186 <__vector_24+0x40>
 170:	88 3b       	cpi	r24, 0xB8	; 184
 172:	c9 f0       	breq	.+50     	; 0x1a6 <__vector_24+0x60>
 174:	18 f4       	brcc	.+6      	; 0x17c <__vector_24+0x36>
 176:	88 3a       	cpi	r24, 0xA8	; 168
 178:	b1 f0       	breq	.+44     	; 0x1a6 <__vector_24+0x60>
 17a:	24 c0       	rjmp	.+72     	; 0x1c4 <__vector_24+0x7e>
 17c:	80 3c       	cpi	r24, 0xC0	; 192
 17e:	e1 f0       	breq	.+56     	; 0x1b8 <__vector_24+0x72>
 180:	88 3c       	cpi	r24, 0xC8	; 200
 182:	d1 f0       	breq	.+52     	; 0x1b8 <__vector_24+0x72>
 184:	1f c0       	rjmp	.+62     	; 0x1c4 <__vector_24+0x7e>
		case 0x60:
		case 0x70:              //Direccionado con su direccion de esclavo
		TWCR |= (1 << TWINT); //
 186:	ec eb       	ldi	r30, 0xBC	; 188
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	80 83       	st	Z, r24
		break;
 190:	1e c0       	rjmp	.+60     	; 0x1ce <__vector_24+0x88>
		
		case 0x80:
		case 0x90:
		dato = TWDR;  //Recibi? el dato, llamada general
 192:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 196:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dato>
		TWCR |= 1 << TWINT; //Borra la bandera TWINT
 19a:	ec eb       	ldi	r30, 0xBC	; 188
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	80 83       	st	Z, r24
		break;
 1a4:	14 c0       	rjmp	.+40     	; 0x1ce <__vector_24+0x88>
		
		case 0xA8: // SLA+R recibido, maestro solicita lectura
		case 0xB8: // Dato transmitido y ACK recibido
		TWDR = datoADC; // Cargar el dato en el registro de datos*****************
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWIE)| (1 << TWEA); // Listo para la pr?xima operaci?n
 1ae:	ec eb       	ldi	r30, 0xBC	; 188
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	85 6c       	ori	r24, 0xC5	; 197
 1b6:	80 83       	st	Z, r24
		
		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // ?ltimo dato transmitido y ACK recibido
		TWCR |= (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Listo para la pr?xima operaci?n
 1b8:	ec eb       	ldi	r30, 0xBC	; 188
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	84 6c       	ori	r24, 0xC4	; 196
 1c0:	80 83       	st	Z, r24
		break;
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <__vector_24+0x88>
		
		default:    //Libera el BUS de cualquier errror
		TWCR |= (1 << TWINT) | (1 << TWSTO);
 1c4:	ec eb       	ldi	r30, 0xBC	; 188
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 69       	ori	r24, 0x90	; 144
 1cc:	80 83       	st	Z, r24
		
	}
	
}
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
