
Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000474  00000508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000474  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  00000514  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000105c  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b4  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000955  00000000  00000000  00002074  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  000029cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fd  00000000  00000000  00002b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000708  00000000  00000000  00003065  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000376d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <main>
  9e:	0c 94 38 02 	jmp	0x470	; 0x470 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Config_MASTER>:
	
	I2C_EscByte(dato);   //Envia el dato al esclavo
	I2C_STOP();  //No continua, termina la comunicación y la cierra
	
	
}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	9a 01       	movw	r18, r20
  ac:	ab 01       	movw	r20, r22
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	8f 7c       	andi	r24, 0xCF	; 207
  b2:	87 b9       	out	0x07, r24	; 7
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	74 e2       	ldi	r23, 0x24	; 36
  b8:	84 ef       	ldi	r24, 0xF4	; 244
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 16 02 	call	0x42c	; 0x42c <__udivmodsi4>
  c0:	ca 01       	movw	r24, r20
  c2:	b9 01       	movw	r22, r18
  c4:	60 51       	subi	r22, 0x10	; 16
  c6:	71 09       	sbc	r23, r1
  c8:	81 09       	sbc	r24, r1
  ca:	91 09       	sbc	r25, r1
  cc:	2c 2f       	mov	r18, r28
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	03 2e       	mov	r0, r19
  d6:	00 0c       	add	r0, r0
  d8:	44 0b       	sbc	r20, r20
  da:	55 0b       	sbc	r21, r21
  dc:	0e 94 16 02 	call	0x42c	; 0x42c <__udivmodsi4>
  e0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  e4:	c4 30       	cpi	r28, 0x04	; 4
  e6:	79 f0       	breq	.+30     	; 0x106 <I2C_Config_MASTER+0x60>
  e8:	18 f4       	brcc	.+6      	; 0xf0 <I2C_Config_MASTER+0x4a>
  ea:	c1 30       	cpi	r28, 0x01	; 1
  ec:	31 f0       	breq	.+12     	; 0xfa <I2C_Config_MASTER+0x54>
  ee:	23 c0       	rjmp	.+70     	; 0x136 <I2C_Config_MASTER+0x90>
  f0:	c0 31       	cpi	r28, 0x10	; 16
  f2:	91 f0       	breq	.+36     	; 0x118 <I2C_Config_MASTER+0x72>
  f4:	c0 34       	cpi	r28, 0x40	; 64
  f6:	c9 f0       	breq	.+50     	; 0x12a <I2C_Config_MASTER+0x84>
  f8:	1e c0       	rjmp	.+60     	; 0x136 <I2C_Config_MASTER+0x90>
  fa:	e9 eb       	ldi	r30, 0xB9	; 185
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8c 7f       	andi	r24, 0xFC	; 252
 102:	80 83       	st	Z, r24
 104:	1d c0       	rjmp	.+58     	; 0x140 <I2C_Config_MASTER+0x9a>
 106:	e9 eb       	ldi	r30, 0xB9	; 185
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	80 83       	st	Z, r24
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
 116:	14 c0       	rjmp	.+40     	; 0x140 <I2C_Config_MASTER+0x9a>
 118:	e9 eb       	ldi	r30, 0xB9	; 185
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	80 83       	st	Z, r24
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
 128:	0b c0       	rjmp	.+22     	; 0x140 <I2C_Config_MASTER+0x9a>
 12a:	e9 eb       	ldi	r30, 0xB9	; 185
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8d 6f       	ori	r24, 0xFD	; 253
 132:	80 83       	st	Z, r24
 134:	05 c0       	rjmp	.+10     	; 0x140 <I2C_Config_MASTER+0x9a>
 136:	e9 eb       	ldi	r30, 0xB9	; 185
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8c 7f       	andi	r24, 0xFC	; 252
 13e:	80 83       	st	Z, r24
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <I2C_STOP>:
 14a:	84 e9       	ldi	r24, 0x94	; 148
 14c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 150:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 154:	84 fd       	sbrc	r24, 4
 156:	fc cf       	rjmp	.-8      	; 0x150 <I2C_STOP+0x6>
 158:	08 95       	ret

0000015a <I2C_leer_dato>:




// Lee un byte de datos del esclavo I2C
uint8_t I2C_leer_dato(uint8_t direccion_esclavo, uint8_t *dato) {
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 15e:	94 ea       	ldi	r25, 0xA4	; 164
 160:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 164:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 168:	99 23       	and	r25, r25
 16a:	e4 f7       	brge	.-8      	; 0x164 <I2C_leer_dato+0xa>

	// Verificar condición de START
	if ((TWSR & 0xF8) != TW_START) {
 16c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 170:	98 7f       	andi	r25, 0xF8	; 248
 172:	98 30       	cpi	r25, 0x08	; 8
 174:	b1 f5       	brne	.+108    	; 0x1e2 <I2C_leer_dato+0x88>
		return 1; // Error: No se pudo iniciar la condición de START
	}

	// Enviar dirección del esclavo con bit de lectura
	TWDR = SLA_R(direccion_esclavo);
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 182:	84 e8       	ldi	r24, 0x84	; 132
 184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la transmisión de la dirección
 188:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 18c:	88 23       	and	r24, r24
 18e:	e4 f7       	brge	.-8      	; 0x188 <I2C_leer_dato+0x2e>
 190:	eb 01       	movw	r28, r22

	// Verificar ACK/NACK de la dirección
	uint8_t twsr_value = TWSR & 0xF8;
 192:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 196:	88 7f       	andi	r24, 0xF8	; 248
	if (twsr_value == TW_MR_SLA_NACK) {
 198:	88 34       	cpi	r24, 0x48	; 72
 19a:	21 f4       	brne	.+8      	; 0x1a4 <I2C_leer_dato+0x4a>
		I2C_STOP(); // Detener si se recibe un NACK
 19c:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_STOP>
		return 1; // Error: NACK recibido
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	20 c0       	rjmp	.+64     	; 0x1e4 <I2C_leer_dato+0x8a>
		} else if (twsr_value != TW_MR_SLA_ACK) {
 1a4:	80 34       	cpi	r24, 0x40	; 64
 1a6:	21 f0       	breq	.+8      	; 0x1b0 <I2C_leer_dato+0x56>
		I2C_STOP(); // Detener si otro estado inesperado
 1a8:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_STOP>
		return 1; // Error: Estado inesperado
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	1a c0       	rjmp	.+52     	; 0x1e4 <I2C_leer_dato+0x8a>
	}

	// Leer un byte del esclavo
	TWCR = (1 << TWEN) | (1 << TWINT); // Leer sin ACK (NACK)
 1b0:	84 e8       	ldi	r24, 0x84	; 132
 1b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la recepción
 1b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ba:	88 23       	and	r24, r24
 1bc:	e4 f7       	brge	.-8      	; 0x1b6 <I2C_leer_dato+0x5c>

	// Verificar estado de recepción
	twsr_value = TWSR & 0xF8;
 1be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1c2:	88 7f       	andi	r24, 0xF8	; 248
	if (twsr_value != TW_MR_DATA_NACK && twsr_value != TW_MR_DATA_ACK) {
 1c4:	88 35       	cpi	r24, 0x58	; 88
 1c6:	31 f0       	breq	.+12     	; 0x1d4 <I2C_leer_dato+0x7a>
 1c8:	80 35       	cpi	r24, 0x50	; 80
 1ca:	21 f0       	breq	.+8      	; 0x1d4 <I2C_leer_dato+0x7a>
		I2C_STOP(); // Detener si hay error en la recepción
 1cc:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_STOP>
		return 1; // Error en la recepción
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <I2C_leer_dato+0x8a>
	}

	// Leer el dato recibido
	*dato = TWDR;
 1d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1d8:	88 83       	st	Y, r24

	// Generar condición de STOP
      I2C_STOP();
 1da:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_STOP>

	return  *dato; // Éxito
 1de:	88 81       	ld	r24, Y
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <I2C_leer_dato+0x8a>
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete

	// Verificar condición de START
	if ((TWSR & 0xF8) != TW_START) {
		return 1; // Error: No se pudo iniciar la condición de START
 1e2:	81 e0       	ldi	r24, 0x01	; 1

	// Generar condición de STOP
      I2C_STOP();

	return  *dato; // Éxito
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <dato_a_mostrar>:
}


void dato_a_mostrar(char a)
{
	if(a & 1)				//0000 0001, el  a&1 es una operación bitwise, si el primer bit menos signfiativo es 1, la condición es verdadera
 1ea:	80 ff       	sbrs	r24, 0
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <dato_a_mostrar+0xc>
	PORTD |= (1<<0);
 1ee:	9b b1       	in	r25, 0x0b	; 11
 1f0:	91 60       	ori	r25, 0x01	; 1
 1f2:	9b b9       	out	0x0b, r25	; 11
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <dato_a_mostrar+0x12>
	else
	PORTD &= ~(1<<0);
 1f6:	9b b1       	in	r25, 0x0b	; 11
 1f8:	9e 7f       	andi	r25, 0xFE	; 254
 1fa:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 2)			   //0000 0010, ahora verifica el segundo bit menos significativo, y si es 1, la condición es verdadera
 1fc:	81 ff       	sbrs	r24, 1
 1fe:	04 c0       	rjmp	.+8      	; 0x208 <dato_a_mostrar+0x1e>
	PORTD |= (1<<1);
 200:	9b b1       	in	r25, 0x0b	; 11
 202:	92 60       	ori	r25, 0x02	; 2
 204:	9b b9       	out	0x0b, r25	; 11
 206:	03 c0       	rjmp	.+6      	; 0x20e <dato_a_mostrar+0x24>
	else
	PORTD &= ~(1<<1);
 208:	9b b1       	in	r25, 0x0b	; 11
 20a:	9d 7f       	andi	r25, 0xFD	; 253
 20c:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 4)				//0000 0100
 20e:	82 ff       	sbrs	r24, 2
 210:	04 c0       	rjmp	.+8      	; 0x21a <dato_a_mostrar+0x30>
	PORTD |= (1<<PORTD2);
 212:	9b b1       	in	r25, 0x0b	; 11
 214:	94 60       	ori	r25, 0x04	; 4
 216:	9b b9       	out	0x0b, r25	; 11
 218:	03 c0       	rjmp	.+6      	; 0x220 <dato_a_mostrar+0x36>
	else
	PORTD &= ~(1<<PORTD2);
 21a:	9b b1       	in	r25, 0x0b	; 11
 21c:	9b 7f       	andi	r25, 0xFB	; 251
 21e:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 8)				//0000 1000
 220:	83 ff       	sbrs	r24, 3
 222:	04 c0       	rjmp	.+8      	; 0x22c <dato_a_mostrar+0x42>
	PORTD |= (1<<PORTD3);
 224:	9b b1       	in	r25, 0x0b	; 11
 226:	98 60       	ori	r25, 0x08	; 8
 228:	9b b9       	out	0x0b, r25	; 11
 22a:	03 c0       	rjmp	.+6      	; 0x232 <dato_a_mostrar+0x48>
	else
	PORTD &= ~(1<<PORTD3);
 22c:	9b b1       	in	r25, 0x0b	; 11
 22e:	97 7f       	andi	r25, 0xF7	; 247
 230:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 16)			    //0001 0000
 232:	84 ff       	sbrs	r24, 4
 234:	04 c0       	rjmp	.+8      	; 0x23e <dato_a_mostrar+0x54>
	PORTD |= (1<<PORTD4);
 236:	9b b1       	in	r25, 0x0b	; 11
 238:	90 61       	ori	r25, 0x10	; 16
 23a:	9b b9       	out	0x0b, r25	; 11
 23c:	03 c0       	rjmp	.+6      	; 0x244 <dato_a_mostrar+0x5a>
	else
	PORTD &= ~(1<<PORTD4);
 23e:	9b b1       	in	r25, 0x0b	; 11
 240:	9f 7e       	andi	r25, 0xEF	; 239
 242:	9b b9       	out	0x0b, r25	; 11

	if(a & 32)			    //0010 0000
 244:	85 ff       	sbrs	r24, 5
 246:	04 c0       	rjmp	.+8      	; 0x250 <dato_a_mostrar+0x66>
	PORTD |= (1<<PORTD5);
 248:	9b b1       	in	r25, 0x0b	; 11
 24a:	90 62       	ori	r25, 0x20	; 32
 24c:	9b b9       	out	0x0b, r25	; 11
 24e:	03 c0       	rjmp	.+6      	; 0x256 <dato_a_mostrar+0x6c>
	else
	PORTD &= ~(1<<PORTD5);
 250:	9b b1       	in	r25, 0x0b	; 11
 252:	9f 7d       	andi	r25, 0xDF	; 223
 254:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 64)			   //0100 0000
 256:	86 ff       	sbrs	r24, 6
 258:	04 c0       	rjmp	.+8      	; 0x262 <dato_a_mostrar+0x78>
	PORTD |= (1<<PORTD6);
 25a:	9b b1       	in	r25, 0x0b	; 11
 25c:	90 64       	ori	r25, 0x40	; 64
 25e:	9b b9       	out	0x0b, r25	; 11
 260:	03 c0       	rjmp	.+6      	; 0x268 <dato_a_mostrar+0x7e>
	else
	PORTD &= ~(1<<PORTD6);
 262:	9b b1       	in	r25, 0x0b	; 11
 264:	9f 7b       	andi	r25, 0xBF	; 191
 266:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 128)			   //1000 0000
 268:	88 23       	and	r24, r24
 26a:	24 f4       	brge	.+8      	; 0x274 <dato_a_mostrar+0x8a>
	PORTD |= (1<<PORTD7);
 26c:	8b b1       	in	r24, 0x0b	; 11
 26e:	80 68       	ori	r24, 0x80	; 128
 270:	8b b9       	out	0x0b, r24	; 11
 272:	08 95       	ret
	else
	PORTD &= ~(1<<PORTD7);
 274:	8b b1       	in	r24, 0x0b	; 11
 276:	8f 77       	andi	r24, 0x7F	; 127
 278:	8b b9       	out	0x0b, r24	; 11
 27a:	08 95       	ret

0000027c <inicio>:
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
}

void inicio(char a)
{
	PORTB &= ~(1<<PORTB0);  //RS = 0, se le indica que es modo comando
 27c:	95 b1       	in	r25, 0x05	; 5
 27e:	9e 7f       	andi	r25, 0xFE	; 254
 280:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(a);
 282:	0e 94 f5 00 	call	0x1ea	; 0x1ea <dato_a_mostrar>
	PORTB |= (1<<PORTB1);    // E = 1, se le indica que envie los datos
 286:	85 b1       	in	r24, 0x05	; 5
 288:	82 60       	ori	r24, 0x02	; 2
 28a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28c:	8f e9       	ldi	r24, 0x9F	; 159
 28e:	9f e0       	ldi	r25, 0x0F	; 15
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <inicio+0x14>
 294:	00 c0       	rjmp	.+0      	; 0x296 <inicio+0x1a>
 296:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);   // E = 0,  se le indica que se cierra el envio de datos
 298:	85 b1       	in	r24, 0x05	; 5
 29a:	8d 7f       	andi	r24, 0xFD	; 253
 29c:	85 b9       	out	0x05, r24	; 5
 29e:	8f e9       	ldi	r24, 0x9F	; 159
 2a0:	9f e0       	ldi	r25, 0x0F	; 15
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <inicio+0x26>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <inicio+0x2c>
 2a8:	00 00       	nop
 2aa:	08 95       	ret

000002ac <Lcd_Init8bits>:
#include "LCD.h"

void Lcd_Init8bits()
{
	PORTB &= ~(1<<PORTB0);   //RS = 0, se le indica que es modo comando
 2ac:	85 b1       	in	r24, 0x05	; 5
 2ae:	8e 7f       	andi	r24, 0xFE	; 254
 2b0:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB1);   //E = 0
 2b2:	85 b1       	in	r24, 0x05	; 5
 2b4:	8d 7f       	andi	r24, 0xFD	; 253
 2b6:	85 b9       	out	0x05, r24	; 5
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
 2ba:	89 ef       	ldi	r24, 0xF9	; 249
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <Lcd_Init8bits+0x12>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <Lcd_Init8bits+0x1c>
 2c8:	00 00       	nop
	_delay_ms(20);     //Pequeños delay que indica el fabricante del LCD
	inicio(0x30);     //Comando que se repite 3 veces, que indica el fabricante de la LCD
 2ca:	80 e3       	ldi	r24, 0x30	; 48
 2cc:	0e 94 3e 01 	call	0x27c	; 0x27c <inicio>
 2d0:	8f e1       	ldi	r24, 0x1F	; 31
 2d2:	9e e4       	ldi	r25, 0x4E	; 78
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <Lcd_Init8bits+0x28>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <Lcd_Init8bits+0x2e>
 2da:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 2dc:	80 e3       	ldi	r24, 0x30	; 48
 2de:	0e 94 3e 01 	call	0x27c	; 0x27c <inicio>
 2e2:	8f e1       	ldi	r24, 0x1F	; 31
 2e4:	9e e4       	ldi	r25, 0x4E	; 78
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <Lcd_Init8bits+0x3a>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <Lcd_Init8bits+0x40>
 2ec:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 2ee:	80 e3       	ldi	r24, 0x30	; 48
 2f0:	0e 94 3e 01 	call	0x27c	; 0x27c <inicio>
 2f4:	8f e3       	ldi	r24, 0x3F	; 63
 2f6:	9c e9       	ldi	r25, 0x9C	; 156
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <Lcd_Init8bits+0x4c>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <Lcd_Init8bits+0x52>
 2fe:	00 00       	nop
	_delay_ms(10);

	inicio(0x38);  //Comando que indica el fabricante del LCD, usando la matriz de 5X8
 300:	88 e3       	ldi	r24, 0x38	; 56
 302:	0e 94 3e 01 	call	0x27c	; 0x27c <inicio>
	inicio(0x0C);  //Comando que indica el fabricante del LCD, display encendido
 306:	8c e0       	ldi	r24, 0x0C	; 12
 308:	0e 94 3e 01 	call	0x27c	; 0x27c <inicio>
	inicio(0x01);  //Comando que indica el fabricante del LCD, Limpiar LCD
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 3e 01 	call	0x27c	; 0x27c <inicio>
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
 312:	86 e0       	ldi	r24, 0x06	; 6
 314:	0e 94 3e 01 	call	0x27c	; 0x27c <inicio>
 318:	08 95       	ret

0000031a <Lcd_Clear>:



void Lcd_Clear()    //Limpia la pantalla LCD
{
	inicio(1);  //Comando dado por el fabricante de la LCD
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0e 94 3e 01 	call	0x27c	; 0x27c <inicio>
 320:	08 95       	ret

00000322 <Lcd_Set_Cursor>:



void Lcd_Set_Cursor(char a, char b)
{
	if(a == 0)
 322:	81 11       	cpse	r24, r1
 324:	05 c0       	rjmp	.+10     	; 0x330 <Lcd_Set_Cursor+0xe>
	inicio(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna
 326:	80 e8       	ldi	r24, 0x80	; 128
 328:	86 0f       	add	r24, r22
 32a:	0e 94 3e 01 	call	0x27c	; 0x27c <inicio>
 32e:	08 95       	ret
	
	else if(a == 1)
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	21 f4       	brne	.+8      	; 0x33c <Lcd_Set_Cursor+0x1a>
	inicio(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
 334:	80 ec       	ldi	r24, 0xC0	; 192
 336:	86 0f       	add	r24, r22
 338:	0e 94 3e 01 	call	0x27c	; 0x27c <inicio>
 33c:	08 95       	ret

0000033e <Lcd_Write_Char>:
}


void Lcd_Write_Char(char data)
{
	PORTB |= (1<<PORTB0);        // RS = 1, se le indica que esta en modo caracter
 33e:	95 b1       	in	r25, 0x05	; 5
 340:	91 60       	ori	r25, 0x01	; 1
 342:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(data);             //Escribir el caracter
 344:	0e 94 f5 00 	call	0x1ea	; 0x1ea <dato_a_mostrar>
	PORTB |= (1<<PORTB1);       // E = 1, enviar el dato
 348:	85 b1       	in	r24, 0x05	; 5
 34a:	82 60       	ori	r24, 0x02	; 2
 34c:	85 b9       	out	0x05, r24	; 5
 34e:	8f e9       	ldi	r24, 0x9F	; 159
 350:	9f e0       	ldi	r25, 0x0F	; 15
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <Lcd_Write_Char+0x14>
 356:	00 c0       	rjmp	.+0      	; 0x358 <Lcd_Write_Char+0x1a>
 358:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);    // E = 0
 35a:	85 b1       	in	r24, 0x05	; 5
 35c:	8d 7f       	andi	r24, 0xFD	; 253
 35e:	85 b9       	out	0x05, r24	; 5
 360:	8f e9       	ldi	r24, 0x9F	; 159
 362:	9f e0       	ldi	r25, 0x0F	; 15
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <Lcd_Write_Char+0x26>
 368:	00 c0       	rjmp	.+0      	; 0x36a <Lcd_Write_Char+0x2c>
 36a:	00 00       	nop
 36c:	08 95       	ret

0000036e <Lcd_Write_String>:
	_delay_ms(1);
}


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	8c 01       	movw	r16, r24
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 378:	c0 e0       	ldi	r28, 0x00	; 0
 37a:	d0 e0       	ldi	r29, 0x00	; 0
 37c:	03 c0       	rjmp	.+6      	; 0x384 <Lcd_Write_String+0x16>
	Lcd_Write_Char(a[i]);
 37e:	0e 94 9f 01 	call	0x33e	; 0x33e <Lcd_Write_Char>


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 382:	21 96       	adiw	r28, 0x01	; 1
 384:	f8 01       	movw	r30, r16
 386:	ec 0f       	add	r30, r28
 388:	fd 1f       	adc	r31, r29
 38a:	80 81       	ld	r24, Z
 38c:	81 11       	cpse	r24, r1
 38e:	f7 cf       	rjmp	.-18     	; 0x37e <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);
}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	08 95       	ret

0000039a <setup>:
uint8_t dato_leido; //Variable que almacena el valor en si


void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
 39a:	f8 94       	cli
	DDRD = 0xFF;  //Puerto D como salida
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;  //Puerto B como salida
 3a0:	84 b9       	out	0x04, r24	; 4
	
	
	UCSR0B = 0;  //Usar los pines TX y RX como digitales
 3a2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	Lcd_Init8bits();   //Iniciar pantalla LCD
 3a6:	0e 94 56 01 	call	0x2ac	; 0x2ac <Lcd_Init8bits>
	Lcd_Clear();
 3aa:	0e 94 8d 01 	call	0x31a	; 0x31a <Lcd_Clear>
	
	I2C_Config_MASTER(4, 200);
 3ae:	48 ec       	ldi	r20, 0xC8	; 200
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	84 e0       	ldi	r24, 0x04	; 4
 3b8:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Config_MASTER>
	
	sei(); //Activar interrupciones
 3bc:	78 94       	sei
 3be:	08 95       	ret

000003c0 <main>:
}


int main(void)
{
   setup();
 3c0:	0e 94 cd 01 	call	0x39a	; 0x39a <setup>
 3c4:	2f ef       	ldi	r18, 0xFF	; 255
 3c6:	83 ed       	ldi	r24, 0xD3	; 211
 3c8:	90 e3       	ldi	r25, 0x30	; 48
 3ca:	21 50       	subi	r18, 0x01	; 1
 3cc:	80 40       	sbci	r24, 0x00	; 0
 3ce:	90 40       	sbci	r25, 0x00	; 0
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <main+0xa>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0x14>
 3d4:	00 00       	nop
    while (1) 
    {
		  _delay_ms(1000);
		  Lcd_Set_Cursor(0,3);
 3d6:	63 e0       	ldi	r22, 0x03	; 3
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 91 01 	call	0x322	; 0x322 <Lcd_Set_Cursor>
		  Lcd_Write_String("S1:");
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	0e 94 b7 01 	call	0x36e	; 0x36e <Lcd_Write_String>
		  Lcd_Set_Cursor(0,10);
 3e6:	6a e0       	ldi	r22, 0x0A	; 10
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 91 01 	call	0x322	; 0x322 <Lcd_Set_Cursor>
		  Lcd_Write_String("S2:");
 3ee:	84 e0       	ldi	r24, 0x04	; 4
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	0e 94 b7 01 	call	0x36e	; 0x36e <Lcd_Write_String>
		
		//  I2C_esclavo(1, esclavo1);
		  
		  
		  dato_leido = I2C_leer_dato(esclavo1, &dato1);
 3f6:	6c e0       	ldi	r22, 0x0C	; 12
 3f8:	71 e0       	ldi	r23, 0x01	; 1
 3fa:	83 e0       	ldi	r24, 0x03	; 3
 3fc:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_leer_dato>
 400:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <dato_leido>
		 
		  if (dato_leido == 2) {
 404:	82 30       	cpi	r24, 0x02	; 2
 406:	49 f4       	brne	.+18     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
			   Lcd_Set_Cursor(1,10);
 408:	6a e0       	ldi	r22, 0x0A	; 10
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 91 01 	call	0x322	; 0x322 <Lcd_Set_Cursor>
			   Lcd_Write_String("2");
 410:	88 e0       	ldi	r24, 0x08	; 8
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	0e 94 b7 01 	call	0x36e	; 0x36e <Lcd_Write_String>
 418:	d5 cf       	rjmp	.-86     	; 0x3c4 <main+0x4>
			  } 
			  
		else{
			 Lcd_Set_Cursor(1,10);
 41a:	6a e0       	ldi	r22, 0x0A	; 10
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 91 01 	call	0x322	; 0x322 <Lcd_Set_Cursor>
			 Lcd_Write_String("1");
 422:	8a e0       	ldi	r24, 0x0A	; 10
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	0e 94 b7 01 	call	0x36e	; 0x36e <Lcd_Write_String>
 42a:	cc cf       	rjmp	.-104    	; 0x3c4 <main+0x4>

0000042c <__udivmodsi4>:
 42c:	a1 e2       	ldi	r26, 0x21	; 33
 42e:	1a 2e       	mov	r1, r26
 430:	aa 1b       	sub	r26, r26
 432:	bb 1b       	sub	r27, r27
 434:	fd 01       	movw	r30, r26
 436:	0d c0       	rjmp	.+26     	; 0x452 <__udivmodsi4_ep>

00000438 <__udivmodsi4_loop>:
 438:	aa 1f       	adc	r26, r26
 43a:	bb 1f       	adc	r27, r27
 43c:	ee 1f       	adc	r30, r30
 43e:	ff 1f       	adc	r31, r31
 440:	a2 17       	cp	r26, r18
 442:	b3 07       	cpc	r27, r19
 444:	e4 07       	cpc	r30, r20
 446:	f5 07       	cpc	r31, r21
 448:	20 f0       	brcs	.+8      	; 0x452 <__udivmodsi4_ep>
 44a:	a2 1b       	sub	r26, r18
 44c:	b3 0b       	sbc	r27, r19
 44e:	e4 0b       	sbc	r30, r20
 450:	f5 0b       	sbc	r31, r21

00000452 <__udivmodsi4_ep>:
 452:	66 1f       	adc	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	88 1f       	adc	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	1a 94       	dec	r1
 45c:	69 f7       	brne	.-38     	; 0x438 <__udivmodsi4_loop>
 45e:	60 95       	com	r22
 460:	70 95       	com	r23
 462:	80 95       	com	r24
 464:	90 95       	com	r25
 466:	9b 01       	movw	r18, r22
 468:	ac 01       	movw	r20, r24
 46a:	bd 01       	movw	r22, r26
 46c:	cf 01       	movw	r24, r30
 46e:	08 95       	ret

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
