
Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000ace  00000b62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ace  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800112  00800112  00000b74  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f13  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000995  00000000  00000000  00001bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000932  00000000  00000000  00002590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ff  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076a  00000000  00000000  00003583  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003ced  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <main>
  9e:	0c 94 65 05 	jmp	0xaca	; 0xaca <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Config_MASTER>:
	
	I2C_EscByte(dato);   //Envia el dato al esclavo
	I2C_STOP();  //No continua, termina la comunicación y la cierra
	
	
}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	9a 01       	movw	r18, r20
  ac:	ab 01       	movw	r20, r22
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	8f 7c       	andi	r24, 0xCF	; 207
  b2:	87 b9       	out	0x07, r24	; 7
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	74 e2       	ldi	r23, 0x24	; 36
  b8:	84 ef       	ldi	r24, 0xF4	; 244
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 4b 02 	call	0x496	; 0x496 <__udivmodsi4>
  c0:	ca 01       	movw	r24, r20
  c2:	b9 01       	movw	r22, r18
  c4:	60 51       	subi	r22, 0x10	; 16
  c6:	71 09       	sbc	r23, r1
  c8:	81 09       	sbc	r24, r1
  ca:	91 09       	sbc	r25, r1
  cc:	2c 2f       	mov	r18, r28
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	03 2e       	mov	r0, r19
  d6:	00 0c       	add	r0, r0
  d8:	44 0b       	sbc	r20, r20
  da:	55 0b       	sbc	r21, r21
  dc:	0e 94 4b 02 	call	0x496	; 0x496 <__udivmodsi4>
  e0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  e4:	c4 30       	cpi	r28, 0x04	; 4
  e6:	79 f0       	breq	.+30     	; 0x106 <I2C_Config_MASTER+0x60>
  e8:	18 f4       	brcc	.+6      	; 0xf0 <I2C_Config_MASTER+0x4a>
  ea:	c1 30       	cpi	r28, 0x01	; 1
  ec:	31 f0       	breq	.+12     	; 0xfa <I2C_Config_MASTER+0x54>
  ee:	23 c0       	rjmp	.+70     	; 0x136 <I2C_Config_MASTER+0x90>
  f0:	c0 31       	cpi	r28, 0x10	; 16
  f2:	91 f0       	breq	.+36     	; 0x118 <I2C_Config_MASTER+0x72>
  f4:	c0 34       	cpi	r28, 0x40	; 64
  f6:	c9 f0       	breq	.+50     	; 0x12a <I2C_Config_MASTER+0x84>
  f8:	1e c0       	rjmp	.+60     	; 0x136 <I2C_Config_MASTER+0x90>
  fa:	e9 eb       	ldi	r30, 0xB9	; 185
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8c 7f       	andi	r24, 0xFC	; 252
 102:	80 83       	st	Z, r24
 104:	1d c0       	rjmp	.+58     	; 0x140 <I2C_Config_MASTER+0x9a>
 106:	e9 eb       	ldi	r30, 0xB9	; 185
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	80 83       	st	Z, r24
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
 116:	14 c0       	rjmp	.+40     	; 0x140 <I2C_Config_MASTER+0x9a>
 118:	e9 eb       	ldi	r30, 0xB9	; 185
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	80 83       	st	Z, r24
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
 128:	0b c0       	rjmp	.+22     	; 0x140 <I2C_Config_MASTER+0x9a>
 12a:	e9 eb       	ldi	r30, 0xB9	; 185
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8d 6f       	ori	r24, 0xFD	; 253
 132:	80 83       	st	Z, r24
 134:	05 c0       	rjmp	.+10     	; 0x140 <I2C_Config_MASTER+0x9a>
 136:	e9 eb       	ldi	r30, 0xB9	; 185
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8c 7f       	andi	r24, 0xFC	; 252
 13e:	80 83       	st	Z, r24
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <I2C_STOP>:
 14a:	84 e9       	ldi	r24, 0x94	; 148
 14c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 150:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 154:	84 fd       	sbrc	r24, 4
 156:	fc cf       	rjmp	.-8      	; 0x150 <I2C_STOP+0x6>
 158:	08 95       	ret

0000015a <I2C_leer_dato>:




// Lee un byte de datos del esclavo I2C
int I2C_leer_dato(uint8_t direccion_esclavo, int *dato) {
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 15e:	94 ea       	ldi	r25, 0xA4	; 164
 160:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 164:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 168:	99 23       	and	r25, r25
 16a:	e4 f7       	brge	.-8      	; 0x164 <I2C_leer_dato+0xa>

	// Verificar condición de START
	if ((TWSR & 0xF8) != TW_START) {
 16c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 170:	98 7f       	andi	r25, 0xF8	; 248
 172:	98 30       	cpi	r25, 0x08	; 8
 174:	e1 f5       	brne	.+120    	; 0x1ee <I2C_leer_dato+0x94>
		return 1; // Error: No se pudo iniciar la condición de START
	}

	// Enviar dirección del esclavo con bit de lectura
	TWDR = SLA_R(direccion_esclavo);
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 182:	84 e8       	ldi	r24, 0x84	; 132
 184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la transmisión de la dirección
 188:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 18c:	88 23       	and	r24, r24
 18e:	e4 f7       	brge	.-8      	; 0x188 <I2C_leer_dato+0x2e>
 190:	eb 01       	movw	r28, r22

	// Verificar ACK/NACK de la dirección
	uint8_t twsr_value = TWSR & 0xF8;
 192:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 196:	88 7f       	andi	r24, 0xF8	; 248
	if (twsr_value == TW_MR_SLA_NACK) {
 198:	88 34       	cpi	r24, 0x48	; 72
 19a:	29 f4       	brne	.+10     	; 0x1a6 <I2C_leer_dato+0x4c>
		I2C_STOP(); // Detener si se recibe un NACK
 19c:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_STOP>
		return 1; // Error: NACK recibido
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	26 c0       	rjmp	.+76     	; 0x1f2 <I2C_leer_dato+0x98>
		} else if (twsr_value != TW_MR_SLA_ACK) {
 1a6:	80 34       	cpi	r24, 0x40	; 64
 1a8:	29 f0       	breq	.+10     	; 0x1b4 <I2C_leer_dato+0x5a>
		I2C_STOP(); // Detener si otro estado inesperado
 1aa:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_STOP>
		return 1; // Error: Estado inesperado
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	1f c0       	rjmp	.+62     	; 0x1f2 <I2C_leer_dato+0x98>
	}

	// Leer un byte del esclavo
	TWCR = (1 << TWEN) | (1 << TWINT); // Leer sin ACK (NACK)
 1b4:	84 e8       	ldi	r24, 0x84	; 132
 1b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la recepción
 1ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1be:	88 23       	and	r24, r24
 1c0:	e4 f7       	brge	.-8      	; 0x1ba <I2C_leer_dato+0x60>

	// Verificar estado de recepción
	twsr_value = TWSR & 0xF8;
 1c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1c6:	88 7f       	andi	r24, 0xF8	; 248
	if (twsr_value != TW_MR_DATA_NACK && twsr_value != TW_MR_DATA_ACK) {
 1c8:	88 35       	cpi	r24, 0x58	; 88
 1ca:	39 f0       	breq	.+14     	; 0x1da <I2C_leer_dato+0x80>
 1cc:	80 35       	cpi	r24, 0x50	; 80
 1ce:	29 f0       	breq	.+10     	; 0x1da <I2C_leer_dato+0x80>
		I2C_STOP(); // Detener si hay error en la recepción
 1d0:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_STOP>
		return 1; // Error en la recepción
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0c c0       	rjmp	.+24     	; 0x1f2 <I2C_leer_dato+0x98>
	}

	// Leer el dato recibido
	*dato = TWDR;
 1da:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	99 83       	std	Y+1, r25	; 0x01
 1e2:	88 83       	st	Y, r24

	// Generar condición de STOP
      I2C_STOP();
 1e4:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_STOP>
  
	return  *dato; // Éxito
 1e8:	88 81       	ld	r24, Y
 1ea:	99 81       	ldd	r25, Y+1	; 0x01
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <I2C_leer_dato+0x98>
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete

	// Verificar condición de START
	if ((TWSR & 0xF8) != TW_START) {
		return 1; // Error: No se pudo iniciar la condición de START
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0

	// Generar condición de STOP
      I2C_STOP();
  
	return  *dato; // Éxito
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <dato_a_mostrar>:
}


void dato_a_mostrar(char a)
{
	if(a & 1)				//0000 0001, el  a&1 es una operación bitwise, si el primer bit menos signfiativo es 1, la condición es verdadera
 1f8:	80 ff       	sbrs	r24, 0
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <dato_a_mostrar+0xc>
	PORTD |= (1<<0);
 1fc:	9b b1       	in	r25, 0x0b	; 11
 1fe:	91 60       	ori	r25, 0x01	; 1
 200:	9b b9       	out	0x0b, r25	; 11
 202:	03 c0       	rjmp	.+6      	; 0x20a <dato_a_mostrar+0x12>
	else
	PORTD &= ~(1<<0);
 204:	9b b1       	in	r25, 0x0b	; 11
 206:	9e 7f       	andi	r25, 0xFE	; 254
 208:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 2)			   //0000 0010, ahora verifica el segundo bit menos significativo, y si es 1, la condición es verdadera
 20a:	81 ff       	sbrs	r24, 1
 20c:	04 c0       	rjmp	.+8      	; 0x216 <dato_a_mostrar+0x1e>
	PORTD |= (1<<1);
 20e:	9b b1       	in	r25, 0x0b	; 11
 210:	92 60       	ori	r25, 0x02	; 2
 212:	9b b9       	out	0x0b, r25	; 11
 214:	03 c0       	rjmp	.+6      	; 0x21c <dato_a_mostrar+0x24>
	else
	PORTD &= ~(1<<1);
 216:	9b b1       	in	r25, 0x0b	; 11
 218:	9d 7f       	andi	r25, 0xFD	; 253
 21a:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 4)				//0000 0100
 21c:	82 ff       	sbrs	r24, 2
 21e:	04 c0       	rjmp	.+8      	; 0x228 <dato_a_mostrar+0x30>
	PORTD |= (1<<PORTD2);
 220:	9b b1       	in	r25, 0x0b	; 11
 222:	94 60       	ori	r25, 0x04	; 4
 224:	9b b9       	out	0x0b, r25	; 11
 226:	03 c0       	rjmp	.+6      	; 0x22e <dato_a_mostrar+0x36>
	else
	PORTD &= ~(1<<PORTD2);
 228:	9b b1       	in	r25, 0x0b	; 11
 22a:	9b 7f       	andi	r25, 0xFB	; 251
 22c:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 8)				//0000 1000
 22e:	83 ff       	sbrs	r24, 3
 230:	04 c0       	rjmp	.+8      	; 0x23a <dato_a_mostrar+0x42>
	PORTD |= (1<<PORTD3);
 232:	9b b1       	in	r25, 0x0b	; 11
 234:	98 60       	ori	r25, 0x08	; 8
 236:	9b b9       	out	0x0b, r25	; 11
 238:	03 c0       	rjmp	.+6      	; 0x240 <dato_a_mostrar+0x48>
	else
	PORTD &= ~(1<<PORTD3);
 23a:	9b b1       	in	r25, 0x0b	; 11
 23c:	97 7f       	andi	r25, 0xF7	; 247
 23e:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 16)			    //0001 0000
 240:	84 ff       	sbrs	r24, 4
 242:	04 c0       	rjmp	.+8      	; 0x24c <dato_a_mostrar+0x54>
	PORTD |= (1<<PORTD4);
 244:	9b b1       	in	r25, 0x0b	; 11
 246:	90 61       	ori	r25, 0x10	; 16
 248:	9b b9       	out	0x0b, r25	; 11
 24a:	03 c0       	rjmp	.+6      	; 0x252 <dato_a_mostrar+0x5a>
	else
	PORTD &= ~(1<<PORTD4);
 24c:	9b b1       	in	r25, 0x0b	; 11
 24e:	9f 7e       	andi	r25, 0xEF	; 239
 250:	9b b9       	out	0x0b, r25	; 11

	if(a & 32)			    //0010 0000
 252:	85 ff       	sbrs	r24, 5
 254:	04 c0       	rjmp	.+8      	; 0x25e <dato_a_mostrar+0x66>
	PORTD |= (1<<PORTD5);
 256:	9b b1       	in	r25, 0x0b	; 11
 258:	90 62       	ori	r25, 0x20	; 32
 25a:	9b b9       	out	0x0b, r25	; 11
 25c:	03 c0       	rjmp	.+6      	; 0x264 <dato_a_mostrar+0x6c>
	else
	PORTD &= ~(1<<PORTD5);
 25e:	9b b1       	in	r25, 0x0b	; 11
 260:	9f 7d       	andi	r25, 0xDF	; 223
 262:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 64)			   //0100 0000
 264:	86 ff       	sbrs	r24, 6
 266:	04 c0       	rjmp	.+8      	; 0x270 <dato_a_mostrar+0x78>
	PORTD |= (1<<PORTD6);
 268:	9b b1       	in	r25, 0x0b	; 11
 26a:	90 64       	ori	r25, 0x40	; 64
 26c:	9b b9       	out	0x0b, r25	; 11
 26e:	03 c0       	rjmp	.+6      	; 0x276 <dato_a_mostrar+0x7e>
	else
	PORTD &= ~(1<<PORTD6);
 270:	9b b1       	in	r25, 0x0b	; 11
 272:	9f 7b       	andi	r25, 0xBF	; 191
 274:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 128)			   //1000 0000
 276:	88 23       	and	r24, r24
 278:	24 f4       	brge	.+8      	; 0x282 <dato_a_mostrar+0x8a>
	PORTD |= (1<<PORTD7);
 27a:	8b b1       	in	r24, 0x0b	; 11
 27c:	80 68       	ori	r24, 0x80	; 128
 27e:	8b b9       	out	0x0b, r24	; 11
 280:	08 95       	ret
	else
	PORTD &= ~(1<<PORTD7);
 282:	8b b1       	in	r24, 0x0b	; 11
 284:	8f 77       	andi	r24, 0x7F	; 127
 286:	8b b9       	out	0x0b, r24	; 11
 288:	08 95       	ret

0000028a <inicio>:
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
}

void inicio(char a)
{
	PORTB &= ~(1<<PORTB0);  //RS = 0, se le indica que es modo comando
 28a:	95 b1       	in	r25, 0x05	; 5
 28c:	9e 7f       	andi	r25, 0xFE	; 254
 28e:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(a);
 290:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);    // E = 1, se le indica que envie los datos
 294:	85 b1       	in	r24, 0x05	; 5
 296:	82 60       	ori	r24, 0x02	; 2
 298:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	8f e9       	ldi	r24, 0x9F	; 159
 29c:	9f e0       	ldi	r25, 0x0F	; 15
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <inicio+0x14>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <inicio+0x1a>
 2a4:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);   // E = 0,  se le indica que se cierra el envio de datos
 2a6:	85 b1       	in	r24, 0x05	; 5
 2a8:	8d 7f       	andi	r24, 0xFD	; 253
 2aa:	85 b9       	out	0x05, r24	; 5
 2ac:	8f e9       	ldi	r24, 0x9F	; 159
 2ae:	9f e0       	ldi	r25, 0x0F	; 15
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <inicio+0x26>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <inicio+0x2c>
 2b6:	00 00       	nop
 2b8:	08 95       	ret

000002ba <Lcd_Init8bits>:
#include "LCD.h"

void Lcd_Init8bits()
{
	PORTB &= ~(1<<PORTB0);   //RS = 0, se le indica que es modo comando
 2ba:	85 b1       	in	r24, 0x05	; 5
 2bc:	8e 7f       	andi	r24, 0xFE	; 254
 2be:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB1);   //E = 0
 2c0:	85 b1       	in	r24, 0x05	; 5
 2c2:	8d 7f       	andi	r24, 0xFD	; 253
 2c4:	85 b9       	out	0x05, r24	; 5
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	89 ef       	ldi	r24, 0xF9	; 249
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	90 40       	sbci	r25, 0x00	; 0
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <Lcd_Init8bits+0x12>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <Lcd_Init8bits+0x1c>
 2d6:	00 00       	nop
	_delay_ms(20);     //Pequeños delay que indica el fabricante del LCD
	inicio(0x30);     //Comando que se repite 3 veces, que indica el fabricante de la LCD
 2d8:	80 e3       	ldi	r24, 0x30	; 48
 2da:	0e 94 45 01 	call	0x28a	; 0x28a <inicio>
 2de:	8f e1       	ldi	r24, 0x1F	; 31
 2e0:	9e e4       	ldi	r25, 0x4E	; 78
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <Lcd_Init8bits+0x28>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <Lcd_Init8bits+0x2e>
 2e8:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 2ea:	80 e3       	ldi	r24, 0x30	; 48
 2ec:	0e 94 45 01 	call	0x28a	; 0x28a <inicio>
 2f0:	8f e1       	ldi	r24, 0x1F	; 31
 2f2:	9e e4       	ldi	r25, 0x4E	; 78
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <Lcd_Init8bits+0x3a>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <Lcd_Init8bits+0x40>
 2fa:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 2fc:	80 e3       	ldi	r24, 0x30	; 48
 2fe:	0e 94 45 01 	call	0x28a	; 0x28a <inicio>
 302:	8f e3       	ldi	r24, 0x3F	; 63
 304:	9c e9       	ldi	r25, 0x9C	; 156
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <Lcd_Init8bits+0x4c>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <Lcd_Init8bits+0x52>
 30c:	00 00       	nop
	_delay_ms(10);

	inicio(0x38);  //Comando que indica el fabricante del LCD, usando la matriz de 5X8
 30e:	88 e3       	ldi	r24, 0x38	; 56
 310:	0e 94 45 01 	call	0x28a	; 0x28a <inicio>
	inicio(0x0C);  //Comando que indica el fabricante del LCD, display encendido
 314:	8c e0       	ldi	r24, 0x0C	; 12
 316:	0e 94 45 01 	call	0x28a	; 0x28a <inicio>
	inicio(0x01);  //Comando que indica el fabricante del LCD, Limpiar LCD
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0e 94 45 01 	call	0x28a	; 0x28a <inicio>
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
 320:	86 e0       	ldi	r24, 0x06	; 6
 322:	0e 94 45 01 	call	0x28a	; 0x28a <inicio>
 326:	08 95       	ret

00000328 <Lcd_Clear>:



void Lcd_Clear()    //Limpia la pantalla LCD
{
	inicio(1);  //Comando dado por el fabricante de la LCD
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 45 01 	call	0x28a	; 0x28a <inicio>
 32e:	08 95       	ret

00000330 <Lcd_Set_Cursor>:



void Lcd_Set_Cursor(char a, char b)
{
	if(a == 0)
 330:	81 11       	cpse	r24, r1
 332:	05 c0       	rjmp	.+10     	; 0x33e <Lcd_Set_Cursor+0xe>
	inicio(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna
 334:	80 e8       	ldi	r24, 0x80	; 128
 336:	86 0f       	add	r24, r22
 338:	0e 94 45 01 	call	0x28a	; 0x28a <inicio>
 33c:	08 95       	ret
	
	else if(a == 1)
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	21 f4       	brne	.+8      	; 0x34a <Lcd_Set_Cursor+0x1a>
	inicio(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
 342:	80 ec       	ldi	r24, 0xC0	; 192
 344:	86 0f       	add	r24, r22
 346:	0e 94 45 01 	call	0x28a	; 0x28a <inicio>
 34a:	08 95       	ret

0000034c <Lcd_Write_Char>:
}


void Lcd_Write_Char(char data)
{
	PORTB |= (1<<PORTB0);        // RS = 1, se le indica que esta en modo caracter
 34c:	95 b1       	in	r25, 0x05	; 5
 34e:	91 60       	ori	r25, 0x01	; 1
 350:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(data);             //Escribir el caracter
 352:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);       // E = 1, enviar el dato
 356:	85 b1       	in	r24, 0x05	; 5
 358:	82 60       	ori	r24, 0x02	; 2
 35a:	85 b9       	out	0x05, r24	; 5
 35c:	8f e9       	ldi	r24, 0x9F	; 159
 35e:	9f e0       	ldi	r25, 0x0F	; 15
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <Lcd_Write_Char+0x14>
 364:	00 c0       	rjmp	.+0      	; 0x366 <Lcd_Write_Char+0x1a>
 366:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);    // E = 0
 368:	85 b1       	in	r24, 0x05	; 5
 36a:	8d 7f       	andi	r24, 0xFD	; 253
 36c:	85 b9       	out	0x05, r24	; 5
 36e:	8f e9       	ldi	r24, 0x9F	; 159
 370:	9f e0       	ldi	r25, 0x0F	; 15
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <Lcd_Write_Char+0x26>
 376:	00 c0       	rjmp	.+0      	; 0x378 <Lcd_Write_Char+0x2c>
 378:	00 00       	nop
 37a:	08 95       	ret

0000037c <Lcd_Write_String>:
	_delay_ms(1);
}


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	8c 01       	movw	r16, r24
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 386:	c0 e0       	ldi	r28, 0x00	; 0
 388:	d0 e0       	ldi	r29, 0x00	; 0
 38a:	03 c0       	rjmp	.+6      	; 0x392 <Lcd_Write_String+0x16>
	Lcd_Write_Char(a[i]);
 38c:	0e 94 a6 01 	call	0x34c	; 0x34c <Lcd_Write_Char>


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 390:	21 96       	adiw	r28, 0x01	; 1
 392:	f8 01       	movw	r30, r16
 394:	ec 0f       	add	r30, r28
 396:	fd 1f       	adc	r31, r29
 398:	80 81       	ld	r24, Z
 39a:	81 11       	cpse	r24, r1
 39c:	f7 cf       	rjmp	.-18     	; 0x38c <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);
}
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	08 95       	ret

000003a8 <setup>:
int dato1;
int dato2;  // Variables para almacenar los datos que envían los esclavos
char buffer[16];  // Buffer para las cadenas de caracteres a mostrar en el LCD

void setup(void) {
    cli();  // Apagar interrupciones
 3a8:	f8 94       	cli
    DDRD = 0xFF;  // Puerto D como salida
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0xFF;  // Puerto B como salida
 3ae:	84 b9       	out	0x04, r24	; 4
    
    UCSR0B = 0;  // Usar los pines TX y RX como digitales
 3b0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    
    Lcd_Init8bits();  // Iniciar pantalla LCD
 3b4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Lcd_Init8bits>
    Lcd_Clear();
 3b8:	0e 94 94 01 	call	0x328	; 0x328 <Lcd_Clear>
    
    I2C_Config_MASTER(4, 200000);  // Configurar I2C como maestro, 4 de división de prescaler, a 200kHz de comunicación
 3bc:	40 e4       	ldi	r20, 0x40	; 64
 3be:	5d e0       	ldi	r21, 0x0D	; 13
 3c0:	63 e0       	ldi	r22, 0x03	; 3
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	84 e0       	ldi	r24, 0x04	; 4
 3c6:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Config_MASTER>
    
    sei();  // Activar interrupciones
 3ca:	78 94       	sei
 3cc:	08 95       	ret

000003ce <main>:
}

int main(void) {
    setup();
 3ce:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <setup>
 3d2:	8f e3       	ldi	r24, 0x3F	; 63
 3d4:	9c e9       	ldi	r25, 0x9C	; 156
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <main+0x8>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <main+0xe>
 3dc:	00 00       	nop
    while (1) {
        _delay_ms(10);   //Pequeño retardo 
        
        Lcd_Set_Cursor(0, 3);     //Mostrar el menú en la LCD
 3de:	63 e0       	ldi	r22, 0x03	; 3
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 98 01 	call	0x330	; 0x330 <Lcd_Set_Cursor>
        Lcd_Write_String("S1:");
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 be 01 	call	0x37c	; 0x37c <Lcd_Write_String>
        Lcd_Set_Cursor(0, 10);
 3ee:	6a e0       	ldi	r22, 0x0A	; 10
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 98 01 	call	0x330	; 0x330 <Lcd_Set_Cursor>
        Lcd_Write_String("S2:");
 3f6:	84 e0       	ldi	r24, 0x04	; 4
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 be 01 	call	0x37c	; 0x37c <Lcd_Write_String>
        
        dato1 = I2C_leer_dato(ESCLAVO1, &dato1);   //Leer el dato del esclavo 1
 3fe:	62 e1       	ldi	r22, 0x12	; 18
 400:	71 e0       	ldi	r23, 0x01	; 1
 402:	83 e0       	ldi	r24, 0x03	; 3
 404:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_leer_dato>
 408:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 40c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
        dato2 = I2C_leer_dato(ESCLAVO2, &dato2);    //Leer el dato del esclavo 2
 410:	64 e1       	ldi	r22, 0x14	; 20
 412:	71 e0       	ldi	r23, 0x01	; 1
 414:	82 e0       	ldi	r24, 0x02	; 2
 416:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_leer_dato>
 41a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <dato2+0x1>
 41e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <dato2>
        
        Lcd_Set_Cursor(1, 3);
 422:	63 e0       	ldi	r22, 0x03	; 3
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 98 01 	call	0x330	; 0x330 <Lcd_Set_Cursor>
        snprintf(buffer, sizeof(buffer), "%03d", dato2);    //Convertir el dato numérico a char para mostrar en la LCD
 42a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <dato2+0x1>
 42e:	8f 93       	push	r24
 430:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <dato2>
 434:	8f 93       	push	r24
 436:	88 e0       	ldi	r24, 0x08	; 8
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	9f 93       	push	r25
 43c:	8f 93       	push	r24
 43e:	1f 92       	push	r1
 440:	10 e1       	ldi	r17, 0x10	; 16
 442:	1f 93       	push	r17
 444:	c6 e1       	ldi	r28, 0x16	; 22
 446:	d1 e0       	ldi	r29, 0x01	; 1
 448:	df 93       	push	r29
 44a:	cf 93       	push	r28
 44c:	0e 94 6d 02 	call	0x4da	; 0x4da <snprintf>
	
		
        Lcd_Write_String(buffer);
 450:	ce 01       	movw	r24, r28
 452:	0e 94 be 01 	call	0x37c	; 0x37c <Lcd_Write_String>
        
        Lcd_Set_Cursor(1, 10);
 456:	6a e0       	ldi	r22, 0x0A	; 10
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 98 01 	call	0x330	; 0x330 <Lcd_Set_Cursor>
        snprintf(buffer, sizeof(buffer), "%02d", dato1);  //Convertir el dato numérico a char para mostrar en la LCD
 45e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <__data_end+0x1>
 462:	8f 93       	push	r24
 464:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 468:	8f 93       	push	r24
 46a:	8d e0       	ldi	r24, 0x0D	; 13
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	9f 93       	push	r25
 470:	8f 93       	push	r24
 472:	1f 92       	push	r1
 474:	1f 93       	push	r17
 476:	df 93       	push	r29
 478:	cf 93       	push	r28
 47a:	0e 94 6d 02 	call	0x4da	; 0x4da <snprintf>
        Lcd_Write_String(buffer);
 47e:	ce 01       	movw	r24, r28
 480:	0e 94 be 01 	call	0x37c	; 0x37c <Lcd_Write_String>
 484:	8d b7       	in	r24, 0x3d	; 61
 486:	9e b7       	in	r25, 0x3e	; 62
 488:	40 96       	adiw	r24, 0x10	; 16
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	f8 94       	cli
 48e:	9e bf       	out	0x3e, r25	; 62
 490:	0f be       	out	0x3f, r0	; 63
 492:	8d bf       	out	0x3d, r24	; 61
 494:	9e cf       	rjmp	.-196    	; 0x3d2 <main+0x4>

00000496 <__udivmodsi4>:
 496:	a1 e2       	ldi	r26, 0x21	; 33
 498:	1a 2e       	mov	r1, r26
 49a:	aa 1b       	sub	r26, r26
 49c:	bb 1b       	sub	r27, r27
 49e:	fd 01       	movw	r30, r26
 4a0:	0d c0       	rjmp	.+26     	; 0x4bc <__udivmodsi4_ep>

000004a2 <__udivmodsi4_loop>:
 4a2:	aa 1f       	adc	r26, r26
 4a4:	bb 1f       	adc	r27, r27
 4a6:	ee 1f       	adc	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	a2 17       	cp	r26, r18
 4ac:	b3 07       	cpc	r27, r19
 4ae:	e4 07       	cpc	r30, r20
 4b0:	f5 07       	cpc	r31, r21
 4b2:	20 f0       	brcs	.+8      	; 0x4bc <__udivmodsi4_ep>
 4b4:	a2 1b       	sub	r26, r18
 4b6:	b3 0b       	sbc	r27, r19
 4b8:	e4 0b       	sbc	r30, r20
 4ba:	f5 0b       	sbc	r31, r21

000004bc <__udivmodsi4_ep>:
 4bc:	66 1f       	adc	r22, r22
 4be:	77 1f       	adc	r23, r23
 4c0:	88 1f       	adc	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	1a 94       	dec	r1
 4c6:	69 f7       	brne	.-38     	; 0x4a2 <__udivmodsi4_loop>
 4c8:	60 95       	com	r22
 4ca:	70 95       	com	r23
 4cc:	80 95       	com	r24
 4ce:	90 95       	com	r25
 4d0:	9b 01       	movw	r18, r22
 4d2:	ac 01       	movw	r20, r24
 4d4:	bd 01       	movw	r22, r26
 4d6:	cf 01       	movw	r24, r30
 4d8:	08 95       	ret

000004da <snprintf>:
 4da:	ae e0       	ldi	r26, 0x0E	; 14
 4dc:	b0 e0       	ldi	r27, 0x00	; 0
 4de:	e3 e7       	ldi	r30, 0x73	; 115
 4e0:	f2 e0       	ldi	r31, 0x02	; 2
 4e2:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__prologue_saves__+0x1c>
 4e6:	0d 89       	ldd	r16, Y+21	; 0x15
 4e8:	1e 89       	ldd	r17, Y+22	; 0x16
 4ea:	8f 89       	ldd	r24, Y+23	; 0x17
 4ec:	98 8d       	ldd	r25, Y+24	; 0x18
 4ee:	26 e0       	ldi	r18, 0x06	; 6
 4f0:	2c 83       	std	Y+4, r18	; 0x04
 4f2:	1a 83       	std	Y+2, r17	; 0x02
 4f4:	09 83       	std	Y+1, r16	; 0x01
 4f6:	97 ff       	sbrs	r25, 7
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <snprintf+0x24>
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	90 e8       	ldi	r25, 0x80	; 128
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	9e 83       	std	Y+6, r25	; 0x06
 502:	8d 83       	std	Y+5, r24	; 0x05
 504:	ae 01       	movw	r20, r28
 506:	45 5e       	subi	r20, 0xE5	; 229
 508:	5f 4f       	sbci	r21, 0xFF	; 255
 50a:	69 8d       	ldd	r22, Y+25	; 0x19
 50c:	7a 8d       	ldd	r23, Y+26	; 0x1a
 50e:	ce 01       	movw	r24, r28
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	0e 94 9d 02 	call	0x53a	; 0x53a <vfprintf>
 516:	4d 81       	ldd	r20, Y+5	; 0x05
 518:	5e 81       	ldd	r21, Y+6	; 0x06
 51a:	57 fd       	sbrc	r21, 7
 51c:	0a c0       	rjmp	.+20     	; 0x532 <snprintf+0x58>
 51e:	2f 81       	ldd	r18, Y+7	; 0x07
 520:	38 85       	ldd	r19, Y+8	; 0x08
 522:	42 17       	cp	r20, r18
 524:	53 07       	cpc	r21, r19
 526:	0c f4       	brge	.+2      	; 0x52a <snprintf+0x50>
 528:	9a 01       	movw	r18, r20
 52a:	f8 01       	movw	r30, r16
 52c:	e2 0f       	add	r30, r18
 52e:	f3 1f       	adc	r31, r19
 530:	10 82       	st	Z, r1
 532:	2e 96       	adiw	r28, 0x0e	; 14
 534:	e4 e0       	ldi	r30, 0x04	; 4
 536:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__epilogue_restores__+0x1c>

0000053a <vfprintf>:
 53a:	ab e0       	ldi	r26, 0x0B	; 11
 53c:	b0 e0       	ldi	r27, 0x00	; 0
 53e:	e3 ea       	ldi	r30, 0xA3	; 163
 540:	f2 e0       	ldi	r31, 0x02	; 2
 542:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__prologue_saves__>
 546:	6c 01       	movw	r12, r24
 548:	7b 01       	movw	r14, r22
 54a:	8a 01       	movw	r16, r20
 54c:	fc 01       	movw	r30, r24
 54e:	17 82       	std	Z+7, r1	; 0x07
 550:	16 82       	std	Z+6, r1	; 0x06
 552:	83 81       	ldd	r24, Z+3	; 0x03
 554:	81 ff       	sbrs	r24, 1
 556:	cc c1       	rjmp	.+920    	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
 558:	ce 01       	movw	r24, r28
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	3c 01       	movw	r6, r24
 55e:	f6 01       	movw	r30, r12
 560:	93 81       	ldd	r25, Z+3	; 0x03
 562:	f7 01       	movw	r30, r14
 564:	93 fd       	sbrc	r25, 3
 566:	85 91       	lpm	r24, Z+
 568:	93 ff       	sbrs	r25, 3
 56a:	81 91       	ld	r24, Z+
 56c:	7f 01       	movw	r14, r30
 56e:	88 23       	and	r24, r24
 570:	09 f4       	brne	.+2      	; 0x574 <vfprintf+0x3a>
 572:	ba c1       	rjmp	.+884    	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 574:	85 32       	cpi	r24, 0x25	; 37
 576:	39 f4       	brne	.+14     	; 0x586 <vfprintf+0x4c>
 578:	93 fd       	sbrc	r25, 3
 57a:	85 91       	lpm	r24, Z+
 57c:	93 ff       	sbrs	r25, 3
 57e:	81 91       	ld	r24, Z+
 580:	7f 01       	movw	r14, r30
 582:	85 32       	cpi	r24, 0x25	; 37
 584:	29 f4       	brne	.+10     	; 0x590 <vfprintf+0x56>
 586:	b6 01       	movw	r22, r12
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 94 04 	call	0x928	; 0x928 <fputc>
 58e:	e7 cf       	rjmp	.-50     	; 0x55e <vfprintf+0x24>
 590:	91 2c       	mov	r9, r1
 592:	21 2c       	mov	r2, r1
 594:	31 2c       	mov	r3, r1
 596:	ff e1       	ldi	r31, 0x1F	; 31
 598:	f3 15       	cp	r31, r3
 59a:	d8 f0       	brcs	.+54     	; 0x5d2 <vfprintf+0x98>
 59c:	8b 32       	cpi	r24, 0x2B	; 43
 59e:	79 f0       	breq	.+30     	; 0x5be <vfprintf+0x84>
 5a0:	38 f4       	brcc	.+14     	; 0x5b0 <vfprintf+0x76>
 5a2:	80 32       	cpi	r24, 0x20	; 32
 5a4:	79 f0       	breq	.+30     	; 0x5c4 <vfprintf+0x8a>
 5a6:	83 32       	cpi	r24, 0x23	; 35
 5a8:	a1 f4       	brne	.+40     	; 0x5d2 <vfprintf+0x98>
 5aa:	23 2d       	mov	r18, r3
 5ac:	20 61       	ori	r18, 0x10	; 16
 5ae:	1d c0       	rjmp	.+58     	; 0x5ea <vfprintf+0xb0>
 5b0:	8d 32       	cpi	r24, 0x2D	; 45
 5b2:	61 f0       	breq	.+24     	; 0x5cc <vfprintf+0x92>
 5b4:	80 33       	cpi	r24, 0x30	; 48
 5b6:	69 f4       	brne	.+26     	; 0x5d2 <vfprintf+0x98>
 5b8:	23 2d       	mov	r18, r3
 5ba:	21 60       	ori	r18, 0x01	; 1
 5bc:	16 c0       	rjmp	.+44     	; 0x5ea <vfprintf+0xb0>
 5be:	83 2d       	mov	r24, r3
 5c0:	82 60       	ori	r24, 0x02	; 2
 5c2:	38 2e       	mov	r3, r24
 5c4:	e3 2d       	mov	r30, r3
 5c6:	e4 60       	ori	r30, 0x04	; 4
 5c8:	3e 2e       	mov	r3, r30
 5ca:	2a c0       	rjmp	.+84     	; 0x620 <vfprintf+0xe6>
 5cc:	f3 2d       	mov	r31, r3
 5ce:	f8 60       	ori	r31, 0x08	; 8
 5d0:	1d c0       	rjmp	.+58     	; 0x60c <vfprintf+0xd2>
 5d2:	37 fc       	sbrc	r3, 7
 5d4:	2d c0       	rjmp	.+90     	; 0x630 <vfprintf+0xf6>
 5d6:	20 ed       	ldi	r18, 0xD0	; 208
 5d8:	28 0f       	add	r18, r24
 5da:	2a 30       	cpi	r18, 0x0A	; 10
 5dc:	40 f0       	brcs	.+16     	; 0x5ee <vfprintf+0xb4>
 5de:	8e 32       	cpi	r24, 0x2E	; 46
 5e0:	b9 f4       	brne	.+46     	; 0x610 <vfprintf+0xd6>
 5e2:	36 fc       	sbrc	r3, 6
 5e4:	81 c1       	rjmp	.+770    	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 5e6:	23 2d       	mov	r18, r3
 5e8:	20 64       	ori	r18, 0x40	; 64
 5ea:	32 2e       	mov	r3, r18
 5ec:	19 c0       	rjmp	.+50     	; 0x620 <vfprintf+0xe6>
 5ee:	36 fe       	sbrs	r3, 6
 5f0:	06 c0       	rjmp	.+12     	; 0x5fe <vfprintf+0xc4>
 5f2:	8a e0       	ldi	r24, 0x0A	; 10
 5f4:	98 9e       	mul	r9, r24
 5f6:	20 0d       	add	r18, r0
 5f8:	11 24       	eor	r1, r1
 5fa:	92 2e       	mov	r9, r18
 5fc:	11 c0       	rjmp	.+34     	; 0x620 <vfprintf+0xe6>
 5fe:	ea e0       	ldi	r30, 0x0A	; 10
 600:	2e 9e       	mul	r2, r30
 602:	20 0d       	add	r18, r0
 604:	11 24       	eor	r1, r1
 606:	22 2e       	mov	r2, r18
 608:	f3 2d       	mov	r31, r3
 60a:	f0 62       	ori	r31, 0x20	; 32
 60c:	3f 2e       	mov	r3, r31
 60e:	08 c0       	rjmp	.+16     	; 0x620 <vfprintf+0xe6>
 610:	8c 36       	cpi	r24, 0x6C	; 108
 612:	21 f4       	brne	.+8      	; 0x61c <vfprintf+0xe2>
 614:	83 2d       	mov	r24, r3
 616:	80 68       	ori	r24, 0x80	; 128
 618:	38 2e       	mov	r3, r24
 61a:	02 c0       	rjmp	.+4      	; 0x620 <vfprintf+0xe6>
 61c:	88 36       	cpi	r24, 0x68	; 104
 61e:	41 f4       	brne	.+16     	; 0x630 <vfprintf+0xf6>
 620:	f7 01       	movw	r30, r14
 622:	93 fd       	sbrc	r25, 3
 624:	85 91       	lpm	r24, Z+
 626:	93 ff       	sbrs	r25, 3
 628:	81 91       	ld	r24, Z+
 62a:	7f 01       	movw	r14, r30
 62c:	81 11       	cpse	r24, r1
 62e:	b3 cf       	rjmp	.-154    	; 0x596 <vfprintf+0x5c>
 630:	98 2f       	mov	r25, r24
 632:	9f 7d       	andi	r25, 0xDF	; 223
 634:	95 54       	subi	r25, 0x45	; 69
 636:	93 30       	cpi	r25, 0x03	; 3
 638:	28 f4       	brcc	.+10     	; 0x644 <vfprintf+0x10a>
 63a:	0c 5f       	subi	r16, 0xFC	; 252
 63c:	1f 4f       	sbci	r17, 0xFF	; 255
 63e:	9f e3       	ldi	r25, 0x3F	; 63
 640:	99 83       	std	Y+1, r25	; 0x01
 642:	0d c0       	rjmp	.+26     	; 0x65e <vfprintf+0x124>
 644:	83 36       	cpi	r24, 0x63	; 99
 646:	31 f0       	breq	.+12     	; 0x654 <vfprintf+0x11a>
 648:	83 37       	cpi	r24, 0x73	; 115
 64a:	71 f0       	breq	.+28     	; 0x668 <vfprintf+0x12e>
 64c:	83 35       	cpi	r24, 0x53	; 83
 64e:	09 f0       	breq	.+2      	; 0x652 <vfprintf+0x118>
 650:	59 c0       	rjmp	.+178    	; 0x704 <vfprintf+0x1ca>
 652:	21 c0       	rjmp	.+66     	; 0x696 <vfprintf+0x15c>
 654:	f8 01       	movw	r30, r16
 656:	80 81       	ld	r24, Z
 658:	89 83       	std	Y+1, r24	; 0x01
 65a:	0e 5f       	subi	r16, 0xFE	; 254
 65c:	1f 4f       	sbci	r17, 0xFF	; 255
 65e:	88 24       	eor	r8, r8
 660:	83 94       	inc	r8
 662:	91 2c       	mov	r9, r1
 664:	53 01       	movw	r10, r6
 666:	13 c0       	rjmp	.+38     	; 0x68e <vfprintf+0x154>
 668:	28 01       	movw	r4, r16
 66a:	f2 e0       	ldi	r31, 0x02	; 2
 66c:	4f 0e       	add	r4, r31
 66e:	51 1c       	adc	r5, r1
 670:	f8 01       	movw	r30, r16
 672:	a0 80       	ld	r10, Z
 674:	b1 80       	ldd	r11, Z+1	; 0x01
 676:	36 fe       	sbrs	r3, 6
 678:	03 c0       	rjmp	.+6      	; 0x680 <vfprintf+0x146>
 67a:	69 2d       	mov	r22, r9
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	02 c0       	rjmp	.+4      	; 0x684 <vfprintf+0x14a>
 680:	6f ef       	ldi	r22, 0xFF	; 255
 682:	7f ef       	ldi	r23, 0xFF	; 255
 684:	c5 01       	movw	r24, r10
 686:	0e 94 89 04 	call	0x912	; 0x912 <strnlen>
 68a:	4c 01       	movw	r8, r24
 68c:	82 01       	movw	r16, r4
 68e:	f3 2d       	mov	r31, r3
 690:	ff 77       	andi	r31, 0x7F	; 127
 692:	3f 2e       	mov	r3, r31
 694:	16 c0       	rjmp	.+44     	; 0x6c2 <vfprintf+0x188>
 696:	28 01       	movw	r4, r16
 698:	22 e0       	ldi	r18, 0x02	; 2
 69a:	42 0e       	add	r4, r18
 69c:	51 1c       	adc	r5, r1
 69e:	f8 01       	movw	r30, r16
 6a0:	a0 80       	ld	r10, Z
 6a2:	b1 80       	ldd	r11, Z+1	; 0x01
 6a4:	36 fe       	sbrs	r3, 6
 6a6:	03 c0       	rjmp	.+6      	; 0x6ae <vfprintf+0x174>
 6a8:	69 2d       	mov	r22, r9
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <vfprintf+0x178>
 6ae:	6f ef       	ldi	r22, 0xFF	; 255
 6b0:	7f ef       	ldi	r23, 0xFF	; 255
 6b2:	c5 01       	movw	r24, r10
 6b4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <strnlen_P>
 6b8:	4c 01       	movw	r8, r24
 6ba:	f3 2d       	mov	r31, r3
 6bc:	f0 68       	ori	r31, 0x80	; 128
 6be:	3f 2e       	mov	r3, r31
 6c0:	82 01       	movw	r16, r4
 6c2:	33 fc       	sbrc	r3, 3
 6c4:	1b c0       	rjmp	.+54     	; 0x6fc <vfprintf+0x1c2>
 6c6:	82 2d       	mov	r24, r2
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	88 16       	cp	r8, r24
 6cc:	99 06       	cpc	r9, r25
 6ce:	b0 f4       	brcc	.+44     	; 0x6fc <vfprintf+0x1c2>
 6d0:	b6 01       	movw	r22, r12
 6d2:	80 e2       	ldi	r24, 0x20	; 32
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 94 04 	call	0x928	; 0x928 <fputc>
 6da:	2a 94       	dec	r2
 6dc:	f4 cf       	rjmp	.-24     	; 0x6c6 <vfprintf+0x18c>
 6de:	f5 01       	movw	r30, r10
 6e0:	37 fc       	sbrc	r3, 7
 6e2:	85 91       	lpm	r24, Z+
 6e4:	37 fe       	sbrs	r3, 7
 6e6:	81 91       	ld	r24, Z+
 6e8:	5f 01       	movw	r10, r30
 6ea:	b6 01       	movw	r22, r12
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 94 04 	call	0x928	; 0x928 <fputc>
 6f2:	21 10       	cpse	r2, r1
 6f4:	2a 94       	dec	r2
 6f6:	21 e0       	ldi	r18, 0x01	; 1
 6f8:	82 1a       	sub	r8, r18
 6fa:	91 08       	sbc	r9, r1
 6fc:	81 14       	cp	r8, r1
 6fe:	91 04       	cpc	r9, r1
 700:	71 f7       	brne	.-36     	; 0x6de <vfprintf+0x1a4>
 702:	e8 c0       	rjmp	.+464    	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 704:	84 36       	cpi	r24, 0x64	; 100
 706:	11 f0       	breq	.+4      	; 0x70c <vfprintf+0x1d2>
 708:	89 36       	cpi	r24, 0x69	; 105
 70a:	41 f5       	brne	.+80     	; 0x75c <vfprintf+0x222>
 70c:	f8 01       	movw	r30, r16
 70e:	37 fe       	sbrs	r3, 7
 710:	07 c0       	rjmp	.+14     	; 0x720 <vfprintf+0x1e6>
 712:	60 81       	ld	r22, Z
 714:	71 81       	ldd	r23, Z+1	; 0x01
 716:	82 81       	ldd	r24, Z+2	; 0x02
 718:	93 81       	ldd	r25, Z+3	; 0x03
 71a:	0c 5f       	subi	r16, 0xFC	; 252
 71c:	1f 4f       	sbci	r17, 0xFF	; 255
 71e:	08 c0       	rjmp	.+16     	; 0x730 <vfprintf+0x1f6>
 720:	60 81       	ld	r22, Z
 722:	71 81       	ldd	r23, Z+1	; 0x01
 724:	07 2e       	mov	r0, r23
 726:	00 0c       	add	r0, r0
 728:	88 0b       	sbc	r24, r24
 72a:	99 0b       	sbc	r25, r25
 72c:	0e 5f       	subi	r16, 0xFE	; 254
 72e:	1f 4f       	sbci	r17, 0xFF	; 255
 730:	f3 2d       	mov	r31, r3
 732:	ff 76       	andi	r31, 0x6F	; 111
 734:	3f 2e       	mov	r3, r31
 736:	97 ff       	sbrs	r25, 7
 738:	09 c0       	rjmp	.+18     	; 0x74c <vfprintf+0x212>
 73a:	90 95       	com	r25
 73c:	80 95       	com	r24
 73e:	70 95       	com	r23
 740:	61 95       	neg	r22
 742:	7f 4f       	sbci	r23, 0xFF	; 255
 744:	8f 4f       	sbci	r24, 0xFF	; 255
 746:	9f 4f       	sbci	r25, 0xFF	; 255
 748:	f0 68       	ori	r31, 0x80	; 128
 74a:	3f 2e       	mov	r3, r31
 74c:	2a e0       	ldi	r18, 0x0A	; 10
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	a3 01       	movw	r20, r6
 752:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__ultoa_invert>
 756:	88 2e       	mov	r8, r24
 758:	86 18       	sub	r8, r6
 75a:	45 c0       	rjmp	.+138    	; 0x7e6 <vfprintf+0x2ac>
 75c:	85 37       	cpi	r24, 0x75	; 117
 75e:	31 f4       	brne	.+12     	; 0x76c <vfprintf+0x232>
 760:	23 2d       	mov	r18, r3
 762:	2f 7e       	andi	r18, 0xEF	; 239
 764:	b2 2e       	mov	r11, r18
 766:	2a e0       	ldi	r18, 0x0A	; 10
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	25 c0       	rjmp	.+74     	; 0x7b6 <vfprintf+0x27c>
 76c:	93 2d       	mov	r25, r3
 76e:	99 7f       	andi	r25, 0xF9	; 249
 770:	b9 2e       	mov	r11, r25
 772:	8f 36       	cpi	r24, 0x6F	; 111
 774:	c1 f0       	breq	.+48     	; 0x7a6 <vfprintf+0x26c>
 776:	18 f4       	brcc	.+6      	; 0x77e <vfprintf+0x244>
 778:	88 35       	cpi	r24, 0x58	; 88
 77a:	79 f0       	breq	.+30     	; 0x79a <vfprintf+0x260>
 77c:	b5 c0       	rjmp	.+362    	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 77e:	80 37       	cpi	r24, 0x70	; 112
 780:	19 f0       	breq	.+6      	; 0x788 <vfprintf+0x24e>
 782:	88 37       	cpi	r24, 0x78	; 120
 784:	21 f0       	breq	.+8      	; 0x78e <vfprintf+0x254>
 786:	b0 c0       	rjmp	.+352    	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 788:	e9 2f       	mov	r30, r25
 78a:	e0 61       	ori	r30, 0x10	; 16
 78c:	be 2e       	mov	r11, r30
 78e:	b4 fe       	sbrs	r11, 4
 790:	0d c0       	rjmp	.+26     	; 0x7ac <vfprintf+0x272>
 792:	fb 2d       	mov	r31, r11
 794:	f4 60       	ori	r31, 0x04	; 4
 796:	bf 2e       	mov	r11, r31
 798:	09 c0       	rjmp	.+18     	; 0x7ac <vfprintf+0x272>
 79a:	34 fe       	sbrs	r3, 4
 79c:	0a c0       	rjmp	.+20     	; 0x7b2 <vfprintf+0x278>
 79e:	29 2f       	mov	r18, r25
 7a0:	26 60       	ori	r18, 0x06	; 6
 7a2:	b2 2e       	mov	r11, r18
 7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <vfprintf+0x278>
 7a6:	28 e0       	ldi	r18, 0x08	; 8
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <vfprintf+0x27c>
 7ac:	20 e1       	ldi	r18, 0x10	; 16
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <vfprintf+0x27c>
 7b2:	20 e1       	ldi	r18, 0x10	; 16
 7b4:	32 e0       	ldi	r19, 0x02	; 2
 7b6:	f8 01       	movw	r30, r16
 7b8:	b7 fe       	sbrs	r11, 7
 7ba:	07 c0       	rjmp	.+14     	; 0x7ca <vfprintf+0x290>
 7bc:	60 81       	ld	r22, Z
 7be:	71 81       	ldd	r23, Z+1	; 0x01
 7c0:	82 81       	ldd	r24, Z+2	; 0x02
 7c2:	93 81       	ldd	r25, Z+3	; 0x03
 7c4:	0c 5f       	subi	r16, 0xFC	; 252
 7c6:	1f 4f       	sbci	r17, 0xFF	; 255
 7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <vfprintf+0x29c>
 7ca:	60 81       	ld	r22, Z
 7cc:	71 81       	ldd	r23, Z+1	; 0x01
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 5f       	subi	r16, 0xFE	; 254
 7d4:	1f 4f       	sbci	r17, 0xFF	; 255
 7d6:	a3 01       	movw	r20, r6
 7d8:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__ultoa_invert>
 7dc:	88 2e       	mov	r8, r24
 7de:	86 18       	sub	r8, r6
 7e0:	fb 2d       	mov	r31, r11
 7e2:	ff 77       	andi	r31, 0x7F	; 127
 7e4:	3f 2e       	mov	r3, r31
 7e6:	36 fe       	sbrs	r3, 6
 7e8:	0d c0       	rjmp	.+26     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7ea:	23 2d       	mov	r18, r3
 7ec:	2e 7f       	andi	r18, 0xFE	; 254
 7ee:	a2 2e       	mov	r10, r18
 7f0:	89 14       	cp	r8, r9
 7f2:	58 f4       	brcc	.+22     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7f4:	34 fe       	sbrs	r3, 4
 7f6:	0b c0       	rjmp	.+22     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7f8:	32 fc       	sbrc	r3, 2
 7fa:	09 c0       	rjmp	.+18     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7fc:	83 2d       	mov	r24, r3
 7fe:	8e 7e       	andi	r24, 0xEE	; 238
 800:	a8 2e       	mov	r10, r24
 802:	05 c0       	rjmp	.+10     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 804:	b8 2c       	mov	r11, r8
 806:	a3 2c       	mov	r10, r3
 808:	03 c0       	rjmp	.+6      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80a:	b8 2c       	mov	r11, r8
 80c:	01 c0       	rjmp	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80e:	b9 2c       	mov	r11, r9
 810:	a4 fe       	sbrs	r10, 4
 812:	0f c0       	rjmp	.+30     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 814:	fe 01       	movw	r30, r28
 816:	e8 0d       	add	r30, r8
 818:	f1 1d       	adc	r31, r1
 81a:	80 81       	ld	r24, Z
 81c:	80 33       	cpi	r24, 0x30	; 48
 81e:	21 f4       	brne	.+8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 820:	9a 2d       	mov	r25, r10
 822:	99 7e       	andi	r25, 0xE9	; 233
 824:	a9 2e       	mov	r10, r25
 826:	09 c0       	rjmp	.+18     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 828:	a2 fe       	sbrs	r10, 2
 82a:	06 c0       	rjmp	.+12     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 82c:	b3 94       	inc	r11
 82e:	b3 94       	inc	r11
 830:	04 c0       	rjmp	.+8      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 832:	8a 2d       	mov	r24, r10
 834:	86 78       	andi	r24, 0x86	; 134
 836:	09 f0       	breq	.+2      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 838:	b3 94       	inc	r11
 83a:	a3 fc       	sbrc	r10, 3
 83c:	11 c0       	rjmp	.+34     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 83e:	a0 fe       	sbrs	r10, 0
 840:	06 c0       	rjmp	.+12     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 842:	b2 14       	cp	r11, r2
 844:	88 f4       	brcc	.+34     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 846:	28 0c       	add	r2, r8
 848:	92 2c       	mov	r9, r2
 84a:	9b 18       	sub	r9, r11
 84c:	0e c0       	rjmp	.+28     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 84e:	b2 14       	cp	r11, r2
 850:	60 f4       	brcc	.+24     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 852:	b6 01       	movw	r22, r12
 854:	80 e2       	ldi	r24, 0x20	; 32
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 94 04 	call	0x928	; 0x928 <fputc>
 85c:	b3 94       	inc	r11
 85e:	f7 cf       	rjmp	.-18     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 860:	b2 14       	cp	r11, r2
 862:	18 f4       	brcc	.+6      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 864:	2b 18       	sub	r2, r11
 866:	02 c0       	rjmp	.+4      	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 868:	98 2c       	mov	r9, r8
 86a:	21 2c       	mov	r2, r1
 86c:	a4 fe       	sbrs	r10, 4
 86e:	10 c0       	rjmp	.+32     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 870:	b6 01       	movw	r22, r12
 872:	80 e3       	ldi	r24, 0x30	; 48
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0e 94 94 04 	call	0x928	; 0x928 <fputc>
 87a:	a2 fe       	sbrs	r10, 2
 87c:	17 c0       	rjmp	.+46     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 87e:	a1 fc       	sbrc	r10, 1
 880:	03 c0       	rjmp	.+6      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 882:	88 e7       	ldi	r24, 0x78	; 120
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	02 c0       	rjmp	.+4      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 888:	88 e5       	ldi	r24, 0x58	; 88
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	b6 01       	movw	r22, r12
 88e:	0c c0       	rjmp	.+24     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 890:	8a 2d       	mov	r24, r10
 892:	86 78       	andi	r24, 0x86	; 134
 894:	59 f0       	breq	.+22     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 896:	a1 fe       	sbrs	r10, 1
 898:	02 c0       	rjmp	.+4      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 89a:	8b e2       	ldi	r24, 0x2B	; 43
 89c:	01 c0       	rjmp	.+2      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 89e:	80 e2       	ldi	r24, 0x20	; 32
 8a0:	a7 fc       	sbrc	r10, 7
 8a2:	8d e2       	ldi	r24, 0x2D	; 45
 8a4:	b6 01       	movw	r22, r12
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	0e 94 94 04 	call	0x928	; 0x928 <fputc>
 8ac:	89 14       	cp	r8, r9
 8ae:	38 f4       	brcc	.+14     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8b0:	b6 01       	movw	r22, r12
 8b2:	80 e3       	ldi	r24, 0x30	; 48
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	0e 94 94 04 	call	0x928	; 0x928 <fputc>
 8ba:	9a 94       	dec	r9
 8bc:	f7 cf       	rjmp	.-18     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 8be:	8a 94       	dec	r8
 8c0:	f3 01       	movw	r30, r6
 8c2:	e8 0d       	add	r30, r8
 8c4:	f1 1d       	adc	r31, r1
 8c6:	80 81       	ld	r24, Z
 8c8:	b6 01       	movw	r22, r12
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 94 04 	call	0x928	; 0x928 <fputc>
 8d0:	81 10       	cpse	r8, r1
 8d2:	f5 cf       	rjmp	.-22     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 8d4:	22 20       	and	r2, r2
 8d6:	09 f4       	brne	.+2      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8d8:	42 ce       	rjmp	.-892    	; 0x55e <vfprintf+0x24>
 8da:	b6 01       	movw	r22, r12
 8dc:	80 e2       	ldi	r24, 0x20	; 32
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 94 04 	call	0x928	; 0x928 <fputc>
 8e4:	2a 94       	dec	r2
 8e6:	f6 cf       	rjmp	.-20     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8e8:	f6 01       	movw	r30, r12
 8ea:	86 81       	ldd	r24, Z+6	; 0x06
 8ec:	97 81       	ldd	r25, Z+7	; 0x07
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 8f0:	8f ef       	ldi	r24, 0xFF	; 255
 8f2:	9f ef       	ldi	r25, 0xFF	; 255
 8f4:	2b 96       	adiw	r28, 0x0b	; 11
 8f6:	e2 e1       	ldi	r30, 0x12	; 18
 8f8:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__epilogue_restores__>

000008fc <strnlen_P>:
 8fc:	fc 01       	movw	r30, r24
 8fe:	05 90       	lpm	r0, Z+
 900:	61 50       	subi	r22, 0x01	; 1
 902:	70 40       	sbci	r23, 0x00	; 0
 904:	01 10       	cpse	r0, r1
 906:	d8 f7       	brcc	.-10     	; 0x8fe <strnlen_P+0x2>
 908:	80 95       	com	r24
 90a:	90 95       	com	r25
 90c:	8e 0f       	add	r24, r30
 90e:	9f 1f       	adc	r25, r31
 910:	08 95       	ret

00000912 <strnlen>:
 912:	fc 01       	movw	r30, r24
 914:	61 50       	subi	r22, 0x01	; 1
 916:	70 40       	sbci	r23, 0x00	; 0
 918:	01 90       	ld	r0, Z+
 91a:	01 10       	cpse	r0, r1
 91c:	d8 f7       	brcc	.-10     	; 0x914 <strnlen+0x2>
 91e:	80 95       	com	r24
 920:	90 95       	com	r25
 922:	8e 0f       	add	r24, r30
 924:	9f 1f       	adc	r25, r31
 926:	08 95       	ret

00000928 <fputc>:
 928:	0f 93       	push	r16
 92a:	1f 93       	push	r17
 92c:	cf 93       	push	r28
 92e:	df 93       	push	r29
 930:	fb 01       	movw	r30, r22
 932:	23 81       	ldd	r18, Z+3	; 0x03
 934:	21 fd       	sbrc	r18, 1
 936:	03 c0       	rjmp	.+6      	; 0x93e <fputc+0x16>
 938:	8f ef       	ldi	r24, 0xFF	; 255
 93a:	9f ef       	ldi	r25, 0xFF	; 255
 93c:	2c c0       	rjmp	.+88     	; 0x996 <fputc+0x6e>
 93e:	22 ff       	sbrs	r18, 2
 940:	16 c0       	rjmp	.+44     	; 0x96e <fputc+0x46>
 942:	46 81       	ldd	r20, Z+6	; 0x06
 944:	57 81       	ldd	r21, Z+7	; 0x07
 946:	24 81       	ldd	r18, Z+4	; 0x04
 948:	35 81       	ldd	r19, Z+5	; 0x05
 94a:	42 17       	cp	r20, r18
 94c:	53 07       	cpc	r21, r19
 94e:	44 f4       	brge	.+16     	; 0x960 <fputc+0x38>
 950:	a0 81       	ld	r26, Z
 952:	b1 81       	ldd	r27, Z+1	; 0x01
 954:	9d 01       	movw	r18, r26
 956:	2f 5f       	subi	r18, 0xFF	; 255
 958:	3f 4f       	sbci	r19, 0xFF	; 255
 95a:	31 83       	std	Z+1, r19	; 0x01
 95c:	20 83       	st	Z, r18
 95e:	8c 93       	st	X, r24
 960:	26 81       	ldd	r18, Z+6	; 0x06
 962:	37 81       	ldd	r19, Z+7	; 0x07
 964:	2f 5f       	subi	r18, 0xFF	; 255
 966:	3f 4f       	sbci	r19, 0xFF	; 255
 968:	37 83       	std	Z+7, r19	; 0x07
 96a:	26 83       	std	Z+6, r18	; 0x06
 96c:	14 c0       	rjmp	.+40     	; 0x996 <fputc+0x6e>
 96e:	8b 01       	movw	r16, r22
 970:	ec 01       	movw	r28, r24
 972:	fb 01       	movw	r30, r22
 974:	00 84       	ldd	r0, Z+8	; 0x08
 976:	f1 85       	ldd	r31, Z+9	; 0x09
 978:	e0 2d       	mov	r30, r0
 97a:	09 95       	icall
 97c:	89 2b       	or	r24, r25
 97e:	e1 f6       	brne	.-72     	; 0x938 <fputc+0x10>
 980:	d8 01       	movw	r26, r16
 982:	16 96       	adiw	r26, 0x06	; 6
 984:	8d 91       	ld	r24, X+
 986:	9c 91       	ld	r25, X
 988:	17 97       	sbiw	r26, 0x07	; 7
 98a:	01 96       	adiw	r24, 0x01	; 1
 98c:	17 96       	adiw	r26, 0x07	; 7
 98e:	9c 93       	st	X, r25
 990:	8e 93       	st	-X, r24
 992:	16 97       	sbiw	r26, 0x06	; 6
 994:	ce 01       	movw	r24, r28
 996:	df 91       	pop	r29
 998:	cf 91       	pop	r28
 99a:	1f 91       	pop	r17
 99c:	0f 91       	pop	r16
 99e:	08 95       	ret

000009a0 <__ultoa_invert>:
 9a0:	fa 01       	movw	r30, r20
 9a2:	aa 27       	eor	r26, r26
 9a4:	28 30       	cpi	r18, 0x08	; 8
 9a6:	51 f1       	breq	.+84     	; 0x9fc <__ultoa_invert+0x5c>
 9a8:	20 31       	cpi	r18, 0x10	; 16
 9aa:	81 f1       	breq	.+96     	; 0xa0c <__ultoa_invert+0x6c>
 9ac:	e8 94       	clt
 9ae:	6f 93       	push	r22
 9b0:	6e 7f       	andi	r22, 0xFE	; 254
 9b2:	6e 5f       	subi	r22, 0xFE	; 254
 9b4:	7f 4f       	sbci	r23, 0xFF	; 255
 9b6:	8f 4f       	sbci	r24, 0xFF	; 255
 9b8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ba:	af 4f       	sbci	r26, 0xFF	; 255
 9bc:	b1 e0       	ldi	r27, 0x01	; 1
 9be:	3e d0       	rcall	.+124    	; 0xa3c <__ultoa_invert+0x9c>
 9c0:	b4 e0       	ldi	r27, 0x04	; 4
 9c2:	3c d0       	rcall	.+120    	; 0xa3c <__ultoa_invert+0x9c>
 9c4:	67 0f       	add	r22, r23
 9c6:	78 1f       	adc	r23, r24
 9c8:	89 1f       	adc	r24, r25
 9ca:	9a 1f       	adc	r25, r26
 9cc:	a1 1d       	adc	r26, r1
 9ce:	68 0f       	add	r22, r24
 9d0:	79 1f       	adc	r23, r25
 9d2:	8a 1f       	adc	r24, r26
 9d4:	91 1d       	adc	r25, r1
 9d6:	a1 1d       	adc	r26, r1
 9d8:	6a 0f       	add	r22, r26
 9da:	71 1d       	adc	r23, r1
 9dc:	81 1d       	adc	r24, r1
 9de:	91 1d       	adc	r25, r1
 9e0:	a1 1d       	adc	r26, r1
 9e2:	20 d0       	rcall	.+64     	; 0xa24 <__ultoa_invert+0x84>
 9e4:	09 f4       	brne	.+2      	; 0x9e8 <__ultoa_invert+0x48>
 9e6:	68 94       	set
 9e8:	3f 91       	pop	r19
 9ea:	2a e0       	ldi	r18, 0x0A	; 10
 9ec:	26 9f       	mul	r18, r22
 9ee:	11 24       	eor	r1, r1
 9f0:	30 19       	sub	r19, r0
 9f2:	30 5d       	subi	r19, 0xD0	; 208
 9f4:	31 93       	st	Z+, r19
 9f6:	de f6       	brtc	.-74     	; 0x9ae <__ultoa_invert+0xe>
 9f8:	cf 01       	movw	r24, r30
 9fa:	08 95       	ret
 9fc:	46 2f       	mov	r20, r22
 9fe:	47 70       	andi	r20, 0x07	; 7
 a00:	40 5d       	subi	r20, 0xD0	; 208
 a02:	41 93       	st	Z+, r20
 a04:	b3 e0       	ldi	r27, 0x03	; 3
 a06:	0f d0       	rcall	.+30     	; 0xa26 <__ultoa_invert+0x86>
 a08:	c9 f7       	brne	.-14     	; 0x9fc <__ultoa_invert+0x5c>
 a0a:	f6 cf       	rjmp	.-20     	; 0x9f8 <__ultoa_invert+0x58>
 a0c:	46 2f       	mov	r20, r22
 a0e:	4f 70       	andi	r20, 0x0F	; 15
 a10:	40 5d       	subi	r20, 0xD0	; 208
 a12:	4a 33       	cpi	r20, 0x3A	; 58
 a14:	18 f0       	brcs	.+6      	; 0xa1c <__ultoa_invert+0x7c>
 a16:	49 5d       	subi	r20, 0xD9	; 217
 a18:	31 fd       	sbrc	r19, 1
 a1a:	40 52       	subi	r20, 0x20	; 32
 a1c:	41 93       	st	Z+, r20
 a1e:	02 d0       	rcall	.+4      	; 0xa24 <__ultoa_invert+0x84>
 a20:	a9 f7       	brne	.-22     	; 0xa0c <__ultoa_invert+0x6c>
 a22:	ea cf       	rjmp	.-44     	; 0x9f8 <__ultoa_invert+0x58>
 a24:	b4 e0       	ldi	r27, 0x04	; 4
 a26:	a6 95       	lsr	r26
 a28:	97 95       	ror	r25
 a2a:	87 95       	ror	r24
 a2c:	77 95       	ror	r23
 a2e:	67 95       	ror	r22
 a30:	ba 95       	dec	r27
 a32:	c9 f7       	brne	.-14     	; 0xa26 <__ultoa_invert+0x86>
 a34:	00 97       	sbiw	r24, 0x00	; 0
 a36:	61 05       	cpc	r22, r1
 a38:	71 05       	cpc	r23, r1
 a3a:	08 95       	ret
 a3c:	9b 01       	movw	r18, r22
 a3e:	ac 01       	movw	r20, r24
 a40:	0a 2e       	mov	r0, r26
 a42:	06 94       	lsr	r0
 a44:	57 95       	ror	r21
 a46:	47 95       	ror	r20
 a48:	37 95       	ror	r19
 a4a:	27 95       	ror	r18
 a4c:	ba 95       	dec	r27
 a4e:	c9 f7       	brne	.-14     	; 0xa42 <__ultoa_invert+0xa2>
 a50:	62 0f       	add	r22, r18
 a52:	73 1f       	adc	r23, r19
 a54:	84 1f       	adc	r24, r20
 a56:	95 1f       	adc	r25, r21
 a58:	a0 1d       	adc	r26, r0
 a5a:	08 95       	ret

00000a5c <__prologue_saves__>:
 a5c:	2f 92       	push	r2
 a5e:	3f 92       	push	r3
 a60:	4f 92       	push	r4
 a62:	5f 92       	push	r5
 a64:	6f 92       	push	r6
 a66:	7f 92       	push	r7
 a68:	8f 92       	push	r8
 a6a:	9f 92       	push	r9
 a6c:	af 92       	push	r10
 a6e:	bf 92       	push	r11
 a70:	cf 92       	push	r12
 a72:	df 92       	push	r13
 a74:	ef 92       	push	r14
 a76:	ff 92       	push	r15
 a78:	0f 93       	push	r16
 a7a:	1f 93       	push	r17
 a7c:	cf 93       	push	r28
 a7e:	df 93       	push	r29
 a80:	cd b7       	in	r28, 0x3d	; 61
 a82:	de b7       	in	r29, 0x3e	; 62
 a84:	ca 1b       	sub	r28, r26
 a86:	db 0b       	sbc	r29, r27
 a88:	0f b6       	in	r0, 0x3f	; 63
 a8a:	f8 94       	cli
 a8c:	de bf       	out	0x3e, r29	; 62
 a8e:	0f be       	out	0x3f, r0	; 63
 a90:	cd bf       	out	0x3d, r28	; 61
 a92:	09 94       	ijmp

00000a94 <__epilogue_restores__>:
 a94:	2a 88       	ldd	r2, Y+18	; 0x12
 a96:	39 88       	ldd	r3, Y+17	; 0x11
 a98:	48 88       	ldd	r4, Y+16	; 0x10
 a9a:	5f 84       	ldd	r5, Y+15	; 0x0f
 a9c:	6e 84       	ldd	r6, Y+14	; 0x0e
 a9e:	7d 84       	ldd	r7, Y+13	; 0x0d
 aa0:	8c 84       	ldd	r8, Y+12	; 0x0c
 aa2:	9b 84       	ldd	r9, Y+11	; 0x0b
 aa4:	aa 84       	ldd	r10, Y+10	; 0x0a
 aa6:	b9 84       	ldd	r11, Y+9	; 0x09
 aa8:	c8 84       	ldd	r12, Y+8	; 0x08
 aaa:	df 80       	ldd	r13, Y+7	; 0x07
 aac:	ee 80       	ldd	r14, Y+6	; 0x06
 aae:	fd 80       	ldd	r15, Y+5	; 0x05
 ab0:	0c 81       	ldd	r16, Y+4	; 0x04
 ab2:	1b 81       	ldd	r17, Y+3	; 0x03
 ab4:	aa 81       	ldd	r26, Y+2	; 0x02
 ab6:	b9 81       	ldd	r27, Y+1	; 0x01
 ab8:	ce 0f       	add	r28, r30
 aba:	d1 1d       	adc	r29, r1
 abc:	0f b6       	in	r0, 0x3f	; 63
 abe:	f8 94       	cli
 ac0:	de bf       	out	0x3e, r29	; 62
 ac2:	0f be       	out	0x3f, r0	; 63
 ac4:	cd bf       	out	0x3d, r28	; 61
 ac6:	ed 01       	movw	r28, r26
 ac8:	08 95       	ret

00000aca <_exit>:
 aca:	f8 94       	cli

00000acc <__stop_program>:
 acc:	ff cf       	rjmp	.-2      	; 0xacc <__stop_program>
