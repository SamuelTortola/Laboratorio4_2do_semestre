
Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000026a  000002de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c6c  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081a  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005bf  00000000  00000000  00001866  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043d  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000413  00000000  00000000  00002351  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002764  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 21 01 	call	0x242	; 0x242 <main>
  8e:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <dato_a_mostrar>:
{
	if(a == 0)
	inicio(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna
	
	else if(a == 1)
	inicio(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
  96:	80 ff       	sbrs	r24, 0
  98:	04 c0       	rjmp	.+8      	; 0xa2 <dato_a_mostrar+0xc>
  9a:	9b b1       	in	r25, 0x0b	; 11
  9c:	91 60       	ori	r25, 0x01	; 1
  9e:	9b b9       	out	0x0b, r25	; 11
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <dato_a_mostrar+0x12>
  a2:	9b b1       	in	r25, 0x0b	; 11
  a4:	9e 7f       	andi	r25, 0xFE	; 254
  a6:	9b b9       	out	0x0b, r25	; 11
  a8:	81 ff       	sbrs	r24, 1
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <dato_a_mostrar+0x1e>
  ac:	9b b1       	in	r25, 0x0b	; 11
  ae:	92 60       	ori	r25, 0x02	; 2
  b0:	9b b9       	out	0x0b, r25	; 11
  b2:	03 c0       	rjmp	.+6      	; 0xba <dato_a_mostrar+0x24>
  b4:	9b b1       	in	r25, 0x0b	; 11
  b6:	9d 7f       	andi	r25, 0xFD	; 253
  b8:	9b b9       	out	0x0b, r25	; 11
  ba:	82 ff       	sbrs	r24, 2
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <dato_a_mostrar+0x30>
  be:	9b b1       	in	r25, 0x0b	; 11
  c0:	94 60       	ori	r25, 0x04	; 4
  c2:	9b b9       	out	0x0b, r25	; 11
  c4:	03 c0       	rjmp	.+6      	; 0xcc <dato_a_mostrar+0x36>
  c6:	9b b1       	in	r25, 0x0b	; 11
  c8:	9b 7f       	andi	r25, 0xFB	; 251
  ca:	9b b9       	out	0x0b, r25	; 11
  cc:	83 ff       	sbrs	r24, 3
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <dato_a_mostrar+0x42>
  d0:	9b b1       	in	r25, 0x0b	; 11
  d2:	98 60       	ori	r25, 0x08	; 8
  d4:	9b b9       	out	0x0b, r25	; 11
  d6:	03 c0       	rjmp	.+6      	; 0xde <dato_a_mostrar+0x48>
  d8:	9b b1       	in	r25, 0x0b	; 11
  da:	97 7f       	andi	r25, 0xF7	; 247
  dc:	9b b9       	out	0x0b, r25	; 11
  de:	84 ff       	sbrs	r24, 4
  e0:	04 c0       	rjmp	.+8      	; 0xea <dato_a_mostrar+0x54>
  e2:	9b b1       	in	r25, 0x0b	; 11
  e4:	90 61       	ori	r25, 0x10	; 16
  e6:	9b b9       	out	0x0b, r25	; 11
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <dato_a_mostrar+0x5a>
  ea:	9b b1       	in	r25, 0x0b	; 11
  ec:	9f 7e       	andi	r25, 0xEF	; 239
  ee:	9b b9       	out	0x0b, r25	; 11
  f0:	85 ff       	sbrs	r24, 5
  f2:	04 c0       	rjmp	.+8      	; 0xfc <dato_a_mostrar+0x66>
  f4:	9b b1       	in	r25, 0x0b	; 11
  f6:	90 62       	ori	r25, 0x20	; 32
  f8:	9b b9       	out	0x0b, r25	; 11
  fa:	03 c0       	rjmp	.+6      	; 0x102 <dato_a_mostrar+0x6c>
  fc:	9b b1       	in	r25, 0x0b	; 11
  fe:	9f 7d       	andi	r25, 0xDF	; 223
 100:	9b b9       	out	0x0b, r25	; 11
 102:	86 ff       	sbrs	r24, 6
 104:	04 c0       	rjmp	.+8      	; 0x10e <dato_a_mostrar+0x78>
 106:	9b b1       	in	r25, 0x0b	; 11
 108:	90 64       	ori	r25, 0x40	; 64
 10a:	9b b9       	out	0x0b, r25	; 11
 10c:	03 c0       	rjmp	.+6      	; 0x114 <dato_a_mostrar+0x7e>
 10e:	9b b1       	in	r25, 0x0b	; 11
 110:	9f 7b       	andi	r25, 0xBF	; 191
 112:	9b b9       	out	0x0b, r25	; 11
 114:	88 23       	and	r24, r24
 116:	24 f4       	brge	.+8      	; 0x120 <dato_a_mostrar+0x8a>
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8b b9       	out	0x0b, r24	; 11
 11e:	08 95       	ret
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	8f 77       	andi	r24, 0x7F	; 127
 124:	8b b9       	out	0x0b, r24	; 11
 126:	08 95       	ret

00000128 <inicio>:
 128:	95 b1       	in	r25, 0x05	; 5
 12a:	9e 7f       	andi	r25, 0xFE	; 254
 12c:	95 b9       	out	0x05, r25	; 5
 12e:	0e 94 4b 00 	call	0x96	; 0x96 <dato_a_mostrar>
 132:	85 b1       	in	r24, 0x05	; 5
 134:	82 60       	ori	r24, 0x02	; 2
 136:	85 b9       	out	0x05, r24	; 5
 138:	8f e9       	ldi	r24, 0x9F	; 159
 13a:	9f e0       	ldi	r25, 0x0F	; 15
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <inicio+0x14>
 140:	00 c0       	rjmp	.+0      	; 0x142 <inicio+0x1a>
 142:	00 00       	nop
 144:	85 b1       	in	r24, 0x05	; 5
 146:	8d 7f       	andi	r24, 0xFD	; 253
 148:	85 b9       	out	0x05, r24	; 5
 14a:	8f e9       	ldi	r24, 0x9F	; 159
 14c:	9f e0       	ldi	r25, 0x0F	; 15
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <inicio+0x26>
 152:	00 c0       	rjmp	.+0      	; 0x154 <inicio+0x2c>
 154:	00 00       	nop
 156:	08 95       	ret

00000158 <Lcd_Init8bits>:
 158:	85 b1       	in	r24, 0x05	; 5
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	85 b9       	out	0x05, r24	; 5
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	85 b9       	out	0x05, r24	; 5
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	89 ef       	ldi	r24, 0xF9	; 249
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <Lcd_Init8bits+0x12>
 172:	00 c0       	rjmp	.+0      	; 0x174 <Lcd_Init8bits+0x1c>
 174:	00 00       	nop
 176:	80 e3       	ldi	r24, 0x30	; 48
 178:	0e 94 94 00 	call	0x128	; 0x128 <inicio>
 17c:	8f e1       	ldi	r24, 0x1F	; 31
 17e:	9e e4       	ldi	r25, 0x4E	; 78
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <Lcd_Init8bits+0x28>
 184:	00 c0       	rjmp	.+0      	; 0x186 <Lcd_Init8bits+0x2e>
 186:	00 00       	nop
 188:	80 e3       	ldi	r24, 0x30	; 48
 18a:	0e 94 94 00 	call	0x128	; 0x128 <inicio>
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <Lcd_Init8bits+0x3a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <Lcd_Init8bits+0x40>
 198:	00 00       	nop
 19a:	80 e3       	ldi	r24, 0x30	; 48
 19c:	0e 94 94 00 	call	0x128	; 0x128 <inicio>
 1a0:	8f e3       	ldi	r24, 0x3F	; 63
 1a2:	9c e9       	ldi	r25, 0x9C	; 156
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <Lcd_Init8bits+0x4c>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <Lcd_Init8bits+0x52>
 1aa:	00 00       	nop
 1ac:	88 e3       	ldi	r24, 0x38	; 56
 1ae:	0e 94 94 00 	call	0x128	; 0x128 <inicio>
 1b2:	8c e0       	ldi	r24, 0x0C	; 12
 1b4:	0e 94 94 00 	call	0x128	; 0x128 <inicio>
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 94 00 	call	0x128	; 0x128 <inicio>
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	0e 94 94 00 	call	0x128	; 0x128 <inicio>
 1c4:	08 95       	ret

000001c6 <Lcd_Clear>:
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 94 00 	call	0x128	; 0x128 <inicio>
 1cc:	08 95       	ret

000001ce <Lcd_Write_Char>:
}


void Lcd_Write_Char(char data)
{
	PORTB |= (1<<PORTB0);        // RS = 1, se le indica que esta en modo caracter
 1ce:	95 b1       	in	r25, 0x05	; 5
 1d0:	91 60       	ori	r25, 0x01	; 1
 1d2:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(data);             //Escribir el caracter
 1d4:	0e 94 4b 00 	call	0x96	; 0x96 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);       // E = 1, enviar el dato
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	82 60       	ori	r24, 0x02	; 2
 1dc:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	8f e9       	ldi	r24, 0x9F	; 159
 1e0:	9f e0       	ldi	r25, 0x0F	; 15
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <Lcd_Write_Char+0x14>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <Lcd_Write_Char+0x1a>
 1e8:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);    // E = 0
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	8d 7f       	andi	r24, 0xFD	; 253
 1ee:	85 b9       	out	0x05, r24	; 5
 1f0:	8f e9       	ldi	r24, 0x9F	; 159
 1f2:	9f e0       	ldi	r25, 0x0F	; 15
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <Lcd_Write_Char+0x26>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <Lcd_Write_Char+0x2c>
 1fa:	00 00       	nop
 1fc:	08 95       	ret

000001fe <Lcd_Write_String>:
	_delay_ms(1);
}


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	8c 01       	movw	r16, r24
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 208:	c0 e0       	ldi	r28, 0x00	; 0
 20a:	d0 e0       	ldi	r29, 0x00	; 0
 20c:	03 c0       	rjmp	.+6      	; 0x214 <Lcd_Write_String+0x16>
	Lcd_Write_Char(a[i]);
 20e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Lcd_Write_Char>


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 212:	21 96       	adiw	r28, 0x01	; 1
 214:	f8 01       	movw	r30, r16
 216:	ec 0f       	add	r30, r28
 218:	fd 1f       	adc	r31, r29
 21a:	80 81       	ld	r24, Z
 21c:	81 11       	cpse	r24, r1
 21e:	f7 cf       	rjmp	.-18     	; 0x20e <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <setup>:



void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
 22a:	f8 94       	cli
	DDRD = 0xFF;  //Puerto D como salida
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;  //Puerto B como salida
 230:	84 b9       	out	0x04, r24	; 4
	
	

	UCSR0B = 0;  //Usar los pines TX y RX como digitales
 232:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	Lcd_Init8bits();   //Iniciar pantalla LCD
 236:	0e 94 ac 00 	call	0x158	; 0x158 <Lcd_Init8bits>
	Lcd_Clear();
 23a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lcd_Clear>
	
	sei(); //Activar interrupciones
 23e:	78 94       	sei
 240:	08 95       	ret

00000242 <main>:
}


int main(void)
{
   setup();
 242:	0e 94 15 01 	call	0x22a	; 0x22a <setup>
    while (1) 
    {
		  Lcd_Write_String("Hola UVG");
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Lcd_Write_String>
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	81 ee       	ldi	r24, 0xE1	; 225
 252:	94 e0       	ldi	r25, 0x04	; 4
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x12>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x1c>
 25e:	00 00       	nop
		  _delay_ms(100);
		  Lcd_Clear();
 260:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lcd_Clear>
 264:	f0 cf       	rjmp	.-32     	; 0x246 <main+0x4>

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
