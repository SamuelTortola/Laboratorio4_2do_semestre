
Esclavo 2_botones.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000021c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000002b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000885  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fa  00000000  00000000  00000be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037b  00000000  00000000  000012db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e5  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000214  00000000  00000000  00001ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001cdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  9e:	0c 94 0c 01 	jmp	0x218	; 0x218 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
uint8_t dir = 0x03; //Dirección del esclavo


void setup(void);
void setup(void){
	DDRB = 0b00000000;   //PB0, PB1 como entrada de pulsadores
  a6:	14 b8       	out	0x04, r1	; 4
	DDRD = 0b00001111;  //Salida hacia LEDs del contador de 4 bits
  a8:	8f e0       	ldi	r24, 0x0F	; 15
  aa:	8a b9       	out	0x0a, r24	; 10

	PORTB = 0b00000011;		//pull up encendido en PB0 y PB1 
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b00000000;   //Iniciamos los leds apagados
  b0:	1b b8       	out	0x0b, r1	; 11
	
	UCSR0B = 0;  //Usar los pines TX y RX como digitales
  b2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	PCMSK0 |= (1 << 0)|(1 << 1); //PCINT0, PCINT1
  b6:	eb e6       	ldi	r30, 0x6B	; 107
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	80 83       	st	Z, r24
	PCICR |= (1 << 0); //Mascara de interrupción
  c0:	e8 e6       	ldi	r30, 0x68	; 104
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 83       	st	Z, r24
	
	dir <<= 1;  //Ubica la dirección y 
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ce:	88 0f       	add	r24, r24
	dir |= 0x01; //habilita para reconocer las llamadas generales de I2C
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	TWAR = dir;
  d6:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE); //Habilita el BUS, con reconocimiento e interrupción
  da:	85 e4       	ldi	r24, 0x45	; 69
  dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	sei(); //Activar interrupciones
  e0:	78 94       	sei
  e2:	08 95       	ret

000000e4 <main>:
}

int main(void)
{
    setup();
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	8f e3       	ldi	r24, 0x3F	; 63
  ea:	9c e9       	ldi	r25, 0x9C	; 156
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x8>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0xe>
  f2:	00 00       	nop
  f4:	f9 cf       	rjmp	.-14     	; 0xe8 <main+0x4>

000000f6 <__vector_3>:
		
    }
}


ISR(PCINT0_vect){
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
	
	
	if(((PINB) & (1<<0)) == 0){   //Condicional que compara si se presionó el pulsador 1
 106:	18 99       	sbic	0x03, 0	; 3
 108:	26 c0       	rjmp	.+76     	; 0x156 <__vector_3+0x60>
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	80 e7       	ldi	r24, 0x70	; 112
 10e:	92 e0       	ldi	r25, 0x02	; 2
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <__vector_3+0x1a>
 118:	00 c0       	rjmp	.+0      	; 0x11a <__vector_3+0x24>
 11a:	00 00       	nop
		_delay_ms(50);  //antirrebote
		contador ++;
 11c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 120:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 12a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		
		if (contador >= 15)
 12e:	0f 97       	sbiw	r24, 0x0f	; 15
 130:	34 f0       	brlt	.+12     	; 0x13e <__vector_3+0x48>
		{
			contador = 15;
 132:	8f e0       	ldi	r24, 0x0F	; 15
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 13a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		}
		
		PORTD = contador;
 13e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 142:	8b b9       	out	0x0b, r24	; 11
		
		  
		while ((PINB & (1 << PINB0)) == 0)   //While para evitar sumas indebidas
 144:	06 c0       	rjmp	.+12     	; 0x152 <__vector_3+0x5c>
 146:	8f e3       	ldi	r24, 0x3F	; 63
 148:	9c e9       	ldi	r25, 0x9C	; 156
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <__vector_3+0x54>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <__vector_3+0x5a>
 150:	00 00       	nop
 152:	18 9b       	sbis	0x03, 0	; 3
 154:	f8 cf       	rjmp	.-16     	; 0x146 <__vector_3+0x50>
			_delay_ms(10);
		}
		
	}
	
	if(((PINB) & (1<<1)) == 0){   //Condicional que compara si se presionó el pulsador  de start
 156:	19 99       	sbic	0x03, 1	; 3
 158:	25 c0       	rjmp	.+74     	; 0x1a4 <__vector_3+0xae>
 15a:	9f ef       	ldi	r25, 0xFF	; 255
 15c:	20 e7       	ldi	r18, 0x70	; 112
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	91 50       	subi	r25, 0x01	; 1
 162:	20 40       	sbci	r18, 0x00	; 0
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <__vector_3+0x6a>
 168:	00 c0       	rjmp	.+0      	; 0x16a <__vector_3+0x74>
 16a:	00 00       	nop
		_delay_ms(50);  //antirrebote
		
		contador --;
 16c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 170:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 17a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		
			if (contador <= 0)
 17e:	18 16       	cp	r1, r24
 180:	19 06       	cpc	r1, r25
 182:	24 f0       	brlt	.+8      	; 0x18c <__vector_3+0x96>
			{
				contador = 0;
 184:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 188:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			}
			PORTD = contador;
 18c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 190:	8b b9       	out	0x0b, r24	; 11
		
		while ((PINB & (1 << PINB1)) == 0)   //While para evitar sumas indebidas
 192:	06 c0       	rjmp	.+12     	; 0x1a0 <__vector_3+0xaa>
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	9c e9       	ldi	r25, 0x9C	; 156
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <__vector_3+0xa2>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <__vector_3+0xa8>
 19e:	00 00       	nop
 1a0:	19 9b       	sbis	0x03, 1	; 3
 1a2:	f8 cf       	rjmp	.-16     	; 0x194 <__vector_3+0x9e>
			_delay_ms(10);
		}
		
	}
	
}
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_24>:

ISR(TWI_vect){
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	uint8_t dato, estado;
	
	estado = TWSR & 0xFC;  //Lee el estado de la interfaz
 1c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1c8:	8c 7f       	andi	r24, 0xFC	; 252
	
	switch(estado){
 1ca:	80 37       	cpi	r24, 0x70	; 112
 1cc:	49 f0       	breq	.+18     	; 0x1e0 <__vector_24+0x2c>
 1ce:	18 f4       	brcc	.+6      	; 0x1d6 <__vector_24+0x22>
 1d0:	80 36       	cpi	r24, 0x60	; 96
 1d2:	31 f0       	breq	.+12     	; 0x1e0 <__vector_24+0x2c>
 1d4:	14 c0       	rjmp	.+40     	; 0x1fe <__vector_24+0x4a>
 1d6:	80 38       	cpi	r24, 0x80	; 128
 1d8:	49 f0       	breq	.+18     	; 0x1ec <__vector_24+0x38>
 1da:	80 39       	cpi	r24, 0x90	; 144
 1dc:	39 f0       	breq	.+14     	; 0x1ec <__vector_24+0x38>
 1de:	0f c0       	rjmp	.+30     	; 0x1fe <__vector_24+0x4a>
		case 0x60:
		case 0x70:              //Direccionado con su direccion de esclavo
			TWCR |= (1 << TWINT); //
 1e0:	ec eb       	ldi	r30, 0xBC	; 188
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	80 68       	ori	r24, 0x80	; 128
 1e8:	80 83       	st	Z, r24
			break;
 1ea:	0e c0       	rjmp	.+28     	; 0x208 <__vector_24+0x54>
			
		case 0x80:
		case 0x90:
			dato = TWDR;  //Recibió el dato, llamada general
 1ec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			PORTD = dato; 
 1f0:	8b b9       	out	0x0b, r24	; 11
			TWCR |= 1 << TWINT; //Borra la bandera TWINT
 1f2:	ec eb       	ldi	r30, 0xBC	; 188
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	80 83       	st	Z, r24
			break;
 1fc:	05 c0       	rjmp	.+10     	; 0x208 <__vector_24+0x54>
		default:    //Libera el BUS de cualquier errror
			TWCR |= (1 << TWINT) | (1 << TWSTO);
 1fe:	ec eb       	ldi	r30, 0xBC	; 188
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 69       	ori	r24, 0x90	; 144
 206:	80 83       	st	Z, r24
			
	}
	
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
