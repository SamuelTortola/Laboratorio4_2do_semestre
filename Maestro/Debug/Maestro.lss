
Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000035e  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010a  0080010a  000003fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec8  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000955  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000081e  00000000  00000000  00001d59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002578  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000488  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000565  00000000  00000000  00002b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000030cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 89 01 	call	0x312	; 0x312 <main>
  9e:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Config>:
		return 0x01;
	}
	
	return edo;    //Si hay algun error
	
}
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  ac:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b6:	08 95       	ret

000000b8 <I2C_inicio>:
  b8:	84 ea       	ldi	r24, 0xA4	; 164
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c2:	88 23       	and	r24, r24
  c4:	e4 f7       	brge	.-8      	; 0xbe <I2C_inicio+0x6>
  c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ca:	88 7f       	andi	r24, 0xF8	; 248
  cc:	88 30       	cpi	r24, 0x08	; 8
  ce:	21 f0       	breq	.+8      	; 0xd8 <I2C_inicio+0x20>
  d0:	80 31       	cpi	r24, 0x10	; 16
  d2:	19 f4       	brne	.+6      	; 0xda <I2C_inicio+0x22>
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	08 95       	ret
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	08 95       	ret

000000dc <I2C_EscByte>:
  dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  e0:	84 e8       	ldi	r24, 0x84	; 132
  e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ea:	88 23       	and	r24, r24
  ec:	e4 f7       	brge	.-8      	; 0xe6 <I2C_EscByte+0xa>
  ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  f2:	88 7f       	andi	r24, 0xF8	; 248
  f4:	88 31       	cpi	r24, 0x18	; 24
  f6:	31 f0       	breq	.+12     	; 0x104 <I2C_EscByte+0x28>
  f8:	88 32       	cpi	r24, 0x28	; 40
  fa:	31 f0       	breq	.+12     	; 0x108 <I2C_EscByte+0x2c>
  fc:	80 34       	cpi	r24, 0x40	; 64
  fe:	29 f4       	brne	.+10     	; 0x10a <I2C_EscByte+0x2e>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	08 95       	ret
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	08 95       	ret
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	08 95       	ret

0000010c <I2C_STOP>:
 10c:	84 e9       	ldi	r24, 0x94	; 148
 10e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 112:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 116:	84 fd       	sbrc	r24, 4
 118:	fc cf       	rjmp	.-8      	; 0x112 <I2C_STOP+0x6>
 11a:	08 95       	ret

0000011c <I2C_esclavo>:



void I2C_esclavo(uint8_t dato){
 11c:	cf 93       	push	r28
 11e:	c8 2f       	mov	r28, r24
	esclavo = 0x03;  //Dirección del esclavo
	esclavo = esclavo << 1;    //Compone la SLA+W
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <esclavo>
	
	
	aux = I2C_inicio();   //Condicion de inicio
 126:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_inicio>
 12a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <aux>
	if (aux != 0x01)  //Si no se establece la conexión
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	31 f0       	breq	.+12     	; 0x13e <I2C_esclavo+0x22>
	{
		TWCR |= (1 << TWINT);  //Borrar la bandera
 132:	ec eb       	ldi	r30, 0xBC	; 188
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	80 83       	st	Z, r24
		return;   //No continua
 13c:	10 c0       	rjmp	.+32     	; 0x15e <I2C_esclavo+0x42>
	}
	
	aux = I2C_EscByte(esclavo);     //Direcciona con la SLA+W
 13e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <esclavo>
 142:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_EscByte>
 146:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <aux>
	if (aux != 0x01)   //Si hay algun error de comunicación
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	19 f0       	breq	.+6      	; 0x154 <I2C_esclavo+0x38>
	{
		I2C_STOP();  //No continua, termina la comunicación y la cierra
 14e:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_STOP>
		return;   
 152:	05 c0       	rjmp	.+10     	; 0x15e <I2C_esclavo+0x42>
	}
	
	I2C_EscByte(dato);   //Envia el dato al esclavo
 154:	8c 2f       	mov	r24, r28
 156:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_EscByte>
	I2C_STOP();  //No continua, termina la comunicación y la cierra
 15a:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_STOP>
	
	
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <dato_a_mostrar>:
{
	if(a == 0)
	inicio(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna
	
	else if(a == 1)
	inicio(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
 162:	80 ff       	sbrs	r24, 0
 164:	04 c0       	rjmp	.+8      	; 0x16e <dato_a_mostrar+0xc>
 166:	9b b1       	in	r25, 0x0b	; 11
 168:	91 60       	ori	r25, 0x01	; 1
 16a:	9b b9       	out	0x0b, r25	; 11
 16c:	03 c0       	rjmp	.+6      	; 0x174 <dato_a_mostrar+0x12>
 16e:	9b b1       	in	r25, 0x0b	; 11
 170:	9e 7f       	andi	r25, 0xFE	; 254
 172:	9b b9       	out	0x0b, r25	; 11
 174:	81 ff       	sbrs	r24, 1
 176:	04 c0       	rjmp	.+8      	; 0x180 <dato_a_mostrar+0x1e>
 178:	9b b1       	in	r25, 0x0b	; 11
 17a:	92 60       	ori	r25, 0x02	; 2
 17c:	9b b9       	out	0x0b, r25	; 11
 17e:	03 c0       	rjmp	.+6      	; 0x186 <dato_a_mostrar+0x24>
 180:	9b b1       	in	r25, 0x0b	; 11
 182:	9d 7f       	andi	r25, 0xFD	; 253
 184:	9b b9       	out	0x0b, r25	; 11
 186:	82 ff       	sbrs	r24, 2
 188:	04 c0       	rjmp	.+8      	; 0x192 <dato_a_mostrar+0x30>
 18a:	9b b1       	in	r25, 0x0b	; 11
 18c:	94 60       	ori	r25, 0x04	; 4
 18e:	9b b9       	out	0x0b, r25	; 11
 190:	03 c0       	rjmp	.+6      	; 0x198 <dato_a_mostrar+0x36>
 192:	9b b1       	in	r25, 0x0b	; 11
 194:	9b 7f       	andi	r25, 0xFB	; 251
 196:	9b b9       	out	0x0b, r25	; 11
 198:	83 ff       	sbrs	r24, 3
 19a:	04 c0       	rjmp	.+8      	; 0x1a4 <dato_a_mostrar+0x42>
 19c:	9b b1       	in	r25, 0x0b	; 11
 19e:	98 60       	ori	r25, 0x08	; 8
 1a0:	9b b9       	out	0x0b, r25	; 11
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <dato_a_mostrar+0x48>
 1a4:	9b b1       	in	r25, 0x0b	; 11
 1a6:	97 7f       	andi	r25, 0xF7	; 247
 1a8:	9b b9       	out	0x0b, r25	; 11
 1aa:	84 ff       	sbrs	r24, 4
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <dato_a_mostrar+0x54>
 1ae:	9b b1       	in	r25, 0x0b	; 11
 1b0:	90 61       	ori	r25, 0x10	; 16
 1b2:	9b b9       	out	0x0b, r25	; 11
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <dato_a_mostrar+0x5a>
 1b6:	9b b1       	in	r25, 0x0b	; 11
 1b8:	9f 7e       	andi	r25, 0xEF	; 239
 1ba:	9b b9       	out	0x0b, r25	; 11
 1bc:	85 ff       	sbrs	r24, 5
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <dato_a_mostrar+0x66>
 1c0:	9b b1       	in	r25, 0x0b	; 11
 1c2:	90 62       	ori	r25, 0x20	; 32
 1c4:	9b b9       	out	0x0b, r25	; 11
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <dato_a_mostrar+0x6c>
 1c8:	9b b1       	in	r25, 0x0b	; 11
 1ca:	9f 7d       	andi	r25, 0xDF	; 223
 1cc:	9b b9       	out	0x0b, r25	; 11
 1ce:	86 ff       	sbrs	r24, 6
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <dato_a_mostrar+0x78>
 1d2:	9b b1       	in	r25, 0x0b	; 11
 1d4:	90 64       	ori	r25, 0x40	; 64
 1d6:	9b b9       	out	0x0b, r25	; 11
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <dato_a_mostrar+0x7e>
 1da:	9b b1       	in	r25, 0x0b	; 11
 1dc:	9f 7b       	andi	r25, 0xBF	; 191
 1de:	9b b9       	out	0x0b, r25	; 11
 1e0:	88 23       	and	r24, r24
 1e2:	24 f4       	brge	.+8      	; 0x1ec <dato_a_mostrar+0x8a>
 1e4:	8b b1       	in	r24, 0x0b	; 11
 1e6:	80 68       	ori	r24, 0x80	; 128
 1e8:	8b b9       	out	0x0b, r24	; 11
 1ea:	08 95       	ret
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	8f 77       	andi	r24, 0x7F	; 127
 1f0:	8b b9       	out	0x0b, r24	; 11
 1f2:	08 95       	ret

000001f4 <inicio>:
 1f4:	95 b1       	in	r25, 0x05	; 5
 1f6:	9e 7f       	andi	r25, 0xFE	; 254
 1f8:	95 b9       	out	0x05, r25	; 5
 1fa:	0e 94 b1 00 	call	0x162	; 0x162 <dato_a_mostrar>
 1fe:	85 b1       	in	r24, 0x05	; 5
 200:	82 60       	ori	r24, 0x02	; 2
 202:	85 b9       	out	0x05, r24	; 5
 204:	8f e9       	ldi	r24, 0x9F	; 159
 206:	9f e0       	ldi	r25, 0x0F	; 15
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <inicio+0x14>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <inicio+0x1a>
 20e:	00 00       	nop
 210:	85 b1       	in	r24, 0x05	; 5
 212:	8d 7f       	andi	r24, 0xFD	; 253
 214:	85 b9       	out	0x05, r24	; 5
 216:	8f e9       	ldi	r24, 0x9F	; 159
 218:	9f e0       	ldi	r25, 0x0F	; 15
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <inicio+0x26>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <inicio+0x2c>
 220:	00 00       	nop
 222:	08 95       	ret

00000224 <Lcd_Init8bits>:
 224:	85 b1       	in	r24, 0x05	; 5
 226:	8e 7f       	andi	r24, 0xFE	; 254
 228:	85 b9       	out	0x05, r24	; 5
 22a:	85 b1       	in	r24, 0x05	; 5
 22c:	8d 7f       	andi	r24, 0xFD	; 253
 22e:	85 b9       	out	0x05, r24	; 5
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	89 ef       	ldi	r24, 0xF9	; 249
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	21 50       	subi	r18, 0x01	; 1
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <Lcd_Init8bits+0x12>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <Lcd_Init8bits+0x1c>
 240:	00 00       	nop
 242:	80 e3       	ldi	r24, 0x30	; 48
 244:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <inicio>
 248:	8f e1       	ldi	r24, 0x1F	; 31
 24a:	9e e4       	ldi	r25, 0x4E	; 78
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <Lcd_Init8bits+0x28>
 250:	00 c0       	rjmp	.+0      	; 0x252 <Lcd_Init8bits+0x2e>
 252:	00 00       	nop
 254:	80 e3       	ldi	r24, 0x30	; 48
 256:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <inicio>
 25a:	8f e1       	ldi	r24, 0x1F	; 31
 25c:	9e e4       	ldi	r25, 0x4E	; 78
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <Lcd_Init8bits+0x3a>
 262:	00 c0       	rjmp	.+0      	; 0x264 <Lcd_Init8bits+0x40>
 264:	00 00       	nop
 266:	80 e3       	ldi	r24, 0x30	; 48
 268:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <inicio>
 26c:	8f e3       	ldi	r24, 0x3F	; 63
 26e:	9c e9       	ldi	r25, 0x9C	; 156
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <Lcd_Init8bits+0x4c>
 274:	00 c0       	rjmp	.+0      	; 0x276 <Lcd_Init8bits+0x52>
 276:	00 00       	nop
 278:	88 e3       	ldi	r24, 0x38	; 56
 27a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <inicio>
 27e:	8c e0       	ldi	r24, 0x0C	; 12
 280:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <inicio>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <inicio>
 28a:	86 e0       	ldi	r24, 0x06	; 6
 28c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <inicio>
 290:	08 95       	ret

00000292 <Lcd_Clear>:
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <inicio>
 298:	08 95       	ret

0000029a <Lcd_Write_Char>:
}


void Lcd_Write_Char(char data)
{
	PORTB |= (1<<PORTB0);        // RS = 1, se le indica que esta en modo caracter
 29a:	95 b1       	in	r25, 0x05	; 5
 29c:	91 60       	ori	r25, 0x01	; 1
 29e:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(data);             //Escribir el caracter
 2a0:	0e 94 b1 00 	call	0x162	; 0x162 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);       // E = 1, enviar el dato
 2a4:	85 b1       	in	r24, 0x05	; 5
 2a6:	82 60       	ori	r24, 0x02	; 2
 2a8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2aa:	8f e9       	ldi	r24, 0x9F	; 159
 2ac:	9f e0       	ldi	r25, 0x0F	; 15
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <Lcd_Write_Char+0x14>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <Lcd_Write_Char+0x1a>
 2b4:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);    // E = 0
 2b6:	85 b1       	in	r24, 0x05	; 5
 2b8:	8d 7f       	andi	r24, 0xFD	; 253
 2ba:	85 b9       	out	0x05, r24	; 5
 2bc:	8f e9       	ldi	r24, 0x9F	; 159
 2be:	9f e0       	ldi	r25, 0x0F	; 15
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <Lcd_Write_Char+0x26>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <Lcd_Write_Char+0x2c>
 2c6:	00 00       	nop
 2c8:	08 95       	ret

000002ca <Lcd_Write_String>:
	_delay_ms(1);
}


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	8c 01       	movw	r16, r24
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 2d4:	c0 e0       	ldi	r28, 0x00	; 0
 2d6:	d0 e0       	ldi	r29, 0x00	; 0
 2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <Lcd_Write_String+0x16>
	Lcd_Write_Char(a[i]);
 2da:	0e 94 4d 01 	call	0x29a	; 0x29a <Lcd_Write_Char>


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 2de:	21 96       	adiw	r28, 0x01	; 1
 2e0:	f8 01       	movw	r30, r16
 2e2:	ec 0f       	add	r30, r28
 2e4:	fd 1f       	adc	r31, r29
 2e6:	80 81       	ld	r24, Z
 2e8:	81 11       	cpse	r24, r1
 2ea:	f7 cf       	rjmp	.-18     	; 0x2da <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	08 95       	ret

000002f6 <setup>:


uint8_t i =0;
void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
 2f6:	f8 94       	cli
	DDRD = 0xFF;  //Puerto D como salida
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
 2fa:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;  //Puerto B como salida
 2fc:	84 b9       	out	0x04, r24	; 4
	
	
	UCSR0B = 0;  //Usar los pines TX y RX como digitales
 2fe:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	Lcd_Init8bits();   //Iniciar pantalla LCD
 302:	0e 94 12 01 	call	0x224	; 0x224 <Lcd_Init8bits>
	Lcd_Clear();
 306:	0e 94 49 01 	call	0x292	; 0x292 <Lcd_Clear>
	
	I2C_Config();
 30a:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Config>
	
	sei(); //Activar interrupciones
 30e:	78 94       	sei
 310:	08 95       	ret

00000312 <main>:
}


int main(void)
{
   setup();
 312:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <setup>
    while (1) 
    {
		  Lcd_Write_String("Hola UVG");
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 65 01 	call	0x2ca	; 0x2ca <Lcd_Write_String>
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	83 ed       	ldi	r24, 0xD3	; 211
 322:	90 e3       	ldi	r25, 0x30	; 48
 324:	21 50       	subi	r18, 0x01	; 1
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x12>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x1c>
 32e:	00 00       	nop
		  _delay_ms(1000);
		  Lcd_Clear();
 330:	0e 94 49 01 	call	0x292	; 0x292 <Lcd_Clear>
		  I2C_esclavo(i);
 334:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 338:	0e 94 8e 00 	call	0x11c	; 0x11c <I2C_esclavo>
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	83 ed       	ldi	r24, 0xD3	; 211
 340:	90 e3       	ldi	r25, 0x30	; 48
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <main+0x30>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x3a>
 34c:	00 00       	nop
		  _delay_ms(1000);
		  i++;
 34e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 352:	8f 5f       	subi	r24, 0xFF	; 255
 354:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 358:	de cf       	rjmp	.-68     	; 0x316 <main+0x4>

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
