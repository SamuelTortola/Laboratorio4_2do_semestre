
Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000005a4  00000638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800138  00800138  00000670  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ec  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000996  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009fa  00000000  00000000  0000243a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f4  00000000  00000000  00002fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c0  00000000  00000000  000034b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003b74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	18 02       	muls	r17, r24
  6a:	21 02       	muls	r18, r17
  6c:	2a 02       	muls	r18, r26
  6e:	33 02       	muls	r19, r19
  70:	3c 02       	muls	r19, r28
  72:	45 02       	muls	r20, r21
  74:	4e 02       	muls	r20, r30
  76:	57 02       	muls	r21, r23
  78:	60 02       	muls	r22, r16
  7a:	69 02       	muls	r22, r25
  7c:	72 02       	muls	r23, r18
  7e:	7b 02       	muls	r23, r27
  80:	84 02       	muls	r24, r20
  82:	8d 02       	muls	r24, r29
  84:	96 02       	muls	r25, r22
  86:	9f 02       	muls	r25, r31

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
  94:	11 e0       	ldi	r17, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	e4 ea       	ldi	r30, 0xA4	; 164
  9c:	f5 e0       	ldi	r31, 0x05	; 5
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a8 33       	cpi	r26, 0x38	; 56
  a6:	b1 07       	cpc	r27, r17
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	a8 e3       	ldi	r26, 0x38	; 56
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
  b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
  b4:	aa 33       	cpi	r26, 0x3A	; 58
  b6:	b2 07       	cpc	r27, r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
  ba:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <main>
  be:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <I2C_Config_MASTER>:
	
	I2C_EscByte(dato);   //Envia el dato al esclavo
	I2C_STOP();  //No continua, termina la comunicación y la cierra
	
	
}
  c6:	cf 93       	push	r28
  c8:	c8 2f       	mov	r28, r24
  ca:	9a 01       	movw	r18, r20
  cc:	ab 01       	movw	r20, r22
  ce:	87 b1       	in	r24, 0x07	; 7
  d0:	8f 7c       	andi	r24, 0xCF	; 207
  d2:	87 b9       	out	0x07, r24	; 7
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	74 e2       	ldi	r23, 0x24	; 36
  d8:	84 ef       	ldi	r24, 0xF4	; 244
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 a8 02 	call	0x550	; 0x550 <__udivmodsi4>
  e0:	ca 01       	movw	r24, r20
  e2:	b9 01       	movw	r22, r18
  e4:	60 51       	subi	r22, 0x10	; 16
  e6:	71 09       	sbc	r23, r1
  e8:	81 09       	sbc	r24, r1
  ea:	91 09       	sbc	r25, r1
  ec:	2c 2f       	mov	r18, r28
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	03 2e       	mov	r0, r19
  f6:	00 0c       	add	r0, r0
  f8:	44 0b       	sbc	r20, r20
  fa:	55 0b       	sbc	r21, r21
  fc:	0e 94 a8 02 	call	0x550	; 0x550 <__udivmodsi4>
 100:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 104:	c4 30       	cpi	r28, 0x04	; 4
 106:	79 f0       	breq	.+30     	; 0x126 <I2C_Config_MASTER+0x60>
 108:	18 f4       	brcc	.+6      	; 0x110 <I2C_Config_MASTER+0x4a>
 10a:	c1 30       	cpi	r28, 0x01	; 1
 10c:	31 f0       	breq	.+12     	; 0x11a <I2C_Config_MASTER+0x54>
 10e:	23 c0       	rjmp	.+70     	; 0x156 <I2C_Config_MASTER+0x90>
 110:	c0 31       	cpi	r28, 0x10	; 16
 112:	91 f0       	breq	.+36     	; 0x138 <I2C_Config_MASTER+0x72>
 114:	c0 34       	cpi	r28, 0x40	; 64
 116:	c9 f0       	breq	.+50     	; 0x14a <I2C_Config_MASTER+0x84>
 118:	1e c0       	rjmp	.+60     	; 0x156 <I2C_Config_MASTER+0x90>
 11a:	e9 eb       	ldi	r30, 0xB9	; 185
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	8c 7f       	andi	r24, 0xFC	; 252
 122:	80 83       	st	Z, r24
 124:	1d c0       	rjmp	.+58     	; 0x160 <I2C_Config_MASTER+0x9a>
 126:	e9 eb       	ldi	r30, 0xB9	; 185
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	80 83       	st	Z, r24
 130:	80 81       	ld	r24, Z
 132:	81 60       	ori	r24, 0x01	; 1
 134:	80 83       	st	Z, r24
 136:	14 c0       	rjmp	.+40     	; 0x160 <I2C_Config_MASTER+0x9a>
 138:	e9 eb       	ldi	r30, 0xB9	; 185
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8e 7f       	andi	r24, 0xFE	; 254
 140:	80 83       	st	Z, r24
 142:	80 81       	ld	r24, Z
 144:	82 60       	ori	r24, 0x02	; 2
 146:	80 83       	st	Z, r24
 148:	0b c0       	rjmp	.+22     	; 0x160 <I2C_Config_MASTER+0x9a>
 14a:	e9 eb       	ldi	r30, 0xB9	; 185
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	8d 6f       	ori	r24, 0xFD	; 253
 152:	80 83       	st	Z, r24
 154:	05 c0       	rjmp	.+10     	; 0x160 <I2C_Config_MASTER+0x9a>
 156:	e9 eb       	ldi	r30, 0xB9	; 185
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8c 7f       	andi	r24, 0xFC	; 252
 15e:	80 83       	st	Z, r24
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <I2C_STOP>:
 16a:	84 e9       	ldi	r24, 0x94	; 148
 16c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 170:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 174:	84 fd       	sbrc	r24, 4
 176:	fc cf       	rjmp	.-8      	; 0x170 <I2C_STOP+0x6>
 178:	08 95       	ret

0000017a <I2C_leer_dato>:




// Lee un byte de datos del esclavo I2C
uint8_t I2C_leer_dato(uint8_t direccion_esclavo, uint8_t *dato) {
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 17e:	94 ea       	ldi	r25, 0xA4	; 164
 180:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 184:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 188:	99 23       	and	r25, r25
 18a:	e4 f7       	brge	.-8      	; 0x184 <I2C_leer_dato+0xa>

	// Verificar condición de START
	if ((TWSR & 0xF8) != TW_START) {
 18c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 190:	98 7f       	andi	r25, 0xF8	; 248
 192:	98 30       	cpi	r25, 0x08	; 8
 194:	b1 f5       	brne	.+108    	; 0x202 <I2C_leer_dato+0x88>
		return 1; // Error: No se pudo iniciar la condición de START
	}

	// Enviar dirección del esclavo con bit de lectura
	TWDR = SLA_R(direccion_esclavo);
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 1a2:	84 e8       	ldi	r24, 0x84	; 132
 1a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la transmisión de la dirección
 1a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ac:	88 23       	and	r24, r24
 1ae:	e4 f7       	brge	.-8      	; 0x1a8 <I2C_leer_dato+0x2e>
 1b0:	eb 01       	movw	r28, r22

	// Verificar ACK/NACK de la dirección
	uint8_t twsr_value = TWSR & 0xF8;
 1b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1b6:	88 7f       	andi	r24, 0xF8	; 248
	if (twsr_value == TW_MR_SLA_NACK) {
 1b8:	88 34       	cpi	r24, 0x48	; 72
 1ba:	21 f4       	brne	.+8      	; 0x1c4 <I2C_leer_dato+0x4a>
		I2C_STOP(); // Detener si se recibe un NACK
 1bc:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_STOP>
		return 1; // Error: NACK recibido
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	20 c0       	rjmp	.+64     	; 0x204 <I2C_leer_dato+0x8a>
		} else if (twsr_value != TW_MR_SLA_ACK) {
 1c4:	80 34       	cpi	r24, 0x40	; 64
 1c6:	21 f0       	breq	.+8      	; 0x1d0 <I2C_leer_dato+0x56>
		I2C_STOP(); // Detener si otro estado inesperado
 1c8:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_STOP>
		return 1; // Error: Estado inesperado
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	1a c0       	rjmp	.+52     	; 0x204 <I2C_leer_dato+0x8a>
	}

	// Leer un byte del esclavo
	TWCR = (1 << TWEN) | (1 << TWINT); // Leer sin ACK (NACK)
 1d0:	84 e8       	ldi	r24, 0x84	; 132
 1d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la recepción
 1d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1da:	88 23       	and	r24, r24
 1dc:	e4 f7       	brge	.-8      	; 0x1d6 <I2C_leer_dato+0x5c>

	// Verificar estado de recepción
	twsr_value = TWSR & 0xF8;
 1de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1e2:	88 7f       	andi	r24, 0xF8	; 248
	if (twsr_value != TW_MR_DATA_NACK && twsr_value != TW_MR_DATA_ACK) {
 1e4:	88 35       	cpi	r24, 0x58	; 88
 1e6:	31 f0       	breq	.+12     	; 0x1f4 <I2C_leer_dato+0x7a>
 1e8:	80 35       	cpi	r24, 0x50	; 80
 1ea:	21 f0       	breq	.+8      	; 0x1f4 <I2C_leer_dato+0x7a>
		I2C_STOP(); // Detener si hay error en la recepción
 1ec:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_STOP>
		return 1; // Error en la recepción
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	08 c0       	rjmp	.+16     	; 0x204 <I2C_leer_dato+0x8a>
	}

	// Leer el dato recibido
	*dato = TWDR;
 1f4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1f8:	88 83       	st	Y, r24

	// Generar condición de STOP
      I2C_STOP();
 1fa:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_STOP>
  
	return  *dato; // Éxito
 1fe:	88 81       	ld	r24, Y
 200:	01 c0       	rjmp	.+2      	; 0x204 <I2C_leer_dato+0x8a>
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete

	// Verificar condición de START
	if ((TWSR & 0xF8) != TW_START) {
		return 1; // Error: No se pudo iniciar la condición de START
 202:	81 e0       	ldi	r24, 0x01	; 1

	// Generar condición de STOP
      I2C_STOP();
  
	return  *dato; // Éxito
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <dato_a_mostrar>:
}


void dato_a_mostrar(char a)
{
	if(a & 1)				//0000 0001, el  a&1 es una operación bitwise, si el primer bit menos signfiativo es 1, la condición es verdadera
 20a:	80 ff       	sbrs	r24, 0
 20c:	04 c0       	rjmp	.+8      	; 0x216 <dato_a_mostrar+0xc>
	PORTD |= (1<<0);
 20e:	9b b1       	in	r25, 0x0b	; 11
 210:	91 60       	ori	r25, 0x01	; 1
 212:	9b b9       	out	0x0b, r25	; 11
 214:	03 c0       	rjmp	.+6      	; 0x21c <dato_a_mostrar+0x12>
	else
	PORTD &= ~(1<<0);
 216:	9b b1       	in	r25, 0x0b	; 11
 218:	9e 7f       	andi	r25, 0xFE	; 254
 21a:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 2)			   //0000 0010, ahora verifica el segundo bit menos significativo, y si es 1, la condición es verdadera
 21c:	81 ff       	sbrs	r24, 1
 21e:	04 c0       	rjmp	.+8      	; 0x228 <dato_a_mostrar+0x1e>
	PORTD |= (1<<1);
 220:	9b b1       	in	r25, 0x0b	; 11
 222:	92 60       	ori	r25, 0x02	; 2
 224:	9b b9       	out	0x0b, r25	; 11
 226:	03 c0       	rjmp	.+6      	; 0x22e <dato_a_mostrar+0x24>
	else
	PORTD &= ~(1<<1);
 228:	9b b1       	in	r25, 0x0b	; 11
 22a:	9d 7f       	andi	r25, 0xFD	; 253
 22c:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 4)				//0000 0100
 22e:	82 ff       	sbrs	r24, 2
 230:	04 c0       	rjmp	.+8      	; 0x23a <dato_a_mostrar+0x30>
	PORTD |= (1<<PORTD2);
 232:	9b b1       	in	r25, 0x0b	; 11
 234:	94 60       	ori	r25, 0x04	; 4
 236:	9b b9       	out	0x0b, r25	; 11
 238:	03 c0       	rjmp	.+6      	; 0x240 <dato_a_mostrar+0x36>
	else
	PORTD &= ~(1<<PORTD2);
 23a:	9b b1       	in	r25, 0x0b	; 11
 23c:	9b 7f       	andi	r25, 0xFB	; 251
 23e:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 8)				//0000 1000
 240:	83 ff       	sbrs	r24, 3
 242:	04 c0       	rjmp	.+8      	; 0x24c <dato_a_mostrar+0x42>
	PORTD |= (1<<PORTD3);
 244:	9b b1       	in	r25, 0x0b	; 11
 246:	98 60       	ori	r25, 0x08	; 8
 248:	9b b9       	out	0x0b, r25	; 11
 24a:	03 c0       	rjmp	.+6      	; 0x252 <dato_a_mostrar+0x48>
	else
	PORTD &= ~(1<<PORTD3);
 24c:	9b b1       	in	r25, 0x0b	; 11
 24e:	97 7f       	andi	r25, 0xF7	; 247
 250:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 16)			    //0001 0000
 252:	84 ff       	sbrs	r24, 4
 254:	04 c0       	rjmp	.+8      	; 0x25e <dato_a_mostrar+0x54>
	PORTD |= (1<<PORTD4);
 256:	9b b1       	in	r25, 0x0b	; 11
 258:	90 61       	ori	r25, 0x10	; 16
 25a:	9b b9       	out	0x0b, r25	; 11
 25c:	03 c0       	rjmp	.+6      	; 0x264 <dato_a_mostrar+0x5a>
	else
	PORTD &= ~(1<<PORTD4);
 25e:	9b b1       	in	r25, 0x0b	; 11
 260:	9f 7e       	andi	r25, 0xEF	; 239
 262:	9b b9       	out	0x0b, r25	; 11

	if(a & 32)			    //0010 0000
 264:	85 ff       	sbrs	r24, 5
 266:	04 c0       	rjmp	.+8      	; 0x270 <dato_a_mostrar+0x66>
	PORTD |= (1<<PORTD5);
 268:	9b b1       	in	r25, 0x0b	; 11
 26a:	90 62       	ori	r25, 0x20	; 32
 26c:	9b b9       	out	0x0b, r25	; 11
 26e:	03 c0       	rjmp	.+6      	; 0x276 <dato_a_mostrar+0x6c>
	else
	PORTD &= ~(1<<PORTD5);
 270:	9b b1       	in	r25, 0x0b	; 11
 272:	9f 7d       	andi	r25, 0xDF	; 223
 274:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 64)			   //0100 0000
 276:	86 ff       	sbrs	r24, 6
 278:	04 c0       	rjmp	.+8      	; 0x282 <dato_a_mostrar+0x78>
	PORTD |= (1<<PORTD6);
 27a:	9b b1       	in	r25, 0x0b	; 11
 27c:	90 64       	ori	r25, 0x40	; 64
 27e:	9b b9       	out	0x0b, r25	; 11
 280:	03 c0       	rjmp	.+6      	; 0x288 <dato_a_mostrar+0x7e>
	else
	PORTD &= ~(1<<PORTD6);
 282:	9b b1       	in	r25, 0x0b	; 11
 284:	9f 7b       	andi	r25, 0xBF	; 191
 286:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 128)			   //1000 0000
 288:	88 23       	and	r24, r24
 28a:	24 f4       	brge	.+8      	; 0x294 <dato_a_mostrar+0x8a>
	PORTD |= (1<<PORTD7);
 28c:	8b b1       	in	r24, 0x0b	; 11
 28e:	80 68       	ori	r24, 0x80	; 128
 290:	8b b9       	out	0x0b, r24	; 11
 292:	08 95       	ret
	else
	PORTD &= ~(1<<PORTD7);
 294:	8b b1       	in	r24, 0x0b	; 11
 296:	8f 77       	andi	r24, 0x7F	; 127
 298:	8b b9       	out	0x0b, r24	; 11
 29a:	08 95       	ret

0000029c <inicio>:
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
}

void inicio(char a)
{
	PORTB &= ~(1<<PORTB0);  //RS = 0, se le indica que es modo comando
 29c:	95 b1       	in	r25, 0x05	; 5
 29e:	9e 7f       	andi	r25, 0xFE	; 254
 2a0:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(a);
 2a2:	0e 94 05 01 	call	0x20a	; 0x20a <dato_a_mostrar>
	PORTB |= (1<<PORTB1);    // E = 1, se le indica que envie los datos
 2a6:	85 b1       	in	r24, 0x05	; 5
 2a8:	82 60       	ori	r24, 0x02	; 2
 2aa:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	8f e9       	ldi	r24, 0x9F	; 159
 2ae:	9f e0       	ldi	r25, 0x0F	; 15
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <inicio+0x14>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <inicio+0x1a>
 2b6:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);   // E = 0,  se le indica que se cierra el envio de datos
 2b8:	85 b1       	in	r24, 0x05	; 5
 2ba:	8d 7f       	andi	r24, 0xFD	; 253
 2bc:	85 b9       	out	0x05, r24	; 5
 2be:	8f e9       	ldi	r24, 0x9F	; 159
 2c0:	9f e0       	ldi	r25, 0x0F	; 15
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <inicio+0x26>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <inicio+0x2c>
 2c8:	00 00       	nop
 2ca:	08 95       	ret

000002cc <Lcd_Init8bits>:
#include "LCD.h"

void Lcd_Init8bits()
{
	PORTB &= ~(1<<PORTB0);   //RS = 0, se le indica que es modo comando
 2cc:	85 b1       	in	r24, 0x05	; 5
 2ce:	8e 7f       	andi	r24, 0xFE	; 254
 2d0:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB1);   //E = 0
 2d2:	85 b1       	in	r24, 0x05	; 5
 2d4:	8d 7f       	andi	r24, 0xFD	; 253
 2d6:	85 b9       	out	0x05, r24	; 5
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	89 ef       	ldi	r24, 0xF9	; 249
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	90 40       	sbci	r25, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <Lcd_Init8bits+0x12>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <Lcd_Init8bits+0x1c>
 2e8:	00 00       	nop
	_delay_ms(20);     //Pequeños delay que indica el fabricante del LCD
	inicio(0x30);     //Comando que se repite 3 veces, que indica el fabricante de la LCD
 2ea:	80 e3       	ldi	r24, 0x30	; 48
 2ec:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
 2f0:	8f e1       	ldi	r24, 0x1F	; 31
 2f2:	9e e4       	ldi	r25, 0x4E	; 78
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <Lcd_Init8bits+0x28>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <Lcd_Init8bits+0x2e>
 2fa:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 2fc:	80 e3       	ldi	r24, 0x30	; 48
 2fe:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
 302:	8f e1       	ldi	r24, 0x1F	; 31
 304:	9e e4       	ldi	r25, 0x4E	; 78
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <Lcd_Init8bits+0x3a>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <Lcd_Init8bits+0x40>
 30c:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 30e:	80 e3       	ldi	r24, 0x30	; 48
 310:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
 314:	8f e3       	ldi	r24, 0x3F	; 63
 316:	9c e9       	ldi	r25, 0x9C	; 156
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <Lcd_Init8bits+0x4c>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <Lcd_Init8bits+0x52>
 31e:	00 00       	nop
	_delay_ms(10);

	inicio(0x38);  //Comando que indica el fabricante del LCD, usando la matriz de 5X8
 320:	88 e3       	ldi	r24, 0x38	; 56
 322:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
	inicio(0x0C);  //Comando que indica el fabricante del LCD, display encendido
 326:	8c e0       	ldi	r24, 0x0C	; 12
 328:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
	inicio(0x01);  //Comando que indica el fabricante del LCD, Limpiar LCD
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
 332:	86 e0       	ldi	r24, 0x06	; 6
 334:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
 338:	08 95       	ret

0000033a <Lcd_Clear>:



void Lcd_Clear()    //Limpia la pantalla LCD
{
	inicio(1);  //Comando dado por el fabricante de la LCD
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
 340:	08 95       	ret

00000342 <Lcd_Set_Cursor>:



void Lcd_Set_Cursor(char a, char b)
{
	if(a == 0)
 342:	81 11       	cpse	r24, r1
 344:	05 c0       	rjmp	.+10     	; 0x350 <Lcd_Set_Cursor+0xe>
	inicio(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna
 346:	80 e8       	ldi	r24, 0x80	; 128
 348:	86 0f       	add	r24, r22
 34a:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
 34e:	08 95       	ret
	
	else if(a == 1)
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	21 f4       	brne	.+8      	; 0x35c <Lcd_Set_Cursor+0x1a>
	inicio(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
 354:	80 ec       	ldi	r24, 0xC0	; 192
 356:	86 0f       	add	r24, r22
 358:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
 35c:	08 95       	ret

0000035e <Lcd_Write_Char>:
}


void Lcd_Write_Char(char data)
{
	PORTB |= (1<<PORTB0);        // RS = 1, se le indica que esta en modo caracter
 35e:	95 b1       	in	r25, 0x05	; 5
 360:	91 60       	ori	r25, 0x01	; 1
 362:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(data);             //Escribir el caracter
 364:	0e 94 05 01 	call	0x20a	; 0x20a <dato_a_mostrar>
	PORTB |= (1<<PORTB1);       // E = 1, enviar el dato
 368:	85 b1       	in	r24, 0x05	; 5
 36a:	82 60       	ori	r24, 0x02	; 2
 36c:	85 b9       	out	0x05, r24	; 5
 36e:	8f e9       	ldi	r24, 0x9F	; 159
 370:	9f e0       	ldi	r25, 0x0F	; 15
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <Lcd_Write_Char+0x14>
 376:	00 c0       	rjmp	.+0      	; 0x378 <Lcd_Write_Char+0x1a>
 378:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);    // E = 0
 37a:	85 b1       	in	r24, 0x05	; 5
 37c:	8d 7f       	andi	r24, 0xFD	; 253
 37e:	85 b9       	out	0x05, r24	; 5
 380:	8f e9       	ldi	r24, 0x9F	; 159
 382:	9f e0       	ldi	r25, 0x0F	; 15
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <Lcd_Write_Char+0x26>
 388:	00 c0       	rjmp	.+0      	; 0x38a <Lcd_Write_Char+0x2c>
 38a:	00 00       	nop
 38c:	08 95       	ret

0000038e <Lcd_Write_String>:
	_delay_ms(1);
}


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	8c 01       	movw	r16, r24
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 398:	c0 e0       	ldi	r28, 0x00	; 0
 39a:	d0 e0       	ldi	r29, 0x00	; 0
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <Lcd_Write_String+0x16>
	Lcd_Write_Char(a[i]);
 39e:	0e 94 af 01 	call	0x35e	; 0x35e <Lcd_Write_Char>


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 3a2:	21 96       	adiw	r28, 0x01	; 1
 3a4:	f8 01       	movw	r30, r16
 3a6:	ec 0f       	add	r30, r28
 3a8:	fd 1f       	adc	r31, r29
 3aa:	80 81       	ld	r24, Z
 3ac:	81 11       	cpse	r24, r1
 3ae:	f7 cf       	rjmp	.-18     	; 0x39e <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	08 95       	ret

000003ba <setup>:
uint8_t dato_leido; //Variable que almacena el valor en si


void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
 3ba:	f8 94       	cli
	DDRD = 0xFF;  //Puerto D como salida
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;  //Puerto B como salida
 3c0:	84 b9       	out	0x04, r24	; 4
	
	
	UCSR0B = 0;  //Usar los pines TX y RX como digitales
 3c2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	Lcd_Init8bits();   //Iniciar pantalla LCD
 3c6:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lcd_Init8bits>
	Lcd_Clear();
 3ca:	0e 94 9d 01 	call	0x33a	; 0x33a <Lcd_Clear>
	
	I2C_Config_MASTER(4, 200);
 3ce:	48 ec       	ldi	r20, 0xC8	; 200
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Config_MASTER>
	
	sei(); //Activar interrupciones
 3dc:	78 94       	sei
 3de:	08 95       	ret

000003e0 <main>:
}


int main(void)
{
   setup();
 3e0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setup>
 3e4:	8f e3       	ldi	r24, 0x3F	; 63
 3e6:	9c e9       	ldi	r25, 0x9C	; 156
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <main+0x8>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0xe>
 3ee:	00 00       	nop
    while (1) 
    {
		  _delay_ms(10);
		  Lcd_Set_Cursor(0,3);
 3f0:	63 e0       	ldi	r22, 0x03	; 3
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
		  Lcd_Write_String("S1:");
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	91 e0       	ldi	r25, 0x01	; 1
 3fc:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
		  Lcd_Set_Cursor(0,10);
 400:	6a e0       	ldi	r22, 0x0A	; 10
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
		  Lcd_Write_String("S2:");
 408:	84 e0       	ldi	r24, 0x04	; 4
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
		
		//  I2C_esclavo(1, esclavo1); //Por si se desea enviar un valor a algún esclavo
		  
		  
		  dato_leido = I2C_leer_dato(esclavo1, &dato1);
 410:	68 e3       	ldi	r22, 0x38	; 56
 412:	71 e0       	ldi	r23, 0x01	; 1
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	0e 94 bd 00 	call	0x17a	; 0x17a <I2C_leer_dato>
 41a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <dato_leido>
		 
		 
		 switch(dato_leido){
 41e:	e8 2f       	mov	r30, r24
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	e0 31       	cpi	r30, 0x10	; 16
 424:	f1 05       	cpc	r31, r1
 426:	f0 f6       	brcc	.-68     	; 0x3e4 <main+0x4>
 428:	ec 5c       	subi	r30, 0xCC	; 204
 42a:	ff 4f       	sbci	r31, 0xFF	; 255
 42c:	0c 94 ca 02 	jmp	0x594	; 0x594 <__tablejump2__>
			 case 0:
				 Lcd_Set_Cursor(1,10);
 430:	6a e0       	ldi	r22, 0x0A	; 10
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("00");
 438:	88 e0       	ldi	r24, 0x08	; 8
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 440:	d1 cf       	rjmp	.-94     	; 0x3e4 <main+0x4>
				 
			 case 1:
				 Lcd_Set_Cursor(1,10);
 442:	6a e0       	ldi	r22, 0x0A	; 10
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("01");
 44a:	8b e0       	ldi	r24, 0x0B	; 11
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 452:	c8 cf       	rjmp	.-112    	; 0x3e4 <main+0x4>
				 
			 case 2:
				 Lcd_Set_Cursor(1,10);
 454:	6a e0       	ldi	r22, 0x0A	; 10
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("02");
 45c:	8e e0       	ldi	r24, 0x0E	; 14
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 464:	bf cf       	rjmp	.-130    	; 0x3e4 <main+0x4>
			 
			 case 3:
				 Lcd_Set_Cursor(1,10);
 466:	6a e0       	ldi	r22, 0x0A	; 10
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("03");
 46e:	81 e1       	ldi	r24, 0x11	; 17
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 476:	b6 cf       	rjmp	.-148    	; 0x3e4 <main+0x4>
				 
			case 4:
				 Lcd_Set_Cursor(1,10);
 478:	6a e0       	ldi	r22, 0x0A	; 10
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("04");
 480:	84 e1       	ldi	r24, 0x14	; 20
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 488:	ad cf       	rjmp	.-166    	; 0x3e4 <main+0x4>
				 
			 case 5:
				 Lcd_Set_Cursor(1,10);
 48a:	6a e0       	ldi	r22, 0x0A	; 10
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("05");
 492:	87 e1       	ldi	r24, 0x17	; 23
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 49a:	a4 cf       	rjmp	.-184    	; 0x3e4 <main+0x4>
				 
			 case 6:
				 Lcd_Set_Cursor(1,10);
 49c:	6a e0       	ldi	r22, 0x0A	; 10
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("06");
 4a4:	8a e1       	ldi	r24, 0x1A	; 26
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 4ac:	9b cf       	rjmp	.-202    	; 0x3e4 <main+0x4>
			 
			 case 7:
				 Lcd_Set_Cursor(1,10);
 4ae:	6a e0       	ldi	r22, 0x0A	; 10
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("07");
 4b6:	8d e1       	ldi	r24, 0x1D	; 29
 4b8:	91 e0       	ldi	r25, 0x01	; 1
 4ba:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 4be:	92 cf       	rjmp	.-220    	; 0x3e4 <main+0x4>
				 
			case 8:
				Lcd_Set_Cursor(1,10);
 4c0:	6a e0       	ldi	r22, 0x0A	; 10
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("08");
 4c8:	80 e2       	ldi	r24, 0x20	; 32
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 4d0:	89 cf       	rjmp	.-238    	; 0x3e4 <main+0x4>
			
			case 9:
				Lcd_Set_Cursor(1,10);
 4d2:	6a e0       	ldi	r22, 0x0A	; 10
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("09");
 4da:	83 e2       	ldi	r24, 0x23	; 35
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 4e2:	80 cf       	rjmp	.-256    	; 0x3e4 <main+0x4>
			
			case 10:
				Lcd_Set_Cursor(1,10);
 4e4:	6a e0       	ldi	r22, 0x0A	; 10
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("10");
 4ec:	86 e2       	ldi	r24, 0x26	; 38
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 4f4:	77 cf       	rjmp	.-274    	; 0x3e4 <main+0x4>
			
			case 11:
				Lcd_Set_Cursor(1,10);
 4f6:	6a e0       	ldi	r22, 0x0A	; 10
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("11");
 4fe:	89 e2       	ldi	r24, 0x29	; 41
 500:	91 e0       	ldi	r25, 0x01	; 1
 502:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 506:	6e cf       	rjmp	.-292    	; 0x3e4 <main+0x4>
			
			case 12:
				Lcd_Set_Cursor(1,10);
 508:	6a e0       	ldi	r22, 0x0A	; 10
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("12");
 510:	8c e2       	ldi	r24, 0x2C	; 44
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 518:	65 cf       	rjmp	.-310    	; 0x3e4 <main+0x4>
			
			case 13:
				Lcd_Set_Cursor(1,10);
 51a:	6a e0       	ldi	r22, 0x0A	; 10
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("13");
 522:	8f e2       	ldi	r24, 0x2F	; 47
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 52a:	5c cf       	rjmp	.-328    	; 0x3e4 <main+0x4>
			
			case 14:
				Lcd_Set_Cursor(1,10);
 52c:	6a e0       	ldi	r22, 0x0A	; 10
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("14");
 534:	82 e3       	ldi	r24, 0x32	; 50
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 53c:	53 cf       	rjmp	.-346    	; 0x3e4 <main+0x4>
			
			case 15:
				Lcd_Set_Cursor(1,10);
 53e:	6a e0       	ldi	r22, 0x0A	; 10
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("15");
 546:	85 e3       	ldi	r24, 0x35	; 53
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 54e:	4a cf       	rjmp	.-364    	; 0x3e4 <main+0x4>

00000550 <__udivmodsi4>:
 550:	a1 e2       	ldi	r26, 0x21	; 33
 552:	1a 2e       	mov	r1, r26
 554:	aa 1b       	sub	r26, r26
 556:	bb 1b       	sub	r27, r27
 558:	fd 01       	movw	r30, r26
 55a:	0d c0       	rjmp	.+26     	; 0x576 <__udivmodsi4_ep>

0000055c <__udivmodsi4_loop>:
 55c:	aa 1f       	adc	r26, r26
 55e:	bb 1f       	adc	r27, r27
 560:	ee 1f       	adc	r30, r30
 562:	ff 1f       	adc	r31, r31
 564:	a2 17       	cp	r26, r18
 566:	b3 07       	cpc	r27, r19
 568:	e4 07       	cpc	r30, r20
 56a:	f5 07       	cpc	r31, r21
 56c:	20 f0       	brcs	.+8      	; 0x576 <__udivmodsi4_ep>
 56e:	a2 1b       	sub	r26, r18
 570:	b3 0b       	sbc	r27, r19
 572:	e4 0b       	sbc	r30, r20
 574:	f5 0b       	sbc	r31, r21

00000576 <__udivmodsi4_ep>:
 576:	66 1f       	adc	r22, r22
 578:	77 1f       	adc	r23, r23
 57a:	88 1f       	adc	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	1a 94       	dec	r1
 580:	69 f7       	brne	.-38     	; 0x55c <__udivmodsi4_loop>
 582:	60 95       	com	r22
 584:	70 95       	com	r23
 586:	80 95       	com	r24
 588:	90 95       	com	r25
 58a:	9b 01       	movw	r18, r22
 58c:	ac 01       	movw	r20, r24
 58e:	bd 01       	movw	r22, r26
 590:	cf 01       	movw	r24, r30
 592:	08 95       	ret

00000594 <__tablejump2__>:
 594:	ee 0f       	add	r30, r30
 596:	ff 1f       	adc	r31, r31
 598:	05 90       	lpm	r0, Z+
 59a:	f4 91       	lpm	r31, Z
 59c:	e0 2d       	mov	r30, r0
 59e:	09 94       	ijmp

000005a0 <_exit>:
 5a0:	f8 94       	cli

000005a2 <__stop_program>:
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <__stop_program>
