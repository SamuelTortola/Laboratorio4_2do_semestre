
Esclavo 2_botones.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083a  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006da  00000000  00000000  00000abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000316  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  000014b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cd  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000176  00000000  00000000  000018dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:

uint8_t contador = 0;

void setup(void);
void setup(void){
	DDRB = 0b00000000;   //PB0, PB1 como entrada de pulsadores
  90:	14 b8       	out	0x04, r1	; 4
	DDRD = 0b00001111;  //Salida hacia LEDs del contador de 4 bits
  92:	8f e0       	ldi	r24, 0x0F	; 15
  94:	8a b9       	out	0x0a, r24	; 10

	PORTB = 0b00000011;		//pull up encendido en PB0 y PB1 
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	85 b9       	out	0x05, r24	; 5
	PORTD = 0b00000000;   //Iniciamos los leds apagados
  9a:	1b b8       	out	0x0b, r1	; 11
	
	UCSR0B = 0;  //Usar los pines TX y RX como digitales
  9c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	PCMSK0 |= (1 << 0)|(1 << 1); //PCINT0, PCINT1
  a0:	eb e6       	ldi	r30, 0x6B	; 107
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	80 83       	st	Z, r24
	PCICR |= (1 << 0); //Mascara de interrupción
  aa:	e8 e6       	ldi	r30, 0x68	; 104
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	80 83       	st	Z, r24
	
	sei(); //Activar interrupciones
  b4:	78 94       	sei
  b6:	08 95       	ret

000000b8 <main>:
}

int main(void)
{
    setup();
  b8:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8f e3       	ldi	r24, 0x3F	; 63
  be:	9c e9       	ldi	r25, 0x9C	; 156
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x8>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0xe>
  c6:	00 00       	nop
  c8:	f9 cf       	rjmp	.-14     	; 0xbc <main+0x4>

000000ca <__vector_3>:
		
    }
}


ISR(PCINT0_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
	
	
	if(((PINB) & (1<<0)) == 0){   //Condicional que compara si se presionó el pulsador 1
  da:	18 99       	sbic	0x03, 0	; 3
  dc:	1f c0       	rjmp	.+62     	; 0x11c <__vector_3+0x52>
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	89 ef       	ldi	r24, 0xF9	; 249
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <__vector_3+0x1a>
  ec:	00 c0       	rjmp	.+0      	; 0xee <__vector_3+0x24>
  ee:	00 00       	nop
		_delay_ms(20);  //antirrebote
		contador ++;
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if (contador >= 15)
  fa:	8f 30       	cpi	r24, 0x0F	; 15
  fc:	18 f0       	brcs	.+6      	; 0x104 <__vector_3+0x3a>
		{
			contador = 15;
  fe:	8f e0       	ldi	r24, 0x0F	; 15
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		
		PORTD = contador;
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	8b b9       	out	0x0b, r24	; 11
		
		  
		while ((PINB & (1 << PINB0)) == 0)   //While para evitar sumas indebidas
 10a:	06 c0       	rjmp	.+12     	; 0x118 <__vector_3+0x4e>
 10c:	8f e3       	ldi	r24, 0x3F	; 63
 10e:	9c e9       	ldi	r25, 0x9C	; 156
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <__vector_3+0x46>
 114:	00 c0       	rjmp	.+0      	; 0x116 <__vector_3+0x4c>
 116:	00 00       	nop
 118:	18 9b       	sbis	0x03, 0	; 3
 11a:	f8 cf       	rjmp	.-16     	; 0x10c <__vector_3+0x42>
			_delay_ms(10);
		}
		
	}
	
	if(((PINB) & (1<<1)) == 0){   //Condicional que compara si se presionó el pulsador  de start
 11c:	19 99       	sbic	0x03, 1	; 3
 11e:	1e c0       	rjmp	.+60     	; 0x15c <__vector_3+0x92>
 120:	9f ef       	ldi	r25, 0xFF	; 255
 122:	29 ef       	ldi	r18, 0xF9	; 249
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	91 50       	subi	r25, 0x01	; 1
 128:	20 40       	sbci	r18, 0x00	; 0
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <__vector_3+0x5c>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <__vector_3+0x66>
 130:	00 00       	nop
		_delay_ms(20);  //antirrebote
		
		contador --;
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	81 50       	subi	r24, 0x01	; 1
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
			if (contador <= 0)
 13c:	81 11       	cpse	r24, r1
 13e:	02 c0       	rjmp	.+4      	; 0x144 <__vector_3+0x7a>
			{
				contador = 0;
 140:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			PORTD = contador;
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	8b b9       	out	0x0b, r24	; 11
		
		while ((PINB & (1 << PINB1)) == 0)   //While para evitar sumas indebidas
 14a:	06 c0       	rjmp	.+12     	; 0x158 <__vector_3+0x8e>
 14c:	8f e3       	ldi	r24, 0x3F	; 63
 14e:	9c e9       	ldi	r25, 0x9C	; 156
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <__vector_3+0x86>
 154:	00 c0       	rjmp	.+0      	; 0x156 <__vector_3+0x8c>
 156:	00 00       	nop
 158:	19 9b       	sbis	0x03, 1	; 3
 15a:	f8 cf       	rjmp	.-16     	; 0x14c <__vector_3+0x82>
		
	}
	
	
	
}
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
