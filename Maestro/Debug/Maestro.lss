
Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000be8  00000c7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  0080013c  0080013c  00000cb8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f34  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000995  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a30  00000000  00000000  000026f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00003128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051a  00000000  00000000  000032d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000702  00000000  00000000  000037ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003eec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	42 02       	muls	r20, r18
  6a:	4b 02       	muls	r20, r27
  6c:	54 02       	muls	r21, r20
  6e:	5d 02       	muls	r21, r29
  70:	66 02       	muls	r22, r22
  72:	6f 02       	muls	r22, r31
  74:	78 02       	muls	r23, r24
  76:	81 02       	muls	r24, r17
  78:	8a 02       	muls	r24, r26
  7a:	93 02       	muls	r25, r19
  7c:	9c 02       	muls	r25, r28
  7e:	a5 02       	muls	r26, r21
  80:	ae 02       	muls	r26, r30
  82:	b7 02       	muls	r27, r23
  84:	c0 02       	muls	r28, r16
  86:	c9 02       	muls	r28, r25

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
  94:	11 e0       	ldi	r17, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	e8 ee       	ldi	r30, 0xE8	; 232
  9c:	fb e0       	ldi	r31, 0x0B	; 11
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	ac 33       	cpi	r26, 0x3C	; 60
  a6:	b1 07       	cpc	r27, r17
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	ac e3       	ldi	r26, 0x3C	; 60
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
  b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
  b4:	a0 38       	cpi	r26, 0x80	; 128
  b6:	b2 07       	cpc	r27, r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
  ba:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <main>
  be:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <I2C_Config_MASTER>:
	
	I2C_EscByte(dato);   //Envia el dato al esclavo
	I2C_STOP();  //No continua, termina la comunicación y la cierra
	
	
}
  c6:	cf 93       	push	r28
  c8:	c8 2f       	mov	r28, r24
  ca:	9a 01       	movw	r18, r20
  cc:	ab 01       	movw	r20, r22
  ce:	87 b1       	in	r24, 0x07	; 7
  d0:	8f 7c       	andi	r24, 0xCF	; 207
  d2:	87 b9       	out	0x07, r24	; 7
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	74 e2       	ldi	r23, 0x24	; 36
  d8:	84 ef       	ldi	r24, 0xF4	; 244
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__udivmodsi4>
  e0:	ca 01       	movw	r24, r20
  e2:	b9 01       	movw	r22, r18
  e4:	60 51       	subi	r22, 0x10	; 16
  e6:	71 09       	sbc	r23, r1
  e8:	81 09       	sbc	r24, r1
  ea:	91 09       	sbc	r25, r1
  ec:	2c 2f       	mov	r18, r28
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	03 2e       	mov	r0, r19
  f6:	00 0c       	add	r0, r0
  f8:	44 0b       	sbc	r20, r20
  fa:	55 0b       	sbc	r21, r21
  fc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__udivmodsi4>
 100:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 104:	c4 30       	cpi	r28, 0x04	; 4
 106:	79 f0       	breq	.+30     	; 0x126 <I2C_Config_MASTER+0x60>
 108:	18 f4       	brcc	.+6      	; 0x110 <I2C_Config_MASTER+0x4a>
 10a:	c1 30       	cpi	r28, 0x01	; 1
 10c:	31 f0       	breq	.+12     	; 0x11a <I2C_Config_MASTER+0x54>
 10e:	23 c0       	rjmp	.+70     	; 0x156 <I2C_Config_MASTER+0x90>
 110:	c0 31       	cpi	r28, 0x10	; 16
 112:	91 f0       	breq	.+36     	; 0x138 <I2C_Config_MASTER+0x72>
 114:	c0 34       	cpi	r28, 0x40	; 64
 116:	c9 f0       	breq	.+50     	; 0x14a <I2C_Config_MASTER+0x84>
 118:	1e c0       	rjmp	.+60     	; 0x156 <I2C_Config_MASTER+0x90>
 11a:	e9 eb       	ldi	r30, 0xB9	; 185
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	8c 7f       	andi	r24, 0xFC	; 252
 122:	80 83       	st	Z, r24
 124:	1d c0       	rjmp	.+58     	; 0x160 <I2C_Config_MASTER+0x9a>
 126:	e9 eb       	ldi	r30, 0xB9	; 185
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	80 83       	st	Z, r24
 130:	80 81       	ld	r24, Z
 132:	81 60       	ori	r24, 0x01	; 1
 134:	80 83       	st	Z, r24
 136:	14 c0       	rjmp	.+40     	; 0x160 <I2C_Config_MASTER+0x9a>
 138:	e9 eb       	ldi	r30, 0xB9	; 185
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8e 7f       	andi	r24, 0xFE	; 254
 140:	80 83       	st	Z, r24
 142:	80 81       	ld	r24, Z
 144:	82 60       	ori	r24, 0x02	; 2
 146:	80 83       	st	Z, r24
 148:	0b c0       	rjmp	.+22     	; 0x160 <I2C_Config_MASTER+0x9a>
 14a:	e9 eb       	ldi	r30, 0xB9	; 185
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	8d 6f       	ori	r24, 0xFD	; 253
 152:	80 83       	st	Z, r24
 154:	05 c0       	rjmp	.+10     	; 0x160 <I2C_Config_MASTER+0x9a>
 156:	e9 eb       	ldi	r30, 0xB9	; 185
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8c 7f       	andi	r24, 0xFC	; 252
 15e:	80 83       	st	Z, r24
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <I2C_STOP>:
 16a:	84 e9       	ldi	r24, 0x94	; 148
 16c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 170:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 174:	84 fd       	sbrc	r24, 4
 176:	fc cf       	rjmp	.-8      	; 0x170 <I2C_STOP+0x6>
 178:	08 95       	ret

0000017a <I2C_leer_dato>:




// Lee un byte de datos del esclavo I2C
uint8_t I2C_leer_dato(uint8_t direccion_esclavo, uint8_t *dato) {
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 17e:	94 ea       	ldi	r25, 0xA4	; 164
 180:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 184:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 188:	99 23       	and	r25, r25
 18a:	e4 f7       	brge	.-8      	; 0x184 <I2C_leer_dato+0xa>

	// Verificar condición de START
	if ((TWSR & 0xF8) != TW_START) {
 18c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 190:	98 7f       	andi	r25, 0xF8	; 248
 192:	98 30       	cpi	r25, 0x08	; 8
 194:	b1 f5       	brne	.+108    	; 0x202 <I2C_leer_dato+0x88>
		return 1; // Error: No se pudo iniciar la condición de START
	}

	// Enviar dirección del esclavo con bit de lectura
	TWDR = SLA_R(direccion_esclavo);
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 1a2:	84 e8       	ldi	r24, 0x84	; 132
 1a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la transmisión de la dirección
 1a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ac:	88 23       	and	r24, r24
 1ae:	e4 f7       	brge	.-8      	; 0x1a8 <I2C_leer_dato+0x2e>
 1b0:	eb 01       	movw	r28, r22

	// Verificar ACK/NACK de la dirección
	uint8_t twsr_value = TWSR & 0xF8;
 1b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1b6:	88 7f       	andi	r24, 0xF8	; 248
	if (twsr_value == TW_MR_SLA_NACK) {
 1b8:	88 34       	cpi	r24, 0x48	; 72
 1ba:	21 f4       	brne	.+8      	; 0x1c4 <I2C_leer_dato+0x4a>
		I2C_STOP(); // Detener si se recibe un NACK
 1bc:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_STOP>
		return 1; // Error: NACK recibido
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	20 c0       	rjmp	.+64     	; 0x204 <I2C_leer_dato+0x8a>
		} else if (twsr_value != TW_MR_SLA_ACK) {
 1c4:	80 34       	cpi	r24, 0x40	; 64
 1c6:	21 f0       	breq	.+8      	; 0x1d0 <I2C_leer_dato+0x56>
		I2C_STOP(); // Detener si otro estado inesperado
 1c8:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_STOP>
		return 1; // Error: Estado inesperado
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	1a c0       	rjmp	.+52     	; 0x204 <I2C_leer_dato+0x8a>
	}

	// Leer un byte del esclavo
	TWCR = (1 << TWEN) | (1 << TWINT); // Leer sin ACK (NACK)
 1d0:	84 e8       	ldi	r24, 0x84	; 132
 1d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la recepción
 1d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1da:	88 23       	and	r24, r24
 1dc:	e4 f7       	brge	.-8      	; 0x1d6 <I2C_leer_dato+0x5c>

	// Verificar estado de recepción
	twsr_value = TWSR & 0xF8;
 1de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1e2:	88 7f       	andi	r24, 0xF8	; 248
	if (twsr_value != TW_MR_DATA_NACK && twsr_value != TW_MR_DATA_ACK) {
 1e4:	88 35       	cpi	r24, 0x58	; 88
 1e6:	31 f0       	breq	.+12     	; 0x1f4 <I2C_leer_dato+0x7a>
 1e8:	80 35       	cpi	r24, 0x50	; 80
 1ea:	21 f0       	breq	.+8      	; 0x1f4 <I2C_leer_dato+0x7a>
		I2C_STOP(); // Detener si hay error en la recepción
 1ec:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_STOP>
		return 1; // Error en la recepción
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	08 c0       	rjmp	.+16     	; 0x204 <I2C_leer_dato+0x8a>
	}

	// Leer el dato recibido
	*dato = TWDR;
 1f4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1f8:	88 83       	st	Y, r24

	// Generar condición de STOP
      I2C_STOP();
 1fa:	0e 94 b5 00 	call	0x16a	; 0x16a <I2C_STOP>
  
	return  *dato; // Éxito
 1fe:	88 81       	ld	r24, Y
 200:	01 c0       	rjmp	.+2      	; 0x204 <I2C_leer_dato+0x8a>
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete

	// Verificar condición de START
	if ((TWSR & 0xF8) != TW_START) {
		return 1; // Error: No se pudo iniciar la condición de START
 202:	81 e0       	ldi	r24, 0x01	; 1

	// Generar condición de STOP
      I2C_STOP();
  
	return  *dato; // Éxito
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <dato_a_mostrar>:
}


void dato_a_mostrar(char a)
{
	if(a & 1)				//0000 0001, el  a&1 es una operación bitwise, si el primer bit menos signfiativo es 1, la condición es verdadera
 20a:	80 ff       	sbrs	r24, 0
 20c:	04 c0       	rjmp	.+8      	; 0x216 <dato_a_mostrar+0xc>
	PORTD |= (1<<0);
 20e:	9b b1       	in	r25, 0x0b	; 11
 210:	91 60       	ori	r25, 0x01	; 1
 212:	9b b9       	out	0x0b, r25	; 11
 214:	03 c0       	rjmp	.+6      	; 0x21c <dato_a_mostrar+0x12>
	else
	PORTD &= ~(1<<0);
 216:	9b b1       	in	r25, 0x0b	; 11
 218:	9e 7f       	andi	r25, 0xFE	; 254
 21a:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 2)			   //0000 0010, ahora verifica el segundo bit menos significativo, y si es 1, la condición es verdadera
 21c:	81 ff       	sbrs	r24, 1
 21e:	04 c0       	rjmp	.+8      	; 0x228 <dato_a_mostrar+0x1e>
	PORTD |= (1<<1);
 220:	9b b1       	in	r25, 0x0b	; 11
 222:	92 60       	ori	r25, 0x02	; 2
 224:	9b b9       	out	0x0b, r25	; 11
 226:	03 c0       	rjmp	.+6      	; 0x22e <dato_a_mostrar+0x24>
	else
	PORTD &= ~(1<<1);
 228:	9b b1       	in	r25, 0x0b	; 11
 22a:	9d 7f       	andi	r25, 0xFD	; 253
 22c:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 4)				//0000 0100
 22e:	82 ff       	sbrs	r24, 2
 230:	04 c0       	rjmp	.+8      	; 0x23a <dato_a_mostrar+0x30>
	PORTD |= (1<<PORTD2);
 232:	9b b1       	in	r25, 0x0b	; 11
 234:	94 60       	ori	r25, 0x04	; 4
 236:	9b b9       	out	0x0b, r25	; 11
 238:	03 c0       	rjmp	.+6      	; 0x240 <dato_a_mostrar+0x36>
	else
	PORTD &= ~(1<<PORTD2);
 23a:	9b b1       	in	r25, 0x0b	; 11
 23c:	9b 7f       	andi	r25, 0xFB	; 251
 23e:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 8)				//0000 1000
 240:	83 ff       	sbrs	r24, 3
 242:	04 c0       	rjmp	.+8      	; 0x24c <dato_a_mostrar+0x42>
	PORTD |= (1<<PORTD3);
 244:	9b b1       	in	r25, 0x0b	; 11
 246:	98 60       	ori	r25, 0x08	; 8
 248:	9b b9       	out	0x0b, r25	; 11
 24a:	03 c0       	rjmp	.+6      	; 0x252 <dato_a_mostrar+0x48>
	else
	PORTD &= ~(1<<PORTD3);
 24c:	9b b1       	in	r25, 0x0b	; 11
 24e:	97 7f       	andi	r25, 0xF7	; 247
 250:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 16)			    //0001 0000
 252:	84 ff       	sbrs	r24, 4
 254:	04 c0       	rjmp	.+8      	; 0x25e <dato_a_mostrar+0x54>
	PORTD |= (1<<PORTD4);
 256:	9b b1       	in	r25, 0x0b	; 11
 258:	90 61       	ori	r25, 0x10	; 16
 25a:	9b b9       	out	0x0b, r25	; 11
 25c:	03 c0       	rjmp	.+6      	; 0x264 <dato_a_mostrar+0x5a>
	else
	PORTD &= ~(1<<PORTD4);
 25e:	9b b1       	in	r25, 0x0b	; 11
 260:	9f 7e       	andi	r25, 0xEF	; 239
 262:	9b b9       	out	0x0b, r25	; 11

	if(a & 32)			    //0010 0000
 264:	85 ff       	sbrs	r24, 5
 266:	04 c0       	rjmp	.+8      	; 0x270 <dato_a_mostrar+0x66>
	PORTD |= (1<<PORTD5);
 268:	9b b1       	in	r25, 0x0b	; 11
 26a:	90 62       	ori	r25, 0x20	; 32
 26c:	9b b9       	out	0x0b, r25	; 11
 26e:	03 c0       	rjmp	.+6      	; 0x276 <dato_a_mostrar+0x6c>
	else
	PORTD &= ~(1<<PORTD5);
 270:	9b b1       	in	r25, 0x0b	; 11
 272:	9f 7d       	andi	r25, 0xDF	; 223
 274:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 64)			   //0100 0000
 276:	86 ff       	sbrs	r24, 6
 278:	04 c0       	rjmp	.+8      	; 0x282 <dato_a_mostrar+0x78>
	PORTD |= (1<<PORTD6);
 27a:	9b b1       	in	r25, 0x0b	; 11
 27c:	90 64       	ori	r25, 0x40	; 64
 27e:	9b b9       	out	0x0b, r25	; 11
 280:	03 c0       	rjmp	.+6      	; 0x288 <dato_a_mostrar+0x7e>
	else
	PORTD &= ~(1<<PORTD6);
 282:	9b b1       	in	r25, 0x0b	; 11
 284:	9f 7b       	andi	r25, 0xBF	; 191
 286:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 128)			   //1000 0000
 288:	88 23       	and	r24, r24
 28a:	24 f4       	brge	.+8      	; 0x294 <dato_a_mostrar+0x8a>
	PORTD |= (1<<PORTD7);
 28c:	8b b1       	in	r24, 0x0b	; 11
 28e:	80 68       	ori	r24, 0x80	; 128
 290:	8b b9       	out	0x0b, r24	; 11
 292:	08 95       	ret
	else
	PORTD &= ~(1<<PORTD7);
 294:	8b b1       	in	r24, 0x0b	; 11
 296:	8f 77       	andi	r24, 0x7F	; 127
 298:	8b b9       	out	0x0b, r24	; 11
 29a:	08 95       	ret

0000029c <inicio>:
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
}

void inicio(char a)
{
	PORTB &= ~(1<<PORTB0);  //RS = 0, se le indica que es modo comando
 29c:	95 b1       	in	r25, 0x05	; 5
 29e:	9e 7f       	andi	r25, 0xFE	; 254
 2a0:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(a);
 2a2:	0e 94 05 01 	call	0x20a	; 0x20a <dato_a_mostrar>
	PORTB |= (1<<PORTB1);    // E = 1, se le indica que envie los datos
 2a6:	85 b1       	in	r24, 0x05	; 5
 2a8:	82 60       	ori	r24, 0x02	; 2
 2aa:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	8f e9       	ldi	r24, 0x9F	; 159
 2ae:	9f e0       	ldi	r25, 0x0F	; 15
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <inicio+0x14>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <inicio+0x1a>
 2b6:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);   // E = 0,  se le indica que se cierra el envio de datos
 2b8:	85 b1       	in	r24, 0x05	; 5
 2ba:	8d 7f       	andi	r24, 0xFD	; 253
 2bc:	85 b9       	out	0x05, r24	; 5
 2be:	8f e9       	ldi	r24, 0x9F	; 159
 2c0:	9f e0       	ldi	r25, 0x0F	; 15
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <inicio+0x26>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <inicio+0x2c>
 2c8:	00 00       	nop
 2ca:	08 95       	ret

000002cc <Lcd_Init8bits>:
#include "LCD.h"

void Lcd_Init8bits()
{
	PORTB &= ~(1<<PORTB0);   //RS = 0, se le indica que es modo comando
 2cc:	85 b1       	in	r24, 0x05	; 5
 2ce:	8e 7f       	andi	r24, 0xFE	; 254
 2d0:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB1);   //E = 0
 2d2:	85 b1       	in	r24, 0x05	; 5
 2d4:	8d 7f       	andi	r24, 0xFD	; 253
 2d6:	85 b9       	out	0x05, r24	; 5
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	89 ef       	ldi	r24, 0xF9	; 249
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	90 40       	sbci	r25, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <Lcd_Init8bits+0x12>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <Lcd_Init8bits+0x1c>
 2e8:	00 00       	nop
	_delay_ms(20);     //Pequeños delay que indica el fabricante del LCD
	inicio(0x30);     //Comando que se repite 3 veces, que indica el fabricante de la LCD
 2ea:	80 e3       	ldi	r24, 0x30	; 48
 2ec:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
 2f0:	8f e1       	ldi	r24, 0x1F	; 31
 2f2:	9e e4       	ldi	r25, 0x4E	; 78
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <Lcd_Init8bits+0x28>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <Lcd_Init8bits+0x2e>
 2fa:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 2fc:	80 e3       	ldi	r24, 0x30	; 48
 2fe:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
 302:	8f e1       	ldi	r24, 0x1F	; 31
 304:	9e e4       	ldi	r25, 0x4E	; 78
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <Lcd_Init8bits+0x3a>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <Lcd_Init8bits+0x40>
 30c:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 30e:	80 e3       	ldi	r24, 0x30	; 48
 310:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
 314:	8f e3       	ldi	r24, 0x3F	; 63
 316:	9c e9       	ldi	r25, 0x9C	; 156
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <Lcd_Init8bits+0x4c>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <Lcd_Init8bits+0x52>
 31e:	00 00       	nop
	_delay_ms(10);

	inicio(0x38);  //Comando que indica el fabricante del LCD, usando la matriz de 5X8
 320:	88 e3       	ldi	r24, 0x38	; 56
 322:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
	inicio(0x0C);  //Comando que indica el fabricante del LCD, display encendido
 326:	8c e0       	ldi	r24, 0x0C	; 12
 328:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
	inicio(0x01);  //Comando que indica el fabricante del LCD, Limpiar LCD
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
 332:	86 e0       	ldi	r24, 0x06	; 6
 334:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
 338:	08 95       	ret

0000033a <Lcd_Clear>:



void Lcd_Clear()    //Limpia la pantalla LCD
{
	inicio(1);  //Comando dado por el fabricante de la LCD
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
 340:	08 95       	ret

00000342 <Lcd_Set_Cursor>:



void Lcd_Set_Cursor(char a, char b)
{
	if(a == 0)
 342:	81 11       	cpse	r24, r1
 344:	05 c0       	rjmp	.+10     	; 0x350 <Lcd_Set_Cursor+0xe>
	inicio(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna
 346:	80 e8       	ldi	r24, 0x80	; 128
 348:	86 0f       	add	r24, r22
 34a:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
 34e:	08 95       	ret
	
	else if(a == 1)
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	21 f4       	brne	.+8      	; 0x35c <Lcd_Set_Cursor+0x1a>
	inicio(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
 354:	80 ec       	ldi	r24, 0xC0	; 192
 356:	86 0f       	add	r24, r22
 358:	0e 94 4e 01 	call	0x29c	; 0x29c <inicio>
 35c:	08 95       	ret

0000035e <Lcd_Write_Char>:
}


void Lcd_Write_Char(char data)
{
	PORTB |= (1<<PORTB0);        // RS = 1, se le indica que esta en modo caracter
 35e:	95 b1       	in	r25, 0x05	; 5
 360:	91 60       	ori	r25, 0x01	; 1
 362:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(data);             //Escribir el caracter
 364:	0e 94 05 01 	call	0x20a	; 0x20a <dato_a_mostrar>
	PORTB |= (1<<PORTB1);       // E = 1, enviar el dato
 368:	85 b1       	in	r24, 0x05	; 5
 36a:	82 60       	ori	r24, 0x02	; 2
 36c:	85 b9       	out	0x05, r24	; 5
 36e:	8f e9       	ldi	r24, 0x9F	; 159
 370:	9f e0       	ldi	r25, 0x0F	; 15
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <Lcd_Write_Char+0x14>
 376:	00 c0       	rjmp	.+0      	; 0x378 <Lcd_Write_Char+0x1a>
 378:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);    // E = 0
 37a:	85 b1       	in	r24, 0x05	; 5
 37c:	8d 7f       	andi	r24, 0xFD	; 253
 37e:	85 b9       	out	0x05, r24	; 5
 380:	8f e9       	ldi	r24, 0x9F	; 159
 382:	9f e0       	ldi	r25, 0x0F	; 15
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <Lcd_Write_Char+0x26>
 388:	00 c0       	rjmp	.+0      	; 0x38a <Lcd_Write_Char+0x2c>
 38a:	00 00       	nop
 38c:	08 95       	ret

0000038e <Lcd_Write_String>:
	_delay_ms(1);
}


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	8c 01       	movw	r16, r24
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 398:	c0 e0       	ldi	r28, 0x00	; 0
 39a:	d0 e0       	ldi	r29, 0x00	; 0
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <Lcd_Write_String+0x16>
	Lcd_Write_Char(a[i]);
 39e:	0e 94 af 01 	call	0x35e	; 0x35e <Lcd_Write_Char>


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 3a2:	21 96       	adiw	r28, 0x01	; 1
 3a4:	f8 01       	movw	r30, r16
 3a6:	ec 0f       	add	r30, r28
 3a8:	fd 1f       	adc	r31, r29
 3aa:	80 81       	ld	r24, Z
 3ac:	81 11       	cpse	r24, r1
 3ae:	f7 cf       	rjmp	.-18     	; 0x39e <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	08 95       	ret

000003ba <setup>:
char buffer[64];  // Buffer para las cadenas de caracteres a mostrar en el LCD


void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
 3ba:	f8 94       	cli
	DDRD = 0xFF;  //Puerto D como salida
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;  //Puerto B como salida
 3c0:	84 b9       	out	0x04, r24	; 4
	
	
	UCSR0B = 0;  //Usar los pines TX y RX como digitales
 3c2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	Lcd_Init8bits();   //Iniciar pantalla LCD
 3c6:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lcd_Init8bits>
	Lcd_Clear();
 3ca:	0e 94 9d 01 	call	0x33a	; 0x33a <Lcd_Clear>
	
	I2C_Config_MASTER(4, 200);
 3ce:	48 ec       	ldi	r20, 0xC8	; 200
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	0e 94 63 00 	call	0xc6	; 0xc6 <I2C_Config_MASTER>
	
	sei(); //Activar interrupciones
 3dc:	78 94       	sei
 3de:	08 95       	ret

000003e0 <main>:
}


int main(void)
{
   setup();
 3e0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <setup>
 3e4:	8f e3       	ldi	r24, 0x3F	; 63
 3e6:	9c e9       	ldi	r25, 0x9C	; 156
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <main+0x8>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0xe>
 3ee:	00 00       	nop
    while (1) 
    {
		  _delay_ms(10);
		  Lcd_Set_Cursor(0,3);
 3f0:	63 e0       	ldi	r22, 0x03	; 3
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
		  Lcd_Write_String("S1:");
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	91 e0       	ldi	r25, 0x01	; 1
 3fc:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
		  Lcd_Set_Cursor(0,10);
 400:	6a e0       	ldi	r22, 0x0A	; 10
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
		  Lcd_Write_String("S2:");
 408:	84 e0       	ldi	r24, 0x04	; 4
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
		
		//  I2C_esclavo(1, esclavo1); //Por si se desea enviar un valor a algún esclavo
		  
		  
		  dato_leido_1 = I2C_leer_dato(esclavo1, &dato1);
 410:	6c e3       	ldi	r22, 0x3C	; 60
 412:	71 e0       	ldi	r23, 0x01	; 1
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	0e 94 bd 00 	call	0x17a	; 0x17a <I2C_leer_dato>
 41a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <dato_leido_1>
		  dato_leido_2 = I2C_leer_dato(esclavo2, &dato2);
 41e:	6d e3       	ldi	r22, 0x3D	; 61
 420:	71 e0       	ldi	r23, 0x01	; 1
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	0e 94 bd 00 	call	0x17a	; 0x17a <I2C_leer_dato>
 428:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <dato_leido_2>
		 
		 Lcd_Set_Cursor(1,3);
 42c:	63 e0       	ldi	r22, 0x03	; 3
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
		 snprintf(buffer, 16, "%d", dato_leido_2);
 434:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <dato_leido_2>
 438:	1f 92       	push	r1
 43a:	8f 93       	push	r24
 43c:	88 e0       	ldi	r24, 0x08	; 8
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	9f 93       	push	r25
 442:	8f 93       	push	r24
 444:	1f 92       	push	r1
 446:	80 e1       	ldi	r24, 0x10	; 16
 448:	8f 93       	push	r24
 44a:	8f e3       	ldi	r24, 0x3F	; 63
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	9f 93       	push	r25
 450:	8f 93       	push	r24
 452:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <snprintf>
		 Lcd_Write_String(buffer);
 456:	8f e3       	ldi	r24, 0x3F	; 63
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
		
	
		 
		 switch(dato_leido_1){
 45e:	8d b7       	in	r24, 0x3d	; 61
 460:	9e b7       	in	r25, 0x3e	; 62
 462:	08 96       	adiw	r24, 0x08	; 8
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	f8 94       	cli
 468:	9e bf       	out	0x3e, r25	; 62
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	8d bf       	out	0x3d, r24	; 61
 46e:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <dato_leido_1>
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	e0 31       	cpi	r30, 0x10	; 16
 476:	f1 05       	cpc	r31, r1
 478:	08 f0       	brcs	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 47a:	b4 cf       	rjmp	.-152    	; 0x3e4 <main+0x4>
 47c:	ec 5c       	subi	r30, 0xCC	; 204
 47e:	ff 4f       	sbci	r31, 0xFF	; 255
 480:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__tablejump2__>
			 case 0:
				 Lcd_Set_Cursor(1,10);
 484:	6a e0       	ldi	r22, 0x0A	; 10
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("00");
 48c:	8b e0       	ldi	r24, 0x0B	; 11
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 494:	a7 cf       	rjmp	.-178    	; 0x3e4 <main+0x4>
				 
			 case 1:
				 Lcd_Set_Cursor(1,10);
 496:	6a e0       	ldi	r22, 0x0A	; 10
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("01");
 49e:	8e e0       	ldi	r24, 0x0E	; 14
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 4a6:	9e cf       	rjmp	.-196    	; 0x3e4 <main+0x4>
				 
			 case 2:
				 Lcd_Set_Cursor(1,10);
 4a8:	6a e0       	ldi	r22, 0x0A	; 10
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("02");
 4b0:	81 e1       	ldi	r24, 0x11	; 17
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 4b8:	95 cf       	rjmp	.-214    	; 0x3e4 <main+0x4>
			 
			 case 3:
				 Lcd_Set_Cursor(1,10);
 4ba:	6a e0       	ldi	r22, 0x0A	; 10
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("03");
 4c2:	84 e1       	ldi	r24, 0x14	; 20
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 4ca:	8c cf       	rjmp	.-232    	; 0x3e4 <main+0x4>
				 
			case 4:
				 Lcd_Set_Cursor(1,10);
 4cc:	6a e0       	ldi	r22, 0x0A	; 10
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("04");
 4d4:	87 e1       	ldi	r24, 0x17	; 23
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 4dc:	83 cf       	rjmp	.-250    	; 0x3e4 <main+0x4>
				 
			 case 5:
				 Lcd_Set_Cursor(1,10);
 4de:	6a e0       	ldi	r22, 0x0A	; 10
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("05");
 4e6:	8a e1       	ldi	r24, 0x1A	; 26
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 4ee:	7a cf       	rjmp	.-268    	; 0x3e4 <main+0x4>
				 
			 case 6:
				 Lcd_Set_Cursor(1,10);
 4f0:	6a e0       	ldi	r22, 0x0A	; 10
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("06");
 4f8:	8d e1       	ldi	r24, 0x1D	; 29
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 500:	71 cf       	rjmp	.-286    	; 0x3e4 <main+0x4>
			 
			 case 7:
				 Lcd_Set_Cursor(1,10);
 502:	6a e0       	ldi	r22, 0x0A	; 10
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				 Lcd_Write_String("07");
 50a:	80 e2       	ldi	r24, 0x20	; 32
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				 break;
 512:	68 cf       	rjmp	.-304    	; 0x3e4 <main+0x4>
				 
			case 8:
				Lcd_Set_Cursor(1,10);
 514:	6a e0       	ldi	r22, 0x0A	; 10
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("08");
 51c:	83 e2       	ldi	r24, 0x23	; 35
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 524:	5f cf       	rjmp	.-322    	; 0x3e4 <main+0x4>
			
			case 9:
				Lcd_Set_Cursor(1,10);
 526:	6a e0       	ldi	r22, 0x0A	; 10
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("09");
 52e:	86 e2       	ldi	r24, 0x26	; 38
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 536:	56 cf       	rjmp	.-340    	; 0x3e4 <main+0x4>
			
			case 10:
				Lcd_Set_Cursor(1,10);
 538:	6a e0       	ldi	r22, 0x0A	; 10
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("10");
 540:	89 e2       	ldi	r24, 0x29	; 41
 542:	91 e0       	ldi	r25, 0x01	; 1
 544:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 548:	4d cf       	rjmp	.-358    	; 0x3e4 <main+0x4>
			
			case 11:
				Lcd_Set_Cursor(1,10);
 54a:	6a e0       	ldi	r22, 0x0A	; 10
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("11");
 552:	8c e2       	ldi	r24, 0x2C	; 44
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 55a:	44 cf       	rjmp	.-376    	; 0x3e4 <main+0x4>
			
			case 12:
				Lcd_Set_Cursor(1,10);
 55c:	6a e0       	ldi	r22, 0x0A	; 10
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("12");
 564:	8f e2       	ldi	r24, 0x2F	; 47
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 56c:	3b cf       	rjmp	.-394    	; 0x3e4 <main+0x4>
			
			case 13:
				Lcd_Set_Cursor(1,10);
 56e:	6a e0       	ldi	r22, 0x0A	; 10
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("13");
 576:	82 e3       	ldi	r24, 0x32	; 50
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 57e:	32 cf       	rjmp	.-412    	; 0x3e4 <main+0x4>
			
			case 14:
				Lcd_Set_Cursor(1,10);
 580:	6a e0       	ldi	r22, 0x0A	; 10
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("14");
 588:	85 e3       	ldi	r24, 0x35	; 53
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 590:	29 cf       	rjmp	.-430    	; 0x3e4 <main+0x4>
			
			case 15:
				Lcd_Set_Cursor(1,10);
 592:	6a e0       	ldi	r22, 0x0A	; 10
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	0e 94 a1 01 	call	0x342	; 0x342 <Lcd_Set_Cursor>
				Lcd_Write_String("15");
 59a:	88 e3       	ldi	r24, 0x38	; 56
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Write_String>
				break;
 5a2:	20 cf       	rjmp	.-448    	; 0x3e4 <main+0x4>

000005a4 <__udivmodsi4>:
 5a4:	a1 e2       	ldi	r26, 0x21	; 33
 5a6:	1a 2e       	mov	r1, r26
 5a8:	aa 1b       	sub	r26, r26
 5aa:	bb 1b       	sub	r27, r27
 5ac:	fd 01       	movw	r30, r26
 5ae:	0d c0       	rjmp	.+26     	; 0x5ca <__udivmodsi4_ep>

000005b0 <__udivmodsi4_loop>:
 5b0:	aa 1f       	adc	r26, r26
 5b2:	bb 1f       	adc	r27, r27
 5b4:	ee 1f       	adc	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	a2 17       	cp	r26, r18
 5ba:	b3 07       	cpc	r27, r19
 5bc:	e4 07       	cpc	r30, r20
 5be:	f5 07       	cpc	r31, r21
 5c0:	20 f0       	brcs	.+8      	; 0x5ca <__udivmodsi4_ep>
 5c2:	a2 1b       	sub	r26, r18
 5c4:	b3 0b       	sbc	r27, r19
 5c6:	e4 0b       	sbc	r30, r20
 5c8:	f5 0b       	sbc	r31, r21

000005ca <__udivmodsi4_ep>:
 5ca:	66 1f       	adc	r22, r22
 5cc:	77 1f       	adc	r23, r23
 5ce:	88 1f       	adc	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	1a 94       	dec	r1
 5d4:	69 f7       	brne	.-38     	; 0x5b0 <__udivmodsi4_loop>
 5d6:	60 95       	com	r22
 5d8:	70 95       	com	r23
 5da:	80 95       	com	r24
 5dc:	90 95       	com	r25
 5de:	9b 01       	movw	r18, r22
 5e0:	ac 01       	movw	r20, r24
 5e2:	bd 01       	movw	r22, r26
 5e4:	cf 01       	movw	r24, r30
 5e6:	08 95       	ret

000005e8 <__tablejump2__>:
 5e8:	ee 0f       	add	r30, r30
 5ea:	ff 1f       	adc	r31, r31
 5ec:	05 90       	lpm	r0, Z+
 5ee:	f4 91       	lpm	r31, Z
 5f0:	e0 2d       	mov	r30, r0
 5f2:	09 94       	ijmp

000005f4 <snprintf>:
 5f4:	ae e0       	ldi	r26, 0x0E	; 14
 5f6:	b0 e0       	ldi	r27, 0x00	; 0
 5f8:	e0 e0       	ldi	r30, 0x00	; 0
 5fa:	f3 e0       	ldi	r31, 0x03	; 3
 5fc:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__prologue_saves__+0x1c>
 600:	0d 89       	ldd	r16, Y+21	; 0x15
 602:	1e 89       	ldd	r17, Y+22	; 0x16
 604:	8f 89       	ldd	r24, Y+23	; 0x17
 606:	98 8d       	ldd	r25, Y+24	; 0x18
 608:	26 e0       	ldi	r18, 0x06	; 6
 60a:	2c 83       	std	Y+4, r18	; 0x04
 60c:	1a 83       	std	Y+2, r17	; 0x02
 60e:	09 83       	std	Y+1, r16	; 0x01
 610:	97 ff       	sbrs	r25, 7
 612:	02 c0       	rjmp	.+4      	; 0x618 <snprintf+0x24>
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	90 e8       	ldi	r25, 0x80	; 128
 618:	01 97       	sbiw	r24, 0x01	; 1
 61a:	9e 83       	std	Y+6, r25	; 0x06
 61c:	8d 83       	std	Y+5, r24	; 0x05
 61e:	ae 01       	movw	r20, r28
 620:	45 5e       	subi	r20, 0xE5	; 229
 622:	5f 4f       	sbci	r21, 0xFF	; 255
 624:	69 8d       	ldd	r22, Y+25	; 0x19
 626:	7a 8d       	ldd	r23, Y+26	; 0x1a
 628:	ce 01       	movw	r24, r28
 62a:	01 96       	adiw	r24, 0x01	; 1
 62c:	0e 94 2a 03 	call	0x654	; 0x654 <vfprintf>
 630:	4d 81       	ldd	r20, Y+5	; 0x05
 632:	5e 81       	ldd	r21, Y+6	; 0x06
 634:	57 fd       	sbrc	r21, 7
 636:	0a c0       	rjmp	.+20     	; 0x64c <snprintf+0x58>
 638:	2f 81       	ldd	r18, Y+7	; 0x07
 63a:	38 85       	ldd	r19, Y+8	; 0x08
 63c:	42 17       	cp	r20, r18
 63e:	53 07       	cpc	r21, r19
 640:	0c f4       	brge	.+2      	; 0x644 <snprintf+0x50>
 642:	9a 01       	movw	r18, r20
 644:	f8 01       	movw	r30, r16
 646:	e2 0f       	add	r30, r18
 648:	f3 1f       	adc	r31, r19
 64a:	10 82       	st	Z, r1
 64c:	2e 96       	adiw	r28, 0x0e	; 14
 64e:	e4 e0       	ldi	r30, 0x04	; 4
 650:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__epilogue_restores__+0x1c>

00000654 <vfprintf>:
 654:	ab e0       	ldi	r26, 0x0B	; 11
 656:	b0 e0       	ldi	r27, 0x00	; 0
 658:	e0 e3       	ldi	r30, 0x30	; 48
 65a:	f3 e0       	ldi	r31, 0x03	; 3
 65c:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__prologue_saves__>
 660:	6c 01       	movw	r12, r24
 662:	7b 01       	movw	r14, r22
 664:	8a 01       	movw	r16, r20
 666:	fc 01       	movw	r30, r24
 668:	17 82       	std	Z+7, r1	; 0x07
 66a:	16 82       	std	Z+6, r1	; 0x06
 66c:	83 81       	ldd	r24, Z+3	; 0x03
 66e:	81 ff       	sbrs	r24, 1
 670:	cc c1       	rjmp	.+920    	; 0xa0a <__stack+0x10b>
 672:	ce 01       	movw	r24, r28
 674:	01 96       	adiw	r24, 0x01	; 1
 676:	3c 01       	movw	r6, r24
 678:	f6 01       	movw	r30, r12
 67a:	93 81       	ldd	r25, Z+3	; 0x03
 67c:	f7 01       	movw	r30, r14
 67e:	93 fd       	sbrc	r25, 3
 680:	85 91       	lpm	r24, Z+
 682:	93 ff       	sbrs	r25, 3
 684:	81 91       	ld	r24, Z+
 686:	7f 01       	movw	r14, r30
 688:	88 23       	and	r24, r24
 68a:	09 f4       	brne	.+2      	; 0x68e <vfprintf+0x3a>
 68c:	ba c1       	rjmp	.+884    	; 0xa02 <__stack+0x103>
 68e:	85 32       	cpi	r24, 0x25	; 37
 690:	39 f4       	brne	.+14     	; 0x6a0 <vfprintf+0x4c>
 692:	93 fd       	sbrc	r25, 3
 694:	85 91       	lpm	r24, Z+
 696:	93 ff       	sbrs	r25, 3
 698:	81 91       	ld	r24, Z+
 69a:	7f 01       	movw	r14, r30
 69c:	85 32       	cpi	r24, 0x25	; 37
 69e:	29 f4       	brne	.+10     	; 0x6aa <vfprintf+0x56>
 6a0:	b6 01       	movw	r22, r12
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 6a8:	e7 cf       	rjmp	.-50     	; 0x678 <vfprintf+0x24>
 6aa:	91 2c       	mov	r9, r1
 6ac:	21 2c       	mov	r2, r1
 6ae:	31 2c       	mov	r3, r1
 6b0:	ff e1       	ldi	r31, 0x1F	; 31
 6b2:	f3 15       	cp	r31, r3
 6b4:	d8 f0       	brcs	.+54     	; 0x6ec <vfprintf+0x98>
 6b6:	8b 32       	cpi	r24, 0x2B	; 43
 6b8:	79 f0       	breq	.+30     	; 0x6d8 <vfprintf+0x84>
 6ba:	38 f4       	brcc	.+14     	; 0x6ca <vfprintf+0x76>
 6bc:	80 32       	cpi	r24, 0x20	; 32
 6be:	79 f0       	breq	.+30     	; 0x6de <vfprintf+0x8a>
 6c0:	83 32       	cpi	r24, 0x23	; 35
 6c2:	a1 f4       	brne	.+40     	; 0x6ec <vfprintf+0x98>
 6c4:	23 2d       	mov	r18, r3
 6c6:	20 61       	ori	r18, 0x10	; 16
 6c8:	1d c0       	rjmp	.+58     	; 0x704 <vfprintf+0xb0>
 6ca:	8d 32       	cpi	r24, 0x2D	; 45
 6cc:	61 f0       	breq	.+24     	; 0x6e6 <vfprintf+0x92>
 6ce:	80 33       	cpi	r24, 0x30	; 48
 6d0:	69 f4       	brne	.+26     	; 0x6ec <vfprintf+0x98>
 6d2:	23 2d       	mov	r18, r3
 6d4:	21 60       	ori	r18, 0x01	; 1
 6d6:	16 c0       	rjmp	.+44     	; 0x704 <vfprintf+0xb0>
 6d8:	83 2d       	mov	r24, r3
 6da:	82 60       	ori	r24, 0x02	; 2
 6dc:	38 2e       	mov	r3, r24
 6de:	e3 2d       	mov	r30, r3
 6e0:	e4 60       	ori	r30, 0x04	; 4
 6e2:	3e 2e       	mov	r3, r30
 6e4:	2a c0       	rjmp	.+84     	; 0x73a <vfprintf+0xe6>
 6e6:	f3 2d       	mov	r31, r3
 6e8:	f8 60       	ori	r31, 0x08	; 8
 6ea:	1d c0       	rjmp	.+58     	; 0x726 <vfprintf+0xd2>
 6ec:	37 fc       	sbrc	r3, 7
 6ee:	2d c0       	rjmp	.+90     	; 0x74a <vfprintf+0xf6>
 6f0:	20 ed       	ldi	r18, 0xD0	; 208
 6f2:	28 0f       	add	r18, r24
 6f4:	2a 30       	cpi	r18, 0x0A	; 10
 6f6:	40 f0       	brcs	.+16     	; 0x708 <vfprintf+0xb4>
 6f8:	8e 32       	cpi	r24, 0x2E	; 46
 6fa:	b9 f4       	brne	.+46     	; 0x72a <vfprintf+0xd6>
 6fc:	36 fc       	sbrc	r3, 6
 6fe:	81 c1       	rjmp	.+770    	; 0xa02 <__stack+0x103>
 700:	23 2d       	mov	r18, r3
 702:	20 64       	ori	r18, 0x40	; 64
 704:	32 2e       	mov	r3, r18
 706:	19 c0       	rjmp	.+50     	; 0x73a <vfprintf+0xe6>
 708:	36 fe       	sbrs	r3, 6
 70a:	06 c0       	rjmp	.+12     	; 0x718 <vfprintf+0xc4>
 70c:	8a e0       	ldi	r24, 0x0A	; 10
 70e:	98 9e       	mul	r9, r24
 710:	20 0d       	add	r18, r0
 712:	11 24       	eor	r1, r1
 714:	92 2e       	mov	r9, r18
 716:	11 c0       	rjmp	.+34     	; 0x73a <vfprintf+0xe6>
 718:	ea e0       	ldi	r30, 0x0A	; 10
 71a:	2e 9e       	mul	r2, r30
 71c:	20 0d       	add	r18, r0
 71e:	11 24       	eor	r1, r1
 720:	22 2e       	mov	r2, r18
 722:	f3 2d       	mov	r31, r3
 724:	f0 62       	ori	r31, 0x20	; 32
 726:	3f 2e       	mov	r3, r31
 728:	08 c0       	rjmp	.+16     	; 0x73a <vfprintf+0xe6>
 72a:	8c 36       	cpi	r24, 0x6C	; 108
 72c:	21 f4       	brne	.+8      	; 0x736 <vfprintf+0xe2>
 72e:	83 2d       	mov	r24, r3
 730:	80 68       	ori	r24, 0x80	; 128
 732:	38 2e       	mov	r3, r24
 734:	02 c0       	rjmp	.+4      	; 0x73a <vfprintf+0xe6>
 736:	88 36       	cpi	r24, 0x68	; 104
 738:	41 f4       	brne	.+16     	; 0x74a <vfprintf+0xf6>
 73a:	f7 01       	movw	r30, r14
 73c:	93 fd       	sbrc	r25, 3
 73e:	85 91       	lpm	r24, Z+
 740:	93 ff       	sbrs	r25, 3
 742:	81 91       	ld	r24, Z+
 744:	7f 01       	movw	r14, r30
 746:	81 11       	cpse	r24, r1
 748:	b3 cf       	rjmp	.-154    	; 0x6b0 <vfprintf+0x5c>
 74a:	98 2f       	mov	r25, r24
 74c:	9f 7d       	andi	r25, 0xDF	; 223
 74e:	95 54       	subi	r25, 0x45	; 69
 750:	93 30       	cpi	r25, 0x03	; 3
 752:	28 f4       	brcc	.+10     	; 0x75e <vfprintf+0x10a>
 754:	0c 5f       	subi	r16, 0xFC	; 252
 756:	1f 4f       	sbci	r17, 0xFF	; 255
 758:	9f e3       	ldi	r25, 0x3F	; 63
 75a:	99 83       	std	Y+1, r25	; 0x01
 75c:	0d c0       	rjmp	.+26     	; 0x778 <vfprintf+0x124>
 75e:	83 36       	cpi	r24, 0x63	; 99
 760:	31 f0       	breq	.+12     	; 0x76e <vfprintf+0x11a>
 762:	83 37       	cpi	r24, 0x73	; 115
 764:	71 f0       	breq	.+28     	; 0x782 <vfprintf+0x12e>
 766:	83 35       	cpi	r24, 0x53	; 83
 768:	09 f0       	breq	.+2      	; 0x76c <vfprintf+0x118>
 76a:	59 c0       	rjmp	.+178    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 76c:	21 c0       	rjmp	.+66     	; 0x7b0 <vfprintf+0x15c>
 76e:	f8 01       	movw	r30, r16
 770:	80 81       	ld	r24, Z
 772:	89 83       	std	Y+1, r24	; 0x01
 774:	0e 5f       	subi	r16, 0xFE	; 254
 776:	1f 4f       	sbci	r17, 0xFF	; 255
 778:	88 24       	eor	r8, r8
 77a:	83 94       	inc	r8
 77c:	91 2c       	mov	r9, r1
 77e:	53 01       	movw	r10, r6
 780:	13 c0       	rjmp	.+38     	; 0x7a8 <vfprintf+0x154>
 782:	28 01       	movw	r4, r16
 784:	f2 e0       	ldi	r31, 0x02	; 2
 786:	4f 0e       	add	r4, r31
 788:	51 1c       	adc	r5, r1
 78a:	f8 01       	movw	r30, r16
 78c:	a0 80       	ld	r10, Z
 78e:	b1 80       	ldd	r11, Z+1	; 0x01
 790:	36 fe       	sbrs	r3, 6
 792:	03 c0       	rjmp	.+6      	; 0x79a <vfprintf+0x146>
 794:	69 2d       	mov	r22, r9
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	02 c0       	rjmp	.+4      	; 0x79e <vfprintf+0x14a>
 79a:	6f ef       	ldi	r22, 0xFF	; 255
 79c:	7f ef       	ldi	r23, 0xFF	; 255
 79e:	c5 01       	movw	r24, r10
 7a0:	0e 94 16 05 	call	0xa2c	; 0xa2c <strnlen>
 7a4:	4c 01       	movw	r8, r24
 7a6:	82 01       	movw	r16, r4
 7a8:	f3 2d       	mov	r31, r3
 7aa:	ff 77       	andi	r31, 0x7F	; 127
 7ac:	3f 2e       	mov	r3, r31
 7ae:	16 c0       	rjmp	.+44     	; 0x7dc <vfprintf+0x188>
 7b0:	28 01       	movw	r4, r16
 7b2:	22 e0       	ldi	r18, 0x02	; 2
 7b4:	42 0e       	add	r4, r18
 7b6:	51 1c       	adc	r5, r1
 7b8:	f8 01       	movw	r30, r16
 7ba:	a0 80       	ld	r10, Z
 7bc:	b1 80       	ldd	r11, Z+1	; 0x01
 7be:	36 fe       	sbrs	r3, 6
 7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <vfprintf+0x174>
 7c2:	69 2d       	mov	r22, r9
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <vfprintf+0x178>
 7c8:	6f ef       	ldi	r22, 0xFF	; 255
 7ca:	7f ef       	ldi	r23, 0xFF	; 255
 7cc:	c5 01       	movw	r24, r10
 7ce:	0e 94 0b 05 	call	0xa16	; 0xa16 <strnlen_P>
 7d2:	4c 01       	movw	r8, r24
 7d4:	f3 2d       	mov	r31, r3
 7d6:	f0 68       	ori	r31, 0x80	; 128
 7d8:	3f 2e       	mov	r3, r31
 7da:	82 01       	movw	r16, r4
 7dc:	33 fc       	sbrc	r3, 3
 7de:	1b c0       	rjmp	.+54     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7e0:	82 2d       	mov	r24, r2
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	88 16       	cp	r8, r24
 7e6:	99 06       	cpc	r9, r25
 7e8:	b0 f4       	brcc	.+44     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7ea:	b6 01       	movw	r22, r12
 7ec:	80 e2       	ldi	r24, 0x20	; 32
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 7f4:	2a 94       	dec	r2
 7f6:	f4 cf       	rjmp	.-24     	; 0x7e0 <vfprintf+0x18c>
 7f8:	f5 01       	movw	r30, r10
 7fa:	37 fc       	sbrc	r3, 7
 7fc:	85 91       	lpm	r24, Z+
 7fe:	37 fe       	sbrs	r3, 7
 800:	81 91       	ld	r24, Z+
 802:	5f 01       	movw	r10, r30
 804:	b6 01       	movw	r22, r12
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 80c:	21 10       	cpse	r2, r1
 80e:	2a 94       	dec	r2
 810:	21 e0       	ldi	r18, 0x01	; 1
 812:	82 1a       	sub	r8, r18
 814:	91 08       	sbc	r9, r1
 816:	81 14       	cp	r8, r1
 818:	91 04       	cpc	r9, r1
 81a:	71 f7       	brne	.-36     	; 0x7f8 <vfprintf+0x1a4>
 81c:	e8 c0       	rjmp	.+464    	; 0x9ee <__stack+0xef>
 81e:	84 36       	cpi	r24, 0x64	; 100
 820:	11 f0       	breq	.+4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 822:	89 36       	cpi	r24, 0x69	; 105
 824:	41 f5       	brne	.+80     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 826:	f8 01       	movw	r30, r16
 828:	37 fe       	sbrs	r3, 7
 82a:	07 c0       	rjmp	.+14     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 82c:	60 81       	ld	r22, Z
 82e:	71 81       	ldd	r23, Z+1	; 0x01
 830:	82 81       	ldd	r24, Z+2	; 0x02
 832:	93 81       	ldd	r25, Z+3	; 0x03
 834:	0c 5f       	subi	r16, 0xFC	; 252
 836:	1f 4f       	sbci	r17, 0xFF	; 255
 838:	08 c0       	rjmp	.+16     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 83a:	60 81       	ld	r22, Z
 83c:	71 81       	ldd	r23, Z+1	; 0x01
 83e:	07 2e       	mov	r0, r23
 840:	00 0c       	add	r0, r0
 842:	88 0b       	sbc	r24, r24
 844:	99 0b       	sbc	r25, r25
 846:	0e 5f       	subi	r16, 0xFE	; 254
 848:	1f 4f       	sbci	r17, 0xFF	; 255
 84a:	f3 2d       	mov	r31, r3
 84c:	ff 76       	andi	r31, 0x6F	; 111
 84e:	3f 2e       	mov	r3, r31
 850:	97 ff       	sbrs	r25, 7
 852:	09 c0       	rjmp	.+18     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 854:	90 95       	com	r25
 856:	80 95       	com	r24
 858:	70 95       	com	r23
 85a:	61 95       	neg	r22
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	8f 4f       	sbci	r24, 0xFF	; 255
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	f0 68       	ori	r31, 0x80	; 128
 864:	3f 2e       	mov	r3, r31
 866:	2a e0       	ldi	r18, 0x0A	; 10
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	a3 01       	movw	r20, r6
 86c:	0e 94 5d 05 	call	0xaba	; 0xaba <__ultoa_invert>
 870:	88 2e       	mov	r8, r24
 872:	86 18       	sub	r8, r6
 874:	45 c0       	rjmp	.+138    	; 0x900 <__stack+0x1>
 876:	85 37       	cpi	r24, 0x75	; 117
 878:	31 f4       	brne	.+12     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 87a:	23 2d       	mov	r18, r3
 87c:	2f 7e       	andi	r18, 0xEF	; 239
 87e:	b2 2e       	mov	r11, r18
 880:	2a e0       	ldi	r18, 0x0A	; 10
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	25 c0       	rjmp	.+74     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 886:	93 2d       	mov	r25, r3
 888:	99 7f       	andi	r25, 0xF9	; 249
 88a:	b9 2e       	mov	r11, r25
 88c:	8f 36       	cpi	r24, 0x6F	; 111
 88e:	c1 f0       	breq	.+48     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 890:	18 f4       	brcc	.+6      	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 892:	88 35       	cpi	r24, 0x58	; 88
 894:	79 f0       	breq	.+30     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 896:	b5 c0       	rjmp	.+362    	; 0xa02 <__stack+0x103>
 898:	80 37       	cpi	r24, 0x70	; 112
 89a:	19 f0       	breq	.+6      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 89c:	88 37       	cpi	r24, 0x78	; 120
 89e:	21 f0       	breq	.+8      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 8a0:	b0 c0       	rjmp	.+352    	; 0xa02 <__stack+0x103>
 8a2:	e9 2f       	mov	r30, r25
 8a4:	e0 61       	ori	r30, 0x10	; 16
 8a6:	be 2e       	mov	r11, r30
 8a8:	b4 fe       	sbrs	r11, 4
 8aa:	0d c0       	rjmp	.+26     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8ac:	fb 2d       	mov	r31, r11
 8ae:	f4 60       	ori	r31, 0x04	; 4
 8b0:	bf 2e       	mov	r11, r31
 8b2:	09 c0       	rjmp	.+18     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8b4:	34 fe       	sbrs	r3, 4
 8b6:	0a c0       	rjmp	.+20     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 8b8:	29 2f       	mov	r18, r25
 8ba:	26 60       	ori	r18, 0x06	; 6
 8bc:	b2 2e       	mov	r11, r18
 8be:	06 c0       	rjmp	.+12     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 8c0:	28 e0       	ldi	r18, 0x08	; 8
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8c6:	20 e1       	ldi	r18, 0x10	; 16
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8cc:	20 e1       	ldi	r18, 0x10	; 16
 8ce:	32 e0       	ldi	r19, 0x02	; 2
 8d0:	f8 01       	movw	r30, r16
 8d2:	b7 fe       	sbrs	r11, 7
 8d4:	07 c0       	rjmp	.+14     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8d6:	60 81       	ld	r22, Z
 8d8:	71 81       	ldd	r23, Z+1	; 0x01
 8da:	82 81       	ldd	r24, Z+2	; 0x02
 8dc:	93 81       	ldd	r25, Z+3	; 0x03
 8de:	0c 5f       	subi	r16, 0xFC	; 252
 8e0:	1f 4f       	sbci	r17, 0xFF	; 255
 8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
 8e4:	60 81       	ld	r22, Z
 8e6:	71 81       	ldd	r23, Z+1	; 0x01
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 5f       	subi	r16, 0xFE	; 254
 8ee:	1f 4f       	sbci	r17, 0xFF	; 255
 8f0:	a3 01       	movw	r20, r6
 8f2:	0e 94 5d 05 	call	0xaba	; 0xaba <__ultoa_invert>
 8f6:	88 2e       	mov	r8, r24
 8f8:	86 18       	sub	r8, r6
 8fa:	fb 2d       	mov	r31, r11
 8fc:	ff 77       	andi	r31, 0x7F	; 127
 8fe:	3f 2e       	mov	r3, r31
 900:	36 fe       	sbrs	r3, 6
 902:	0d c0       	rjmp	.+26     	; 0x91e <__stack+0x1f>
 904:	23 2d       	mov	r18, r3
 906:	2e 7f       	andi	r18, 0xFE	; 254
 908:	a2 2e       	mov	r10, r18
 90a:	89 14       	cp	r8, r9
 90c:	58 f4       	brcc	.+22     	; 0x924 <__stack+0x25>
 90e:	34 fe       	sbrs	r3, 4
 910:	0b c0       	rjmp	.+22     	; 0x928 <__stack+0x29>
 912:	32 fc       	sbrc	r3, 2
 914:	09 c0       	rjmp	.+18     	; 0x928 <__stack+0x29>
 916:	83 2d       	mov	r24, r3
 918:	8e 7e       	andi	r24, 0xEE	; 238
 91a:	a8 2e       	mov	r10, r24
 91c:	05 c0       	rjmp	.+10     	; 0x928 <__stack+0x29>
 91e:	b8 2c       	mov	r11, r8
 920:	a3 2c       	mov	r10, r3
 922:	03 c0       	rjmp	.+6      	; 0x92a <__stack+0x2b>
 924:	b8 2c       	mov	r11, r8
 926:	01 c0       	rjmp	.+2      	; 0x92a <__stack+0x2b>
 928:	b9 2c       	mov	r11, r9
 92a:	a4 fe       	sbrs	r10, 4
 92c:	0f c0       	rjmp	.+30     	; 0x94c <__stack+0x4d>
 92e:	fe 01       	movw	r30, r28
 930:	e8 0d       	add	r30, r8
 932:	f1 1d       	adc	r31, r1
 934:	80 81       	ld	r24, Z
 936:	80 33       	cpi	r24, 0x30	; 48
 938:	21 f4       	brne	.+8      	; 0x942 <__stack+0x43>
 93a:	9a 2d       	mov	r25, r10
 93c:	99 7e       	andi	r25, 0xE9	; 233
 93e:	a9 2e       	mov	r10, r25
 940:	09 c0       	rjmp	.+18     	; 0x954 <__stack+0x55>
 942:	a2 fe       	sbrs	r10, 2
 944:	06 c0       	rjmp	.+12     	; 0x952 <__stack+0x53>
 946:	b3 94       	inc	r11
 948:	b3 94       	inc	r11
 94a:	04 c0       	rjmp	.+8      	; 0x954 <__stack+0x55>
 94c:	8a 2d       	mov	r24, r10
 94e:	86 78       	andi	r24, 0x86	; 134
 950:	09 f0       	breq	.+2      	; 0x954 <__stack+0x55>
 952:	b3 94       	inc	r11
 954:	a3 fc       	sbrc	r10, 3
 956:	11 c0       	rjmp	.+34     	; 0x97a <__stack+0x7b>
 958:	a0 fe       	sbrs	r10, 0
 95a:	06 c0       	rjmp	.+12     	; 0x968 <__stack+0x69>
 95c:	b2 14       	cp	r11, r2
 95e:	88 f4       	brcc	.+34     	; 0x982 <__stack+0x83>
 960:	28 0c       	add	r2, r8
 962:	92 2c       	mov	r9, r2
 964:	9b 18       	sub	r9, r11
 966:	0e c0       	rjmp	.+28     	; 0x984 <__stack+0x85>
 968:	b2 14       	cp	r11, r2
 96a:	60 f4       	brcc	.+24     	; 0x984 <__stack+0x85>
 96c:	b6 01       	movw	r22, r12
 96e:	80 e2       	ldi	r24, 0x20	; 32
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 976:	b3 94       	inc	r11
 978:	f7 cf       	rjmp	.-18     	; 0x968 <__stack+0x69>
 97a:	b2 14       	cp	r11, r2
 97c:	18 f4       	brcc	.+6      	; 0x984 <__stack+0x85>
 97e:	2b 18       	sub	r2, r11
 980:	02 c0       	rjmp	.+4      	; 0x986 <__stack+0x87>
 982:	98 2c       	mov	r9, r8
 984:	21 2c       	mov	r2, r1
 986:	a4 fe       	sbrs	r10, 4
 988:	10 c0       	rjmp	.+32     	; 0x9aa <__stack+0xab>
 98a:	b6 01       	movw	r22, r12
 98c:	80 e3       	ldi	r24, 0x30	; 48
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 994:	a2 fe       	sbrs	r10, 2
 996:	17 c0       	rjmp	.+46     	; 0x9c6 <__stack+0xc7>
 998:	a1 fc       	sbrc	r10, 1
 99a:	03 c0       	rjmp	.+6      	; 0x9a2 <__stack+0xa3>
 99c:	88 e7       	ldi	r24, 0x78	; 120
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <__stack+0xa7>
 9a2:	88 e5       	ldi	r24, 0x58	; 88
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	b6 01       	movw	r22, r12
 9a8:	0c c0       	rjmp	.+24     	; 0x9c2 <__stack+0xc3>
 9aa:	8a 2d       	mov	r24, r10
 9ac:	86 78       	andi	r24, 0x86	; 134
 9ae:	59 f0       	breq	.+22     	; 0x9c6 <__stack+0xc7>
 9b0:	a1 fe       	sbrs	r10, 1
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <__stack+0xb9>
 9b4:	8b e2       	ldi	r24, 0x2B	; 43
 9b6:	01 c0       	rjmp	.+2      	; 0x9ba <__stack+0xbb>
 9b8:	80 e2       	ldi	r24, 0x20	; 32
 9ba:	a7 fc       	sbrc	r10, 7
 9bc:	8d e2       	ldi	r24, 0x2D	; 45
 9be:	b6 01       	movw	r22, r12
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 9c6:	89 14       	cp	r8, r9
 9c8:	38 f4       	brcc	.+14     	; 0x9d8 <__stack+0xd9>
 9ca:	b6 01       	movw	r22, r12
 9cc:	80 e3       	ldi	r24, 0x30	; 48
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 9d4:	9a 94       	dec	r9
 9d6:	f7 cf       	rjmp	.-18     	; 0x9c6 <__stack+0xc7>
 9d8:	8a 94       	dec	r8
 9da:	f3 01       	movw	r30, r6
 9dc:	e8 0d       	add	r30, r8
 9de:	f1 1d       	adc	r31, r1
 9e0:	80 81       	ld	r24, Z
 9e2:	b6 01       	movw	r22, r12
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 9ea:	81 10       	cpse	r8, r1
 9ec:	f5 cf       	rjmp	.-22     	; 0x9d8 <__stack+0xd9>
 9ee:	22 20       	and	r2, r2
 9f0:	09 f4       	brne	.+2      	; 0x9f4 <__stack+0xf5>
 9f2:	42 ce       	rjmp	.-892    	; 0x678 <vfprintf+0x24>
 9f4:	b6 01       	movw	r22, r12
 9f6:	80 e2       	ldi	r24, 0x20	; 32
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 9fe:	2a 94       	dec	r2
 a00:	f6 cf       	rjmp	.-20     	; 0x9ee <__stack+0xef>
 a02:	f6 01       	movw	r30, r12
 a04:	86 81       	ldd	r24, Z+6	; 0x06
 a06:	97 81       	ldd	r25, Z+7	; 0x07
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <__stack+0x10f>
 a0a:	8f ef       	ldi	r24, 0xFF	; 255
 a0c:	9f ef       	ldi	r25, 0xFF	; 255
 a0e:	2b 96       	adiw	r28, 0x0b	; 11
 a10:	e2 e1       	ldi	r30, 0x12	; 18
 a12:	0c 94 d7 05 	jmp	0xbae	; 0xbae <__epilogue_restores__>

00000a16 <strnlen_P>:
 a16:	fc 01       	movw	r30, r24
 a18:	05 90       	lpm	r0, Z+
 a1a:	61 50       	subi	r22, 0x01	; 1
 a1c:	70 40       	sbci	r23, 0x00	; 0
 a1e:	01 10       	cpse	r0, r1
 a20:	d8 f7       	brcc	.-10     	; 0xa18 <strnlen_P+0x2>
 a22:	80 95       	com	r24
 a24:	90 95       	com	r25
 a26:	8e 0f       	add	r24, r30
 a28:	9f 1f       	adc	r25, r31
 a2a:	08 95       	ret

00000a2c <strnlen>:
 a2c:	fc 01       	movw	r30, r24
 a2e:	61 50       	subi	r22, 0x01	; 1
 a30:	70 40       	sbci	r23, 0x00	; 0
 a32:	01 90       	ld	r0, Z+
 a34:	01 10       	cpse	r0, r1
 a36:	d8 f7       	brcc	.-10     	; 0xa2e <strnlen+0x2>
 a38:	80 95       	com	r24
 a3a:	90 95       	com	r25
 a3c:	8e 0f       	add	r24, r30
 a3e:	9f 1f       	adc	r25, r31
 a40:	08 95       	ret

00000a42 <fputc>:
 a42:	0f 93       	push	r16
 a44:	1f 93       	push	r17
 a46:	cf 93       	push	r28
 a48:	df 93       	push	r29
 a4a:	fb 01       	movw	r30, r22
 a4c:	23 81       	ldd	r18, Z+3	; 0x03
 a4e:	21 fd       	sbrc	r18, 1
 a50:	03 c0       	rjmp	.+6      	; 0xa58 <fputc+0x16>
 a52:	8f ef       	ldi	r24, 0xFF	; 255
 a54:	9f ef       	ldi	r25, 0xFF	; 255
 a56:	2c c0       	rjmp	.+88     	; 0xab0 <fputc+0x6e>
 a58:	22 ff       	sbrs	r18, 2
 a5a:	16 c0       	rjmp	.+44     	; 0xa88 <fputc+0x46>
 a5c:	46 81       	ldd	r20, Z+6	; 0x06
 a5e:	57 81       	ldd	r21, Z+7	; 0x07
 a60:	24 81       	ldd	r18, Z+4	; 0x04
 a62:	35 81       	ldd	r19, Z+5	; 0x05
 a64:	42 17       	cp	r20, r18
 a66:	53 07       	cpc	r21, r19
 a68:	44 f4       	brge	.+16     	; 0xa7a <fputc+0x38>
 a6a:	a0 81       	ld	r26, Z
 a6c:	b1 81       	ldd	r27, Z+1	; 0x01
 a6e:	9d 01       	movw	r18, r26
 a70:	2f 5f       	subi	r18, 0xFF	; 255
 a72:	3f 4f       	sbci	r19, 0xFF	; 255
 a74:	31 83       	std	Z+1, r19	; 0x01
 a76:	20 83       	st	Z, r18
 a78:	8c 93       	st	X, r24
 a7a:	26 81       	ldd	r18, Z+6	; 0x06
 a7c:	37 81       	ldd	r19, Z+7	; 0x07
 a7e:	2f 5f       	subi	r18, 0xFF	; 255
 a80:	3f 4f       	sbci	r19, 0xFF	; 255
 a82:	37 83       	std	Z+7, r19	; 0x07
 a84:	26 83       	std	Z+6, r18	; 0x06
 a86:	14 c0       	rjmp	.+40     	; 0xab0 <fputc+0x6e>
 a88:	8b 01       	movw	r16, r22
 a8a:	ec 01       	movw	r28, r24
 a8c:	fb 01       	movw	r30, r22
 a8e:	00 84       	ldd	r0, Z+8	; 0x08
 a90:	f1 85       	ldd	r31, Z+9	; 0x09
 a92:	e0 2d       	mov	r30, r0
 a94:	09 95       	icall
 a96:	89 2b       	or	r24, r25
 a98:	e1 f6       	brne	.-72     	; 0xa52 <fputc+0x10>
 a9a:	d8 01       	movw	r26, r16
 a9c:	16 96       	adiw	r26, 0x06	; 6
 a9e:	8d 91       	ld	r24, X+
 aa0:	9c 91       	ld	r25, X
 aa2:	17 97       	sbiw	r26, 0x07	; 7
 aa4:	01 96       	adiw	r24, 0x01	; 1
 aa6:	17 96       	adiw	r26, 0x07	; 7
 aa8:	9c 93       	st	X, r25
 aaa:	8e 93       	st	-X, r24
 aac:	16 97       	sbiw	r26, 0x06	; 6
 aae:	ce 01       	movw	r24, r28
 ab0:	df 91       	pop	r29
 ab2:	cf 91       	pop	r28
 ab4:	1f 91       	pop	r17
 ab6:	0f 91       	pop	r16
 ab8:	08 95       	ret

00000aba <__ultoa_invert>:
 aba:	fa 01       	movw	r30, r20
 abc:	aa 27       	eor	r26, r26
 abe:	28 30       	cpi	r18, 0x08	; 8
 ac0:	51 f1       	breq	.+84     	; 0xb16 <__ultoa_invert+0x5c>
 ac2:	20 31       	cpi	r18, 0x10	; 16
 ac4:	81 f1       	breq	.+96     	; 0xb26 <__ultoa_invert+0x6c>
 ac6:	e8 94       	clt
 ac8:	6f 93       	push	r22
 aca:	6e 7f       	andi	r22, 0xFE	; 254
 acc:	6e 5f       	subi	r22, 0xFE	; 254
 ace:	7f 4f       	sbci	r23, 0xFF	; 255
 ad0:	8f 4f       	sbci	r24, 0xFF	; 255
 ad2:	9f 4f       	sbci	r25, 0xFF	; 255
 ad4:	af 4f       	sbci	r26, 0xFF	; 255
 ad6:	b1 e0       	ldi	r27, 0x01	; 1
 ad8:	3e d0       	rcall	.+124    	; 0xb56 <__ultoa_invert+0x9c>
 ada:	b4 e0       	ldi	r27, 0x04	; 4
 adc:	3c d0       	rcall	.+120    	; 0xb56 <__ultoa_invert+0x9c>
 ade:	67 0f       	add	r22, r23
 ae0:	78 1f       	adc	r23, r24
 ae2:	89 1f       	adc	r24, r25
 ae4:	9a 1f       	adc	r25, r26
 ae6:	a1 1d       	adc	r26, r1
 ae8:	68 0f       	add	r22, r24
 aea:	79 1f       	adc	r23, r25
 aec:	8a 1f       	adc	r24, r26
 aee:	91 1d       	adc	r25, r1
 af0:	a1 1d       	adc	r26, r1
 af2:	6a 0f       	add	r22, r26
 af4:	71 1d       	adc	r23, r1
 af6:	81 1d       	adc	r24, r1
 af8:	91 1d       	adc	r25, r1
 afa:	a1 1d       	adc	r26, r1
 afc:	20 d0       	rcall	.+64     	; 0xb3e <__ultoa_invert+0x84>
 afe:	09 f4       	brne	.+2      	; 0xb02 <__ultoa_invert+0x48>
 b00:	68 94       	set
 b02:	3f 91       	pop	r19
 b04:	2a e0       	ldi	r18, 0x0A	; 10
 b06:	26 9f       	mul	r18, r22
 b08:	11 24       	eor	r1, r1
 b0a:	30 19       	sub	r19, r0
 b0c:	30 5d       	subi	r19, 0xD0	; 208
 b0e:	31 93       	st	Z+, r19
 b10:	de f6       	brtc	.-74     	; 0xac8 <__ultoa_invert+0xe>
 b12:	cf 01       	movw	r24, r30
 b14:	08 95       	ret
 b16:	46 2f       	mov	r20, r22
 b18:	47 70       	andi	r20, 0x07	; 7
 b1a:	40 5d       	subi	r20, 0xD0	; 208
 b1c:	41 93       	st	Z+, r20
 b1e:	b3 e0       	ldi	r27, 0x03	; 3
 b20:	0f d0       	rcall	.+30     	; 0xb40 <__ultoa_invert+0x86>
 b22:	c9 f7       	brne	.-14     	; 0xb16 <__ultoa_invert+0x5c>
 b24:	f6 cf       	rjmp	.-20     	; 0xb12 <__ultoa_invert+0x58>
 b26:	46 2f       	mov	r20, r22
 b28:	4f 70       	andi	r20, 0x0F	; 15
 b2a:	40 5d       	subi	r20, 0xD0	; 208
 b2c:	4a 33       	cpi	r20, 0x3A	; 58
 b2e:	18 f0       	brcs	.+6      	; 0xb36 <__ultoa_invert+0x7c>
 b30:	49 5d       	subi	r20, 0xD9	; 217
 b32:	31 fd       	sbrc	r19, 1
 b34:	40 52       	subi	r20, 0x20	; 32
 b36:	41 93       	st	Z+, r20
 b38:	02 d0       	rcall	.+4      	; 0xb3e <__ultoa_invert+0x84>
 b3a:	a9 f7       	brne	.-22     	; 0xb26 <__ultoa_invert+0x6c>
 b3c:	ea cf       	rjmp	.-44     	; 0xb12 <__ultoa_invert+0x58>
 b3e:	b4 e0       	ldi	r27, 0x04	; 4
 b40:	a6 95       	lsr	r26
 b42:	97 95       	ror	r25
 b44:	87 95       	ror	r24
 b46:	77 95       	ror	r23
 b48:	67 95       	ror	r22
 b4a:	ba 95       	dec	r27
 b4c:	c9 f7       	brne	.-14     	; 0xb40 <__ultoa_invert+0x86>
 b4e:	00 97       	sbiw	r24, 0x00	; 0
 b50:	61 05       	cpc	r22, r1
 b52:	71 05       	cpc	r23, r1
 b54:	08 95       	ret
 b56:	9b 01       	movw	r18, r22
 b58:	ac 01       	movw	r20, r24
 b5a:	0a 2e       	mov	r0, r26
 b5c:	06 94       	lsr	r0
 b5e:	57 95       	ror	r21
 b60:	47 95       	ror	r20
 b62:	37 95       	ror	r19
 b64:	27 95       	ror	r18
 b66:	ba 95       	dec	r27
 b68:	c9 f7       	brne	.-14     	; 0xb5c <__ultoa_invert+0xa2>
 b6a:	62 0f       	add	r22, r18
 b6c:	73 1f       	adc	r23, r19
 b6e:	84 1f       	adc	r24, r20
 b70:	95 1f       	adc	r25, r21
 b72:	a0 1d       	adc	r26, r0
 b74:	08 95       	ret

00000b76 <__prologue_saves__>:
 b76:	2f 92       	push	r2
 b78:	3f 92       	push	r3
 b7a:	4f 92       	push	r4
 b7c:	5f 92       	push	r5
 b7e:	6f 92       	push	r6
 b80:	7f 92       	push	r7
 b82:	8f 92       	push	r8
 b84:	9f 92       	push	r9
 b86:	af 92       	push	r10
 b88:	bf 92       	push	r11
 b8a:	cf 92       	push	r12
 b8c:	df 92       	push	r13
 b8e:	ef 92       	push	r14
 b90:	ff 92       	push	r15
 b92:	0f 93       	push	r16
 b94:	1f 93       	push	r17
 b96:	cf 93       	push	r28
 b98:	df 93       	push	r29
 b9a:	cd b7       	in	r28, 0x3d	; 61
 b9c:	de b7       	in	r29, 0x3e	; 62
 b9e:	ca 1b       	sub	r28, r26
 ba0:	db 0b       	sbc	r29, r27
 ba2:	0f b6       	in	r0, 0x3f	; 63
 ba4:	f8 94       	cli
 ba6:	de bf       	out	0x3e, r29	; 62
 ba8:	0f be       	out	0x3f, r0	; 63
 baa:	cd bf       	out	0x3d, r28	; 61
 bac:	09 94       	ijmp

00000bae <__epilogue_restores__>:
 bae:	2a 88       	ldd	r2, Y+18	; 0x12
 bb0:	39 88       	ldd	r3, Y+17	; 0x11
 bb2:	48 88       	ldd	r4, Y+16	; 0x10
 bb4:	5f 84       	ldd	r5, Y+15	; 0x0f
 bb6:	6e 84       	ldd	r6, Y+14	; 0x0e
 bb8:	7d 84       	ldd	r7, Y+13	; 0x0d
 bba:	8c 84       	ldd	r8, Y+12	; 0x0c
 bbc:	9b 84       	ldd	r9, Y+11	; 0x0b
 bbe:	aa 84       	ldd	r10, Y+10	; 0x0a
 bc0:	b9 84       	ldd	r11, Y+9	; 0x09
 bc2:	c8 84       	ldd	r12, Y+8	; 0x08
 bc4:	df 80       	ldd	r13, Y+7	; 0x07
 bc6:	ee 80       	ldd	r14, Y+6	; 0x06
 bc8:	fd 80       	ldd	r15, Y+5	; 0x05
 bca:	0c 81       	ldd	r16, Y+4	; 0x04
 bcc:	1b 81       	ldd	r17, Y+3	; 0x03
 bce:	aa 81       	ldd	r26, Y+2	; 0x02
 bd0:	b9 81       	ldd	r27, Y+1	; 0x01
 bd2:	ce 0f       	add	r28, r30
 bd4:	d1 1d       	adc	r29, r1
 bd6:	0f b6       	in	r0, 0x3f	; 63
 bd8:	f8 94       	cli
 bda:	de bf       	out	0x3e, r29	; 62
 bdc:	0f be       	out	0x3f, r0	; 63
 bde:	cd bf       	out	0x3d, r28	; 61
 be0:	ed 01       	movw	r28, r26
 be2:	08 95       	ret

00000be4 <_exit>:
 be4:	f8 94       	cli

00000be6 <__stop_program>:
 be6:	ff cf       	rjmp	.-2      	; 0xbe6 <__stop_program>
