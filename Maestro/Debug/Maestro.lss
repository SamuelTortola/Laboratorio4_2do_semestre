
Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000043e  000004d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010a  0080010a  000004dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f36  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000989  00000000  00000000  0000155a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089c  00000000  00000000  00001ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bc  00000000  00000000  00002900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e1  00000000  00000000  00002dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000339d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <main>
  9e:	0c 94 1d 02 	jmp	0x43a	; 0x43a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Config_MASTER>:
		return 0x01;
	}
	
	return edo;    //Si hay algun error
	
}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	9a 01       	movw	r18, r20
  ac:	ab 01       	movw	r20, r22
  ae:	87 b1       	in	r24, 0x07	; 7
  b0:	8f 7c       	andi	r24, 0xCF	; 207
  b2:	87 b9       	out	0x07, r24	; 7
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	74 e2       	ldi	r23, 0x24	; 36
  b8:	84 ef       	ldi	r24, 0xF4	; 244
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__udivmodsi4>
  c0:	ca 01       	movw	r24, r20
  c2:	b9 01       	movw	r22, r18
  c4:	60 51       	subi	r22, 0x10	; 16
  c6:	71 09       	sbc	r23, r1
  c8:	81 09       	sbc	r24, r1
  ca:	91 09       	sbc	r25, r1
  cc:	2c 2f       	mov	r18, r28
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	03 2e       	mov	r0, r19
  d6:	00 0c       	add	r0, r0
  d8:	44 0b       	sbc	r20, r20
  da:	55 0b       	sbc	r21, r21
  dc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__udivmodsi4>
  e0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  e4:	c4 30       	cpi	r28, 0x04	; 4
  e6:	79 f0       	breq	.+30     	; 0x106 <I2C_Config_MASTER+0x60>
  e8:	18 f4       	brcc	.+6      	; 0xf0 <I2C_Config_MASTER+0x4a>
  ea:	c1 30       	cpi	r28, 0x01	; 1
  ec:	31 f0       	breq	.+12     	; 0xfa <I2C_Config_MASTER+0x54>
  ee:	23 c0       	rjmp	.+70     	; 0x136 <I2C_Config_MASTER+0x90>
  f0:	c0 31       	cpi	r28, 0x10	; 16
  f2:	91 f0       	breq	.+36     	; 0x118 <I2C_Config_MASTER+0x72>
  f4:	c0 34       	cpi	r28, 0x40	; 64
  f6:	c9 f0       	breq	.+50     	; 0x12a <I2C_Config_MASTER+0x84>
  f8:	1e c0       	rjmp	.+60     	; 0x136 <I2C_Config_MASTER+0x90>
  fa:	e9 eb       	ldi	r30, 0xB9	; 185
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8c 7f       	andi	r24, 0xFC	; 252
 102:	80 83       	st	Z, r24
 104:	1d c0       	rjmp	.+58     	; 0x140 <I2C_Config_MASTER+0x9a>
 106:	e9 eb       	ldi	r30, 0xB9	; 185
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	80 83       	st	Z, r24
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
 116:	14 c0       	rjmp	.+40     	; 0x140 <I2C_Config_MASTER+0x9a>
 118:	e9 eb       	ldi	r30, 0xB9	; 185
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	80 83       	st	Z, r24
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
 128:	0b c0       	rjmp	.+22     	; 0x140 <I2C_Config_MASTER+0x9a>
 12a:	e9 eb       	ldi	r30, 0xB9	; 185
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8d 6f       	ori	r24, 0xFD	; 253
 132:	80 83       	st	Z, r24
 134:	05 c0       	rjmp	.+10     	; 0x140 <I2C_Config_MASTER+0x9a>
 136:	e9 eb       	ldi	r30, 0xB9	; 185
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8c 7f       	andi	r24, 0xFC	; 252
 13e:	80 83       	st	Z, r24
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <I2C_inicio>:
 14a:	84 ea       	ldi	r24, 0xA4	; 164
 14c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 150:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 154:	88 23       	and	r24, r24
 156:	e4 f7       	brge	.-8      	; 0x150 <I2C_inicio+0x6>
 158:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 15c:	88 7f       	andi	r24, 0xF8	; 248
 15e:	88 30       	cpi	r24, 0x08	; 8
 160:	21 f0       	breq	.+8      	; 0x16a <I2C_inicio+0x20>
 162:	80 31       	cpi	r24, 0x10	; 16
 164:	19 f4       	brne	.+6      	; 0x16c <I2C_inicio+0x22>
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	08 95       	ret
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	08 95       	ret

0000016e <I2C_EscByte>:
 16e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 172:	84 e8       	ldi	r24, 0x84	; 132
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 178:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17c:	88 23       	and	r24, r24
 17e:	e4 f7       	brge	.-8      	; 0x178 <I2C_EscByte+0xa>
 180:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 184:	88 7f       	andi	r24, 0xF8	; 248
 186:	88 31       	cpi	r24, 0x18	; 24
 188:	31 f0       	breq	.+12     	; 0x196 <I2C_EscByte+0x28>
 18a:	88 32       	cpi	r24, 0x28	; 40
 18c:	31 f0       	breq	.+12     	; 0x19a <I2C_EscByte+0x2c>
 18e:	80 34       	cpi	r24, 0x40	; 64
 190:	29 f4       	brne	.+10     	; 0x19c <I2C_EscByte+0x2e>
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	08 95       	ret
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	08 95       	ret
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	08 95       	ret

0000019e <I2C_STOP>:
 19e:	84 e9       	ldi	r24, 0x94	; 148
 1a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a8:	84 fd       	sbrc	r24, 4
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <I2C_STOP+0x6>
 1ac:	08 95       	ret

000001ae <I2C_esclavo>:



void I2C_esclavo(uint8_t dato){
 1ae:	cf 93       	push	r28
 1b0:	c8 2f       	mov	r28, r24
	esclavo = 0x03;  //Dirección del esclavo
	esclavo = esclavo << 1;    //Compone la SLA+W
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <esclavo>
	
	
	aux = I2C_inicio();   //Condicion de inicio
 1b8:	0e 94 a5 00 	call	0x14a	; 0x14a <I2C_inicio>
 1bc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <aux>
	if (aux != 0x01)  //Si no se establece la conexión
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <I2C_esclavo+0x22>
	{
		TWCR |= (1 << TWINT);  //Borrar la bandera
 1c4:	ec eb       	ldi	r30, 0xBC	; 188
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	80 83       	st	Z, r24
		return;   //No continua
 1ce:	10 c0       	rjmp	.+32     	; 0x1f0 <I2C_esclavo+0x42>
	}
	
	aux = I2C_EscByte(esclavo);     //Direcciona con la SLA+W
 1d0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <esclavo>
 1d4:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_EscByte>
 1d8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <aux>
	if (aux != 0x01)   //Si hay algun error de comunicación
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	19 f0       	breq	.+6      	; 0x1e6 <I2C_esclavo+0x38>
	{
		I2C_STOP();  //No continua, termina la comunicación y la cierra
 1e0:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_STOP>
		return;   
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <I2C_esclavo+0x42>
	}
	
	I2C_EscByte(dato);   //Envia el dato al esclavo
 1e6:	8c 2f       	mov	r24, r28
 1e8:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_EscByte>
	I2C_STOP();  //No continua, termina la comunicación y la cierra
 1ec:	0e 94 cf 00 	call	0x19e	; 0x19e <I2C_STOP>
	
	
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <dato_a_mostrar>:
{
	if(a == 0)
	inicio(0x80 + b);  //Posicionarse en la linea 1 y se suma la columna
	
	else if(a == 1)
	inicio(0xC0 + b);  //Posicionarse en la linea 2  y se suma la columna
 1f4:	80 ff       	sbrs	r24, 0
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <dato_a_mostrar+0xc>
 1f8:	9b b1       	in	r25, 0x0b	; 11
 1fa:	91 60       	ori	r25, 0x01	; 1
 1fc:	9b b9       	out	0x0b, r25	; 11
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <dato_a_mostrar+0x12>
 200:	9b b1       	in	r25, 0x0b	; 11
 202:	9e 7f       	andi	r25, 0xFE	; 254
 204:	9b b9       	out	0x0b, r25	; 11
 206:	81 ff       	sbrs	r24, 1
 208:	04 c0       	rjmp	.+8      	; 0x212 <dato_a_mostrar+0x1e>
 20a:	9b b1       	in	r25, 0x0b	; 11
 20c:	92 60       	ori	r25, 0x02	; 2
 20e:	9b b9       	out	0x0b, r25	; 11
 210:	03 c0       	rjmp	.+6      	; 0x218 <dato_a_mostrar+0x24>
 212:	9b b1       	in	r25, 0x0b	; 11
 214:	9d 7f       	andi	r25, 0xFD	; 253
 216:	9b b9       	out	0x0b, r25	; 11
 218:	82 ff       	sbrs	r24, 2
 21a:	04 c0       	rjmp	.+8      	; 0x224 <dato_a_mostrar+0x30>
 21c:	9b b1       	in	r25, 0x0b	; 11
 21e:	94 60       	ori	r25, 0x04	; 4
 220:	9b b9       	out	0x0b, r25	; 11
 222:	03 c0       	rjmp	.+6      	; 0x22a <dato_a_mostrar+0x36>
 224:	9b b1       	in	r25, 0x0b	; 11
 226:	9b 7f       	andi	r25, 0xFB	; 251
 228:	9b b9       	out	0x0b, r25	; 11
 22a:	83 ff       	sbrs	r24, 3
 22c:	04 c0       	rjmp	.+8      	; 0x236 <dato_a_mostrar+0x42>
 22e:	9b b1       	in	r25, 0x0b	; 11
 230:	98 60       	ori	r25, 0x08	; 8
 232:	9b b9       	out	0x0b, r25	; 11
 234:	03 c0       	rjmp	.+6      	; 0x23c <dato_a_mostrar+0x48>
 236:	9b b1       	in	r25, 0x0b	; 11
 238:	97 7f       	andi	r25, 0xF7	; 247
 23a:	9b b9       	out	0x0b, r25	; 11
 23c:	84 ff       	sbrs	r24, 4
 23e:	04 c0       	rjmp	.+8      	; 0x248 <dato_a_mostrar+0x54>
 240:	9b b1       	in	r25, 0x0b	; 11
 242:	90 61       	ori	r25, 0x10	; 16
 244:	9b b9       	out	0x0b, r25	; 11
 246:	03 c0       	rjmp	.+6      	; 0x24e <dato_a_mostrar+0x5a>
 248:	9b b1       	in	r25, 0x0b	; 11
 24a:	9f 7e       	andi	r25, 0xEF	; 239
 24c:	9b b9       	out	0x0b, r25	; 11
 24e:	85 ff       	sbrs	r24, 5
 250:	04 c0       	rjmp	.+8      	; 0x25a <dato_a_mostrar+0x66>
 252:	9b b1       	in	r25, 0x0b	; 11
 254:	90 62       	ori	r25, 0x20	; 32
 256:	9b b9       	out	0x0b, r25	; 11
 258:	03 c0       	rjmp	.+6      	; 0x260 <dato_a_mostrar+0x6c>
 25a:	9b b1       	in	r25, 0x0b	; 11
 25c:	9f 7d       	andi	r25, 0xDF	; 223
 25e:	9b b9       	out	0x0b, r25	; 11
 260:	86 ff       	sbrs	r24, 6
 262:	04 c0       	rjmp	.+8      	; 0x26c <dato_a_mostrar+0x78>
 264:	9b b1       	in	r25, 0x0b	; 11
 266:	90 64       	ori	r25, 0x40	; 64
 268:	9b b9       	out	0x0b, r25	; 11
 26a:	03 c0       	rjmp	.+6      	; 0x272 <dato_a_mostrar+0x7e>
 26c:	9b b1       	in	r25, 0x0b	; 11
 26e:	9f 7b       	andi	r25, 0xBF	; 191
 270:	9b b9       	out	0x0b, r25	; 11
 272:	88 23       	and	r24, r24
 274:	24 f4       	brge	.+8      	; 0x27e <dato_a_mostrar+0x8a>
 276:	8b b1       	in	r24, 0x0b	; 11
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	8b b9       	out	0x0b, r24	; 11
 27c:	08 95       	ret
 27e:	8b b1       	in	r24, 0x0b	; 11
 280:	8f 77       	andi	r24, 0x7F	; 127
 282:	8b b9       	out	0x0b, r24	; 11
 284:	08 95       	ret

00000286 <inicio>:
 286:	95 b1       	in	r25, 0x05	; 5
 288:	9e 7f       	andi	r25, 0xFE	; 254
 28a:	95 b9       	out	0x05, r25	; 5
 28c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <dato_a_mostrar>
 290:	85 b1       	in	r24, 0x05	; 5
 292:	82 60       	ori	r24, 0x02	; 2
 294:	85 b9       	out	0x05, r24	; 5
 296:	8f e9       	ldi	r24, 0x9F	; 159
 298:	9f e0       	ldi	r25, 0x0F	; 15
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <inicio+0x14>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <inicio+0x1a>
 2a0:	00 00       	nop
 2a2:	85 b1       	in	r24, 0x05	; 5
 2a4:	8d 7f       	andi	r24, 0xFD	; 253
 2a6:	85 b9       	out	0x05, r24	; 5
 2a8:	8f e9       	ldi	r24, 0x9F	; 159
 2aa:	9f e0       	ldi	r25, 0x0F	; 15
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <inicio+0x26>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <inicio+0x2c>
 2b2:	00 00       	nop
 2b4:	08 95       	ret

000002b6 <Lcd_Init8bits>:
 2b6:	85 b1       	in	r24, 0x05	; 5
 2b8:	8e 7f       	andi	r24, 0xFE	; 254
 2ba:	85 b9       	out	0x05, r24	; 5
 2bc:	85 b1       	in	r24, 0x05	; 5
 2be:	8d 7f       	andi	r24, 0xFD	; 253
 2c0:	85 b9       	out	0x05, r24	; 5
 2c2:	2f ef       	ldi	r18, 0xFF	; 255
 2c4:	89 ef       	ldi	r24, 0xF9	; 249
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <Lcd_Init8bits+0x12>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <Lcd_Init8bits+0x1c>
 2d2:	00 00       	nop
 2d4:	80 e3       	ldi	r24, 0x30	; 48
 2d6:	0e 94 43 01 	call	0x286	; 0x286 <inicio>
 2da:	8f e1       	ldi	r24, 0x1F	; 31
 2dc:	9e e4       	ldi	r25, 0x4E	; 78
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <Lcd_Init8bits+0x28>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <Lcd_Init8bits+0x2e>
 2e4:	00 00       	nop
 2e6:	80 e3       	ldi	r24, 0x30	; 48
 2e8:	0e 94 43 01 	call	0x286	; 0x286 <inicio>
 2ec:	8f e1       	ldi	r24, 0x1F	; 31
 2ee:	9e e4       	ldi	r25, 0x4E	; 78
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <Lcd_Init8bits+0x3a>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <Lcd_Init8bits+0x40>
 2f6:	00 00       	nop
 2f8:	80 e3       	ldi	r24, 0x30	; 48
 2fa:	0e 94 43 01 	call	0x286	; 0x286 <inicio>
 2fe:	8f e3       	ldi	r24, 0x3F	; 63
 300:	9c e9       	ldi	r25, 0x9C	; 156
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <Lcd_Init8bits+0x4c>
 306:	00 c0       	rjmp	.+0      	; 0x308 <Lcd_Init8bits+0x52>
 308:	00 00       	nop
 30a:	88 e3       	ldi	r24, 0x38	; 56
 30c:	0e 94 43 01 	call	0x286	; 0x286 <inicio>
 310:	8c e0       	ldi	r24, 0x0C	; 12
 312:	0e 94 43 01 	call	0x286	; 0x286 <inicio>
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 43 01 	call	0x286	; 0x286 <inicio>
 31c:	86 e0       	ldi	r24, 0x06	; 6
 31e:	0e 94 43 01 	call	0x286	; 0x286 <inicio>
 322:	08 95       	ret

00000324 <Lcd_Clear>:
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 43 01 	call	0x286	; 0x286 <inicio>
 32a:	08 95       	ret

0000032c <Lcd_Write_Char>:
}


void Lcd_Write_Char(char data)
{
	PORTB |= (1<<PORTB0);        // RS = 1, se le indica que esta en modo caracter
 32c:	95 b1       	in	r25, 0x05	; 5
 32e:	91 60       	ori	r25, 0x01	; 1
 330:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(data);             //Escribir el caracter
 332:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);       // E = 1, enviar el dato
 336:	85 b1       	in	r24, 0x05	; 5
 338:	82 60       	ori	r24, 0x02	; 2
 33a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33c:	8f e9       	ldi	r24, 0x9F	; 159
 33e:	9f e0       	ldi	r25, 0x0F	; 15
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <Lcd_Write_Char+0x14>
 344:	00 c0       	rjmp	.+0      	; 0x346 <Lcd_Write_Char+0x1a>
 346:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);    // E = 0
 348:	85 b1       	in	r24, 0x05	; 5
 34a:	8d 7f       	andi	r24, 0xFD	; 253
 34c:	85 b9       	out	0x05, r24	; 5
 34e:	8f e9       	ldi	r24, 0x9F	; 159
 350:	9f e0       	ldi	r25, 0x0F	; 15
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <Lcd_Write_Char+0x26>
 356:	00 c0       	rjmp	.+0      	; 0x358 <Lcd_Write_Char+0x2c>
 358:	00 00       	nop
 35a:	08 95       	ret

0000035c <Lcd_Write_String>:
	_delay_ms(1);
}


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	8c 01       	movw	r16, r24
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 366:	c0 e0       	ldi	r28, 0x00	; 0
 368:	d0 e0       	ldi	r29, 0x00	; 0
 36a:	03 c0       	rjmp	.+6      	; 0x372 <Lcd_Write_String+0x16>
	Lcd_Write_Char(a[i]);
 36c:	0e 94 96 01 	call	0x32c	; 0x32c <Lcd_Write_Char>


void Lcd_Write_String(char *a) //Usando punteros, ya que, estos almacenan por ejemplo *dato = hola\0, al final siempre llevan un caracter nulo
{
	int i;
	for(i=0; a[i]!='\0'; i++)   //Se recorre todo el puntero, hasta que el valor sea nulo
 370:	21 96       	adiw	r28, 0x01	; 1
 372:	f8 01       	movw	r30, r16
 374:	ec 0f       	add	r30, r28
 376:	fd 1f       	adc	r31, r29
 378:	80 81       	ld	r24, Z
 37a:	81 11       	cpse	r24, r1
 37c:	f7 cf       	rjmp	.-18     	; 0x36c <Lcd_Write_String+0x10>
	Lcd_Write_Char(a[i]);
}
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	08 95       	ret

00000388 <setup>:


uint8_t i =0;
void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
 388:	f8 94       	cli
	DDRD = 0xFF;  //Puerto D como salida
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;  //Puerto B como salida
 38e:	84 b9       	out	0x04, r24	; 4
	
	
	UCSR0B = 0;  //Usar los pines TX y RX como digitales
 390:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	Lcd_Init8bits();   //Iniciar pantalla LCD
 394:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Lcd_Init8bits>
	Lcd_Clear();
 398:	0e 94 92 01 	call	0x324	; 0x324 <Lcd_Clear>
	
	I2C_Config_MASTER(4, 200);
 39c:	48 ec       	ldi	r20, 0xC8	; 200
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	84 e0       	ldi	r24, 0x04	; 4
 3a6:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Config_MASTER>
	
	sei(); //Activar interrupciones
 3aa:	78 94       	sei
 3ac:	08 95       	ret

000003ae <main>:
}


int main(void)
{
   setup();
 3ae:	0e 94 c4 01 	call	0x388	; 0x388 <setup>
    while (1) 
    {
		  Lcd_Write_String("Hola UVG");
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 ae 01 	call	0x35c	; 0x35c <Lcd_Write_String>
 3ba:	2f ef       	ldi	r18, 0xFF	; 255
 3bc:	83 ed       	ldi	r24, 0xD3	; 211
 3be:	90 e3       	ldi	r25, 0x30	; 48
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	80 40       	sbci	r24, 0x00	; 0
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <main+0x12>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <main+0x1c>
 3ca:	00 00       	nop
		  _delay_ms(1000);
		  Lcd_Clear();
 3cc:	0e 94 92 01 	call	0x324	; 0x324 <Lcd_Clear>
		  I2C_esclavo(i);
 3d0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3d4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <I2C_esclavo>
 3d8:	2f ef       	ldi	r18, 0xFF	; 255
 3da:	83 ed       	ldi	r24, 0xD3	; 211
 3dc:	90 e3       	ldi	r25, 0x30	; 48
 3de:	21 50       	subi	r18, 0x01	; 1
 3e0:	80 40       	sbci	r24, 0x00	; 0
 3e2:	90 40       	sbci	r25, 0x00	; 0
 3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x30>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x3a>
 3e8:	00 00       	nop
		  _delay_ms(1000);
		  i++;
 3ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3ee:	8f 5f       	subi	r24, 0xFF	; 255
 3f0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 3f4:	de cf       	rjmp	.-68     	; 0x3b2 <main+0x4>

000003f6 <__udivmodsi4>:
 3f6:	a1 e2       	ldi	r26, 0x21	; 33
 3f8:	1a 2e       	mov	r1, r26
 3fa:	aa 1b       	sub	r26, r26
 3fc:	bb 1b       	sub	r27, r27
 3fe:	fd 01       	movw	r30, r26
 400:	0d c0       	rjmp	.+26     	; 0x41c <__udivmodsi4_ep>

00000402 <__udivmodsi4_loop>:
 402:	aa 1f       	adc	r26, r26
 404:	bb 1f       	adc	r27, r27
 406:	ee 1f       	adc	r30, r30
 408:	ff 1f       	adc	r31, r31
 40a:	a2 17       	cp	r26, r18
 40c:	b3 07       	cpc	r27, r19
 40e:	e4 07       	cpc	r30, r20
 410:	f5 07       	cpc	r31, r21
 412:	20 f0       	brcs	.+8      	; 0x41c <__udivmodsi4_ep>
 414:	a2 1b       	sub	r26, r18
 416:	b3 0b       	sbc	r27, r19
 418:	e4 0b       	sbc	r30, r20
 41a:	f5 0b       	sbc	r31, r21

0000041c <__udivmodsi4_ep>:
 41c:	66 1f       	adc	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	88 1f       	adc	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	1a 94       	dec	r1
 426:	69 f7       	brne	.-38     	; 0x402 <__udivmodsi4_loop>
 428:	60 95       	com	r22
 42a:	70 95       	com	r23
 42c:	80 95       	com	r24
 42e:	90 95       	com	r25
 430:	9b 01       	movw	r18, r22
 432:	ac 01       	movw	r20, r24
 434:	bd 01       	movw	r22, r26
 436:	cf 01       	movw	r24, r30
 438:	08 95       	ret

0000043a <_exit>:
 43a:	f8 94       	cli

0000043c <__stop_program>:
 43c:	ff cf       	rjmp	.-2      	; 0x43c <__stop_program>
