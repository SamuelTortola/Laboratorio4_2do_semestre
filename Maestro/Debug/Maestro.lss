
Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bb6  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000799  00000000  00000000  00000ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000053b  00000000  00000000  00001677  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043d  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003cb  00000000  00000000  000020dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  78:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <dato_a_mostrar>:
}


void dato_a_mostrar(char a)
{
	if(a & 1)				//0000 0001, el  a&1 es una operación bitwise, si el primer bit menos signfiativo es 1, la condición es verdadera
  80:	80 ff       	sbrs	r24, 0
  82:	04 c0       	rjmp	.+8      	; 0x8c <dato_a_mostrar+0xc>
	PORTD |= (1<<0);
  84:	9b b1       	in	r25, 0x0b	; 11
  86:	91 60       	ori	r25, 0x01	; 1
  88:	9b b9       	out	0x0b, r25	; 11
  8a:	03 c0       	rjmp	.+6      	; 0x92 <dato_a_mostrar+0x12>
	else
	PORTD &= ~(1<<0);
  8c:	9b b1       	in	r25, 0x0b	; 11
  8e:	9e 7f       	andi	r25, 0xFE	; 254
  90:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 2)			   //0000 0010, ahora verifica el segundo bit menos significativo, y si es 1, la condición es verdadera
  92:	81 ff       	sbrs	r24, 1
  94:	04 c0       	rjmp	.+8      	; 0x9e <dato_a_mostrar+0x1e>
	PORTD |= (1<<1);
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	92 60       	ori	r25, 0x02	; 2
  9a:	9b b9       	out	0x0b, r25	; 11
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <dato_a_mostrar+0x24>
	else
	PORTD &= ~(1<<1);
  9e:	9b b1       	in	r25, 0x0b	; 11
  a0:	9d 7f       	andi	r25, 0xFD	; 253
  a2:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 4)				//0000 0100
  a4:	82 ff       	sbrs	r24, 2
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <dato_a_mostrar+0x30>
	PORTD |= (1<<PORTD2);
  a8:	9b b1       	in	r25, 0x0b	; 11
  aa:	94 60       	ori	r25, 0x04	; 4
  ac:	9b b9       	out	0x0b, r25	; 11
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <dato_a_mostrar+0x36>
	else
	PORTD &= ~(1<<PORTD2);
  b0:	9b b1       	in	r25, 0x0b	; 11
  b2:	9b 7f       	andi	r25, 0xFB	; 251
  b4:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 8)				//0000 1000
  b6:	83 ff       	sbrs	r24, 3
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <dato_a_mostrar+0x42>
	PORTD |= (1<<PORTD3);
  ba:	9b b1       	in	r25, 0x0b	; 11
  bc:	98 60       	ori	r25, 0x08	; 8
  be:	9b b9       	out	0x0b, r25	; 11
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <dato_a_mostrar+0x48>
	else
	PORTD &= ~(1<<PORTD3);
  c2:	9b b1       	in	r25, 0x0b	; 11
  c4:	97 7f       	andi	r25, 0xF7	; 247
  c6:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 16)			    //0001 0000
  c8:	84 ff       	sbrs	r24, 4
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <dato_a_mostrar+0x54>
	PORTD |= (1<<PORTD4);
  cc:	9b b1       	in	r25, 0x0b	; 11
  ce:	90 61       	ori	r25, 0x10	; 16
  d0:	9b b9       	out	0x0b, r25	; 11
  d2:	03 c0       	rjmp	.+6      	; 0xda <dato_a_mostrar+0x5a>
	else
	PORTD &= ~(1<<PORTD4);
  d4:	9b b1       	in	r25, 0x0b	; 11
  d6:	9f 7e       	andi	r25, 0xEF	; 239
  d8:	9b b9       	out	0x0b, r25	; 11

	if(a & 32)			    //0010 0000
  da:	85 ff       	sbrs	r24, 5
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <dato_a_mostrar+0x66>
	PORTD |= (1<<PORTD5);
  de:	9b b1       	in	r25, 0x0b	; 11
  e0:	90 62       	ori	r25, 0x20	; 32
  e2:	9b b9       	out	0x0b, r25	; 11
  e4:	03 c0       	rjmp	.+6      	; 0xec <dato_a_mostrar+0x6c>
	else
	PORTD &= ~(1<<PORTD5);
  e6:	9b b1       	in	r25, 0x0b	; 11
  e8:	9f 7d       	andi	r25, 0xDF	; 223
  ea:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 64)			   //0100 0000
  ec:	86 ff       	sbrs	r24, 6
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <dato_a_mostrar+0x78>
	PORTD |= (1<<PORTD6);
  f0:	9b b1       	in	r25, 0x0b	; 11
  f2:	90 64       	ori	r25, 0x40	; 64
  f4:	9b b9       	out	0x0b, r25	; 11
  f6:	03 c0       	rjmp	.+6      	; 0xfe <dato_a_mostrar+0x7e>
	else
	PORTD &= ~(1<<PORTD6);
  f8:	9b b1       	in	r25, 0x0b	; 11
  fa:	9f 7b       	andi	r25, 0xBF	; 191
  fc:	9b b9       	out	0x0b, r25	; 11
	
	if(a & 128)			   //1000 0000
  fe:	88 23       	and	r24, r24
 100:	24 f4       	brge	.+8      	; 0x10a <dato_a_mostrar+0x8a>
	PORTD |= (1<<PORTD7);
 102:	8b b1       	in	r24, 0x0b	; 11
 104:	80 68       	ori	r24, 0x80	; 128
 106:	8b b9       	out	0x0b, r24	; 11
 108:	08 95       	ret
	else
	PORTD &= ~(1<<PORTD7);
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	8f 77       	andi	r24, 0x7F	; 127
 10e:	8b b9       	out	0x0b, r24	; 11
 110:	08 95       	ret

00000112 <inicio>:
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
}

void inicio(char a)
{
	PORTB &= ~(1<<PORTB0);  //RS = 0, se le indica que es modo comando
 112:	95 b1       	in	r25, 0x05	; 5
 114:	9e 7f       	andi	r25, 0xFE	; 254
 116:	95 b9       	out	0x05, r25	; 5
	dato_a_mostrar(a);
 118:	0e 94 40 00 	call	0x80	; 0x80 <dato_a_mostrar>
	PORTB |= (1<<PORTB1);    // E = 1, se le indica que envie los datos
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	8f e9       	ldi	r24, 0x9F	; 159
 124:	9f e0       	ldi	r25, 0x0F	; 15
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <inicio+0x14>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <inicio+0x1a>
 12c:	00 00       	nop
	_delay_ms(1);
	PORTB &= ~(1<<PORTB1);   // E = 0,  se le indica que se cierra el envio de datos
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	85 b9       	out	0x05, r24	; 5
 134:	8f e9       	ldi	r24, 0x9F	; 159
 136:	9f e0       	ldi	r25, 0x0F	; 15
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <inicio+0x26>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <inicio+0x2c>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <Lcd_Init8bits>:
#include "LCD.h"

void Lcd_Init8bits()
{
	PORTB &= ~(1<<PORTB0);   //RS = 0, se le indica que es modo comando
 142:	85 b1       	in	r24, 0x05	; 5
 144:	8e 7f       	andi	r24, 0xFE	; 254
 146:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<PORTB1);   //E = 0
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	8d 7f       	andi	r24, 0xFD	; 253
 14c:	85 b9       	out	0x05, r24	; 5
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	89 ef       	ldi	r24, 0xF9	; 249
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <Lcd_Init8bits+0x12>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <Lcd_Init8bits+0x1c>
 15e:	00 00       	nop
	_delay_ms(20);     //Pequeños delay que indica el fabricante del LCD
	inicio(0x30);     //Comando que se repite 3 veces, que indica el fabricante de la LCD
 160:	80 e3       	ldi	r24, 0x30	; 48
 162:	0e 94 89 00 	call	0x112	; 0x112 <inicio>
 166:	8f e1       	ldi	r24, 0x1F	; 31
 168:	9e e4       	ldi	r25, 0x4E	; 78
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <Lcd_Init8bits+0x28>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <Lcd_Init8bits+0x2e>
 170:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 172:	80 e3       	ldi	r24, 0x30	; 48
 174:	0e 94 89 00 	call	0x112	; 0x112 <inicio>
 178:	8f e1       	ldi	r24, 0x1F	; 31
 17a:	9e e4       	ldi	r25, 0x4E	; 78
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <Lcd_Init8bits+0x3a>
 180:	00 c0       	rjmp	.+0      	; 0x182 <Lcd_Init8bits+0x40>
 182:	00 00       	nop
	_delay_ms(5);
	inicio(0x30);
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	0e 94 89 00 	call	0x112	; 0x112 <inicio>
 18a:	8f e3       	ldi	r24, 0x3F	; 63
 18c:	9c e9       	ldi	r25, 0x9C	; 156
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <Lcd_Init8bits+0x4c>
 192:	00 c0       	rjmp	.+0      	; 0x194 <Lcd_Init8bits+0x52>
 194:	00 00       	nop
	_delay_ms(10);

	inicio(0x38);  //Comando que indica el fabricante del LCD, usando la matriz de 5X8
 196:	88 e3       	ldi	r24, 0x38	; 56
 198:	0e 94 89 00 	call	0x112	; 0x112 <inicio>
	inicio(0x0C);  //Comando que indica el fabricante del LCD, display encendido
 19c:	8c e0       	ldi	r24, 0x0C	; 12
 19e:	0e 94 89 00 	call	0x112	; 0x112 <inicio>
	inicio(0x01);  //Comando que indica el fabricante del LCD, Limpiar LCD
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 89 00 	call	0x112	; 0x112 <inicio>
	inicio(0x06);  //Comando que indica el fabricante del LCD, comenzar a almacenar en DDRAM
 1a8:	86 e0       	ldi	r24, 0x06	; 6
 1aa:	0e 94 89 00 	call	0x112	; 0x112 <inicio>
 1ae:	08 95       	ret

000001b0 <Lcd_Clear>:



void Lcd_Clear()    //Limpia la pantalla LCD
{
	inicio(1);  //Comando dado por el fabricante de la LCD
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 89 00 	call	0x112	; 0x112 <inicio>
 1b6:	08 95       	ret

000001b8 <setup>:



void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
 1b8:	f8 94       	cli
	DDRD = 0xFF;  //Puerto D como salida
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;  //Puerto B como salida
 1be:	84 b9       	out	0x04, r24	; 4
	
	

	UCSR0B = 0;  //Usar los pines TX y RX como digitales
 1c0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	Lcd_Init8bits();   //Iniciar pantalla LCD
 1c4:	0e 94 a1 00 	call	0x142	; 0x142 <Lcd_Init8bits>
	Lcd_Clear();
 1c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Lcd_Clear>
	
	sei(); //Activar interrupciones
 1cc:	78 94       	sei
 1ce:	08 95       	ret

000001d0 <main>:
}


int main(void)
{
   setup();
 1d0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <setup>
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <main+0x4>

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
